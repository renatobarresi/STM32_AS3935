
AS3935_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec8  08003ec8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08003f40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08003f40  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad4d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a04  00000000  00000000  0002aded  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c8  00000000  00000000  0002d098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021d94  00000000  00000000  0002d860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000800a  00000000  00000000  0004f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9051  00000000  00000000  000575fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012064f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  001206cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003dcc 	.word	0x08003dcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003dcc 	.word	0x08003dcc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <read_register>:
 *
 * Param -> reg_addr = the address of the register to read
 *
 * Returns -> Should return OK if reading was ok
 */
void read_register(uint8_t reg_addr){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	  uint8_t command = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
	  //Read mode
	  command |= 1 << 6;
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	73fb      	strb	r3, [r7, #15]

	  //Address of register
	  command |= reg_addr << 0;
 80005c8:	7bfa      	ldrb	r2, [r7, #15]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]

	  //Transmit command to AS3935
	  HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 80005d2:	f107 010f 	add.w	r1, r7, #15
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <read_register+0x48>)
 80005de:	f001 fc45 	bl	8001e6c <HAL_SPI_Transmit>

	  //store received value reg_value
	  HAL_SPI_Receive(&hspi1, &reg_value, 1, HAL_MAX_DELAY);
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	2201      	movs	r2, #1
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <read_register+0x4c>)
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <read_register+0x48>)
 80005ec:	f001 fd72 	bl	80020d4 <HAL_SPI_Receive>

#if DEBUG_SH
	  printf("The value of the register %#X is %#X\n", reg_addr, reg_value);
#endif
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000184 	.word	0x20000184
 80005fc:	2000013c 	.word	0x2000013c

08000600 <read_ln_data>:
 *	Function used to read the IRQ Register (0x03) in the AS3935
 *
 *	Returns -> 1 if lightning detected, 0 if not
 */

uint8_t read_ln_data(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

	//Flag indicating if a lightning has been detected or not
	uint8_t ln_flag = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]

	//Delay 2ms
	//HAL_Delay(2);

	//Read value of REG0x03[3:0]
	read_register(0x03);
 800060a:	2003      	movs	r0, #3
 800060c:	f7ff ffd0 	bl	80005b0 <read_register>

	//Read data in reg_value from bit 0 to bit 3
	uint8_t reg_data;
	reg_data = (reg_value & 0x0F);
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <read_ln_data+0xa8>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f003 030f 	and.w	r3, r3, #15
 8000618:	71bb      	strb	r3, [r7, #6]

	if(reg_data == 8){				//if REG0x03[3:0] == 0b1000 lightning detected
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d12f      	bne.n	8000680 <read_ln_data+0x80>

		ln_flag = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
		reg_data = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	71bb      	strb	r3, [r7, #6]

		//Energy calculation: Read REG0x06[4:0], REG0x05[7:0] REG0x04[7:0]
		ln_enrgy = 0;
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <read_ln_data+0xac>)
 800062a:	2200      	movs	r2, #0
 800062c:	801a      	strh	r2, [r3, #0]
		read_register(0x04);		//LSBYTE
 800062e:	2004      	movs	r0, #4
 8000630:	f7ff ffbe 	bl	80005b0 <read_register>
		ln_enrgy |= reg_value << 0;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <read_ln_data+0xa8>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <read_ln_data+0xac>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	4313      	orrs	r3, r2
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <read_ln_data+0xac>)
 8000644:	801a      	strh	r2, [r3, #0]
		read_register(0x05);		//MSBYTE
 8000646:	2005      	movs	r0, #5
 8000648:	f7ff ffb2 	bl	80005b0 <read_register>
		ln_enrgy |= reg_value << 8;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <read_ln_data+0xa8>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <read_ln_data+0xac>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <read_ln_data+0xac>)
 8000662:	801a      	strh	r2, [r3, #0]
		//read_register(0x06);		//MMSBYTE

		reg_data = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	71bb      	strb	r3, [r7, #6]

		//Statistical Distance Estimation: Read REG0x07[5:0]
		read_register(0x07);
 8000668:	2007      	movs	r0, #7
 800066a:	f7ff ffa1 	bl	80005b0 <read_register>
		reg_data = (reg_value & 0x3F);
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <read_ln_data+0xa8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000676:	71bb      	strb	r3, [r7, #6]
		ln_dist = reg_data;
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <read_ln_data+0xb0>)
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	7013      	strb	r3, [r2, #0]
 800067e:	e00e      	b.n	800069e <read_ln_data+0x9e>

	}else if(reg_data == 4){			//if REG0x03[3:0] == 0b0100, Disturber detected
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	2b04      	cmp	r3, #4
 8000684:	d105      	bne.n	8000692 <read_ln_data+0x92>
		//Do something
		printf("Disturb detected");
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <read_ln_data+0xb4>)
 8000688:	f002 fb6a 	bl	8002d60 <iprintf>
		uint8_t a;
		a=0;
 800068c:	2300      	movs	r3, #0
 800068e:	717b      	strb	r3, [r7, #5]
 8000690:	e005      	b.n	800069e <read_ln_data+0x9e>

	}else if(reg_data == 1){			//if REG0x03[3:0] == 0b0001, Noise level too high
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d102      	bne.n	800069e <read_ln_data+0x9e>
		//Do something
		printf("Noise level too high");
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <read_ln_data+0xb8>)
 800069a:	f002 fb61 	bl	8002d60 <iprintf>
	}

	return ln_flag;
 800069e:	79fb      	ldrb	r3, [r7, #7]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000013c 	.word	0x2000013c
 80006ac:	2000013e 	.word	0x2000013e
 80006b0:	20000140 	.word	0x20000140
 80006b4:	08003de4 	.word	0x08003de4
 80006b8:	08003df8 	.word	0x08003df8

080006bc <main>:
#if DEBUG_SH
extern void initialise_monitor_handles();
#endif

int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fb18 	bl	8000cf4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f808 	bl	80006d8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f8c6 	bl	8000858 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006cc:	f000 f864 	bl	8000798 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006d0:	f000 f898 	bl	8000804 <MX_USART3_UART_Init>

  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x18>
	...

080006d8 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fb32 	bl	8002d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemClock_Config+0xb8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a22      	ldr	r2, [pc, #136]	; (8000790 <SystemClock_Config+0xb8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemClock_Config+0xb8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemClock_Config+0xbc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemClock_Config+0xbc>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemClock_Config+0xbc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f8cf 	bl	80018f0 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000758:	f000 f92a 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fe03 	bl	8001384 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000784:	f000 f914 	bl	80009b0 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_SPI1_Init>:


static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2201      	movs	r2, #1
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2218      	movs	r2, #24
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f001 fadb 	bl	8001da4 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f8dc 	bl	80009b0 <Error_Handler>
  }


}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000184 	.word	0x20000184
 8000800:	40013000 	.word	0x40013000

08000804 <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART3_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART3_UART_Init+0x4c>)
 800083c:	f002 f806 	bl	800284c <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f8b3 	bl	80009b0 <Error_Handler>
  }


}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000144 	.word	0x20000144
 8000854:	40004800 	.word	0x40004800

08000858 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_GPIO_Init+0x104>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a39      	ldr	r2, [pc, #228]	; (800095c <MX_GPIO_Init+0x104>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_GPIO_Init+0x104>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <MX_GPIO_Init+0x104>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a32      	ldr	r2, [pc, #200]	; (800095c <MX_GPIO_Init+0x104>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <MX_GPIO_Init+0x104>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <MX_GPIO_Init+0x104>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2b      	ldr	r2, [pc, #172]	; (800095c <MX_GPIO_Init+0x104>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b29      	ldr	r3, [pc, #164]	; (800095c <MX_GPIO_Init+0x104>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_GPIO_Init+0x104>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a24      	ldr	r2, [pc, #144]	; (800095c <MX_GPIO_Init+0x104>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_GPIO_Init+0x104>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e4:	481e      	ldr	r0, [pc, #120]	; (8000960 <MX_GPIO_Init+0x108>)
 80008e6:	f000 fd1b 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ea:	230c      	movs	r3, #12
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fa:	2307      	movs	r3, #7
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4816      	ldr	r0, [pc, #88]	; (8000960 <MX_GPIO_Init+0x108>)
 8000906:	f000 fb79 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800090a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <MX_GPIO_Init+0x108>)
 8000924:	f000 fb6a 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_GPIO_Init+0x10c>)
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000932:	2302      	movs	r3, #2
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_GPIO_Init+0x108>)
 800093e:	f000 fb5d 	bl	8000ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2017      	movs	r0, #23
 8000948:	f000 fb21 	bl	8000f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800094c:	2017      	movs	r0, #23
 800094e:	f000 fb3a 	bl	8000fc6 <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	10110000 	.word	0x10110000

08000968 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9){
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000978:	d111      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000982:	f000 fccd 	bl	8001320 <HAL_GPIO_WritePin>
		ln_flag = read_ln_data();
 8000986:	f7ff fe3b 	bl	8000600 <read_ln_data>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <HAL_GPIO_EXTI_Callback+0x44>)
 8000990:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x40>)
 800099a:	f000 fcc1 	bl	8001320 <HAL_GPIO_WritePin>
	}
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40020000 	.word	0x40020000
 80009ac:	2000008c 	.word	0x2000008c

080009b0 <Error_Handler>:

void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_SPI_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a6a:	23f0      	movs	r3, #240	; 0xf0
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a86:	f000 fab9 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013000 	.word	0x40013000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <HAL_UART_MspInit+0xc0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d14a      	bne.n	8000b58 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_UART_MspInit+0xc4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b16:	2320      	movs	r3, #32
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <HAL_UART_MspInit+0xc8>)
 8000b32:	f000 fa63 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_UART_MspInit+0xcc>)
 8000b54:	f000 fa52 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40004800 	.word	0x40004800
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8e8 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  //Delay 2ms
  //HAL_Delay(2);
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000bd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bd4:	f000 fbbe 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x50>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x16>
		heap_end = &end;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <_sbrk+0x50>)
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <_sbrk+0x54>)
 8000bf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <_sbrk+0x50>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <_sbrk+0x50>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	466a      	mov	r2, sp
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d907      	bls.n	8000c16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c06:	f002 f879 	bl	8002cfc <__errno>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	e006      	b.n	8000c24 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <_sbrk+0x50>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <_sbrk+0x50>)
 8000c20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000090 	.word	0x20000090
 8000c30:	200001e8 	.word	0x200001e8

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <SystemInit+0x60>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <SystemInit+0x60>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <SystemInit+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <SystemInit+0x64>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <SystemInit+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <SystemInit+0x64>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <SystemInit+0x64>)
 8000c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <SystemInit+0x64>)
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <SystemInit+0x68>)
 8000c6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <SystemInit+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <SystemInit+0x64>)
 8000c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SystemInit+0x60>)
 8000c84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c88:	609a      	str	r2, [r3, #8]
#endif
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	24003010 	.word	0x24003010

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ca6:	e003      	b.n	8000cb0 <LoopCopyDataInit>

08000ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cae:	3104      	adds	r1, #4

08000cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb8:	d3f6      	bcc.n	8000ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cbc:	e002      	b.n	8000cc4 <LoopFillZerobss>

08000cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cc0:	f842 3b04 	str.w	r3, [r2], #4

08000cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc8:	d3f9      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ffb3 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f002 f81b 	bl	8002d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fcf3 	bl	80006bc <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cdc:	08003ed0 	.word	0x08003ed0
  ldr  r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ce8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000cec:	200001e4 	.word	0x200001e4

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f92b 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe4a 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f943 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f90b 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	200001dc 	.word	0x200001dc

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200001dc 	.word	0x200001dc

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff3e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff31 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e165      	b.n	80012e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 8154 	bne.w	80012de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x4a>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b12      	cmp	r3, #18
 8001044:	d123      	bne.n	800108e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	69b9      	ldr	r1, [r7, #24]
 800108a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0203 	and.w	r2, r3, #3
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d00b      	beq.n	80010e2 <HAL_GPIO_Init+0xe6>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d6:	2b11      	cmp	r3, #17
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80ae 	beq.w	80012de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_GPIO_Init+0x2fc>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a5b      	ldr	r2, [pc, #364]	; (80012f8 <HAL_GPIO_Init+0x2fc>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <HAL_GPIO_Init+0x2fc>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a57      	ldr	r2, [pc, #348]	; (80012fc <HAL_GPIO_Init+0x300>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <HAL_GPIO_Init+0x304>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d025      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x308>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01f      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x30c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x310>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x20a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x206>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x202>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e00c      	b.n	8001218 <HAL_GPIO_Init+0x21c>
 80011fe:	2307      	movs	r3, #7
 8001200:	e00a      	b.n	8001218 <HAL_GPIO_Init+0x21c>
 8001202:	2305      	movs	r3, #5
 8001204:	e008      	b.n	8001218 <HAL_GPIO_Init+0x21c>
 8001206:	2304      	movs	r3, #4
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x21c>
 800120a:	2303      	movs	r3, #3
 800120c:	e004      	b.n	8001218 <HAL_GPIO_Init+0x21c>
 800120e:	2302      	movs	r3, #2
 8001210:	e002      	b.n	8001218 <HAL_GPIO_Init+0x21c>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_GPIO_Init+0x21c>
 8001216:	2300      	movs	r3, #0
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	f002 0203 	and.w	r2, r2, #3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4093      	lsls	r3, r2
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001228:	4934      	ldr	r1, [pc, #208]	; (80012fc <HAL_GPIO_Init+0x300>)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_GPIO_Init+0x320>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_GPIO_Init+0x320>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_GPIO_Init+0x320>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <HAL_GPIO_Init+0x320>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_GPIO_Init+0x320>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_GPIO_Init+0x320>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_GPIO_Init+0x320>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_GPIO_Init+0x320>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	f67f ae96 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ec:	bf00      	nop
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40021400 	.word	0x40021400
 8001318:	40021800 	.word	0x40021800
 800131c:	40013c00 	.word	0x40013c00

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff faf8 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0ca      	b.n	800152e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001398:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d90c      	bls.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0b6      	b.n	800152e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d8:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4a57      	ldr	r2, [pc, #348]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f0:	4b52      	ldr	r3, [pc, #328]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a51      	ldr	r2, [pc, #324]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b4f      	ldr	r3, [pc, #316]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	494c      	ldr	r1, [pc, #304]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 800140a:	4313      	orrs	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d044      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d119      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e07d      	b.n	800152e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d003      	beq.n	8001442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143e:	2b03      	cmp	r3, #3
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06d      	b.n	800152e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e065      	b.n	800152e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f023 0203 	bic.w	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4933      	ldr	r1, [pc, #204]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff fca4 	bl	8000dc0 <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	e00a      	b.n	8001492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147c:	f7ff fca0 	bl	8000dc0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	; 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e04d      	b.n	800152e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 020c 	and.w	r2, r3, #12
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1eb      	bne.n	800147c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d20c      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e030      	b.n	800152e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4915      	ldr	r1, [pc, #84]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	490d      	ldr	r1, [pc, #52]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150a:	f000 f851 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800150e:	4601      	mov	r1, r0
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	fa21 f303 	lsr.w	r3, r1, r3
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fc06 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	40023800 	.word	0x40023800
 8001540:	08003e10 	.word	0x08003e10
 8001544:	20000000 	.word	0x20000000

08001548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_RCC_GetHCLKFreq+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000

08001560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001564:	f7ff fff0 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001568:	4601      	mov	r1, r0
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800
 8001584:	08003e20 	.word	0x08003e20

08001588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800158c:	f7ff ffdc 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001590:	4601      	mov	r1, r0
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	0b5b      	lsrs	r3, r3, #13
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	08003e20 	.word	0x08003e20

080015b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ca:	4bc6      	ldr	r3, [pc, #792]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	f200 817e 	bhi.w	80018d4 <HAL_RCC_GetSysClockFreq+0x324>
 80015d8:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80015da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015de:	bf00      	nop
 80015e0:	08001615 	.word	0x08001615
 80015e4:	080018d5 	.word	0x080018d5
 80015e8:	080018d5 	.word	0x080018d5
 80015ec:	080018d5 	.word	0x080018d5
 80015f0:	0800161b 	.word	0x0800161b
 80015f4:	080018d5 	.word	0x080018d5
 80015f8:	080018d5 	.word	0x080018d5
 80015fc:	080018d5 	.word	0x080018d5
 8001600:	08001621 	.word	0x08001621
 8001604:	080018d5 	.word	0x080018d5
 8001608:	080018d5 	.word	0x080018d5
 800160c:	080018d5 	.word	0x080018d5
 8001610:	0800177d 	.word	0x0800177d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4bb4      	ldr	r3, [pc, #720]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001616:	613b      	str	r3, [r7, #16]
       break;
 8001618:	e15f      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800161a:	4bb4      	ldr	r3, [pc, #720]	; (80018ec <HAL_RCC_GetSysClockFreq+0x33c>)
 800161c:	613b      	str	r3, [r7, #16]
      break;
 800161e:	e15c      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001620:	4bb0      	ldr	r3, [pc, #704]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001628:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800162a:	4bae      	ldr	r3, [pc, #696]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d04a      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001636:	4bab      	ldr	r3, [pc, #684]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	f04f 0400 	mov.w	r4, #0
 8001640:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	ea03 0501 	and.w	r5, r3, r1
 800164c:	ea04 0602 	and.w	r6, r4, r2
 8001650:	4629      	mov	r1, r5
 8001652:	4632      	mov	r2, r6
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	f04f 0400 	mov.w	r4, #0
 800165c:	0154      	lsls	r4, r2, #5
 800165e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001662:	014b      	lsls	r3, r1, #5
 8001664:	4619      	mov	r1, r3
 8001666:	4622      	mov	r2, r4
 8001668:	1b49      	subs	r1, r1, r5
 800166a:	eb62 0206 	sbc.w	r2, r2, r6
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	f04f 0400 	mov.w	r4, #0
 8001676:	0194      	lsls	r4, r2, #6
 8001678:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800167c:	018b      	lsls	r3, r1, #6
 800167e:	1a5b      	subs	r3, r3, r1
 8001680:	eb64 0402 	sbc.w	r4, r4, r2
 8001684:	f04f 0100 	mov.w	r1, #0
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	00e2      	lsls	r2, r4, #3
 800168e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001692:	00d9      	lsls	r1, r3, #3
 8001694:	460b      	mov	r3, r1
 8001696:	4614      	mov	r4, r2
 8001698:	195b      	adds	r3, r3, r5
 800169a:	eb44 0406 	adc.w	r4, r4, r6
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	0262      	lsls	r2, r4, #9
 80016a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016ac:	0259      	lsls	r1, r3, #9
 80016ae:	460b      	mov	r3, r1
 80016b0:	4614      	mov	r4, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	4621      	mov	r1, r4
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f04f 0400 	mov.w	r4, #0
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	f7fe fdf6 	bl	80002b0 <__aeabi_uldivmod>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	e049      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016cc:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	f04f 0400 	mov.w	r4, #0
 80016d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	ea03 0501 	and.w	r5, r3, r1
 80016e2:	ea04 0602 	and.w	r6, r4, r2
 80016e6:	4629      	mov	r1, r5
 80016e8:	4632      	mov	r2, r6
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	f04f 0400 	mov.w	r4, #0
 80016f2:	0154      	lsls	r4, r2, #5
 80016f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016f8:	014b      	lsls	r3, r1, #5
 80016fa:	4619      	mov	r1, r3
 80016fc:	4622      	mov	r2, r4
 80016fe:	1b49      	subs	r1, r1, r5
 8001700:	eb62 0206 	sbc.w	r2, r2, r6
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f04f 0400 	mov.w	r4, #0
 800170c:	0194      	lsls	r4, r2, #6
 800170e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001712:	018b      	lsls	r3, r1, #6
 8001714:	1a5b      	subs	r3, r3, r1
 8001716:	eb64 0402 	sbc.w	r4, r4, r2
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	00e2      	lsls	r2, r4, #3
 8001724:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001728:	00d9      	lsls	r1, r3, #3
 800172a:	460b      	mov	r3, r1
 800172c:	4614      	mov	r4, r2
 800172e:	195b      	adds	r3, r3, r5
 8001730:	eb44 0406 	adc.w	r4, r4, r6
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	02a2      	lsls	r2, r4, #10
 800173e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001742:	0299      	lsls	r1, r3, #10
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	4618      	mov	r0, r3
 800174a:	4621      	mov	r1, r4
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f04f 0400 	mov.w	r4, #0
 8001752:	461a      	mov	r2, r3
 8001754:	4623      	mov	r3, r4
 8001756:	f7fe fdab 	bl	80002b0 <__aeabi_uldivmod>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001760:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	3301      	adds	r3, #1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	613b      	str	r3, [r7, #16]
      break;
 800177a:	e0ae      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001784:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001786:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d04a      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001792:	4b54      	ldr	r3, [pc, #336]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	f04f 0400 	mov.w	r4, #0
 800179c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	ea03 0501 	and.w	r5, r3, r1
 80017a8:	ea04 0602 	and.w	r6, r4, r2
 80017ac:	4629      	mov	r1, r5
 80017ae:	4632      	mov	r2, r6
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	0154      	lsls	r4, r2, #5
 80017ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017be:	014b      	lsls	r3, r1, #5
 80017c0:	4619      	mov	r1, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	1b49      	subs	r1, r1, r5
 80017c6:	eb62 0206 	sbc.w	r2, r2, r6
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	0194      	lsls	r4, r2, #6
 80017d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017d8:	018b      	lsls	r3, r1, #6
 80017da:	1a5b      	subs	r3, r3, r1
 80017dc:	eb64 0402 	sbc.w	r4, r4, r2
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	00e2      	lsls	r2, r4, #3
 80017ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017ee:	00d9      	lsls	r1, r3, #3
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	195b      	adds	r3, r3, r5
 80017f6:	eb44 0406 	adc.w	r4, r4, r6
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	0262      	lsls	r2, r4, #9
 8001804:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001808:	0259      	lsls	r1, r3, #9
 800180a:	460b      	mov	r3, r1
 800180c:	4614      	mov	r4, r2
 800180e:	4618      	mov	r0, r3
 8001810:	4621      	mov	r1, r4
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f04f 0400 	mov.w	r4, #0
 8001818:	461a      	mov	r2, r3
 800181a:	4623      	mov	r3, r4
 800181c:	f7fe fd48 	bl	80002b0 <__aeabi_uldivmod>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e049      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	f04f 0400 	mov.w	r4, #0
 8001832:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	ea03 0501 	and.w	r5, r3, r1
 800183e:	ea04 0602 	and.w	r6, r4, r2
 8001842:	4629      	mov	r1, r5
 8001844:	4632      	mov	r2, r6
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	0154      	lsls	r4, r2, #5
 8001850:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001854:	014b      	lsls	r3, r1, #5
 8001856:	4619      	mov	r1, r3
 8001858:	4622      	mov	r2, r4
 800185a:	1b49      	subs	r1, r1, r5
 800185c:	eb62 0206 	sbc.w	r2, r2, r6
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f04f 0400 	mov.w	r4, #0
 8001868:	0194      	lsls	r4, r2, #6
 800186a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800186e:	018b      	lsls	r3, r1, #6
 8001870:	1a5b      	subs	r3, r3, r1
 8001872:	eb64 0402 	sbc.w	r4, r4, r2
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	00e2      	lsls	r2, r4, #3
 8001880:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001884:	00d9      	lsls	r1, r3, #3
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	195b      	adds	r3, r3, r5
 800188c:	eb44 0406 	adc.w	r4, r4, r6
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	02a2      	lsls	r2, r4, #10
 800189a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800189e:	0299      	lsls	r1, r3, #10
 80018a0:	460b      	mov	r3, r1
 80018a2:	4614      	mov	r4, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	4621      	mov	r1, r4
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f04f 0400 	mov.w	r4, #0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4623      	mov	r3, r4
 80018b2:	f7fe fcfd 	bl	80002b0 <__aeabi_uldivmod>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0f1b      	lsrs	r3, r3, #28
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	613b      	str	r3, [r7, #16]
      break;
 80018d2:	e002      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x338>)
 80018d6:	613b      	str	r3, [r7, #16]
      break;
 80018d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018da:	693b      	ldr	r3, [r7, #16]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	007a1200 	.word	0x007a1200

080018f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8083 	beq.w	8001a10 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800190a:	4b95      	ldr	r3, [pc, #596]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b04      	cmp	r3, #4
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001916:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800191e:	2b08      	cmp	r3, #8
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001922:	4b8f      	ldr	r3, [pc, #572]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800192e:	d00c      	beq.n	800194a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001930:	4b8b      	ldr	r3, [pc, #556]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d112      	bne.n	8001962 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193c:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b85      	ldr	r3, [pc, #532]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d05b      	beq.n	8001a0e <HAL_RCC_OscConfig+0x11e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d157      	bne.n	8001a0e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e216      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x8a>
 800196c:	4b7c      	ldr	r3, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7b      	ldr	r2, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e01d      	b.n	80019b6 <HAL_RCC_OscConfig+0xc6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0xae>
 8001984:	4b76      	ldr	r3, [pc, #472]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a75      	ldr	r2, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 800198a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b73      	ldr	r3, [pc, #460]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a72      	ldr	r2, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0xc6>
 800199e:	4b70      	ldr	r3, [pc, #448]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6f      	ldr	r2, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 80019a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6c      	ldr	r2, [pc, #432]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d013      	beq.n	80019e6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff f9ff 	bl	8000dc0 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c6:	f7ff f9fb 	bl	8000dc0 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1db      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d8:	4b61      	ldr	r3, [pc, #388]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0xd6>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f9eb 	bl	8000dc0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ee:	f7ff f9e7 	bl	8000dc0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1c7      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a00:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0xfe>
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d06f      	beq.n	8001afc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d017      	beq.n	8001a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d105      	bne.n	8001a40 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a40:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d11c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4c:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d116      	bne.n	8001a86 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a58:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x180>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e18f      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4938      	ldr	r1, [pc, #224]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a84:	e03a      	b.n	8001afc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d020      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8e:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f994 	bl	8000dc0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f990 	bl	8000dc0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e170      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4925      	ldr	r1, [pc, #148]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
 8001ace:	e015      	b.n	8001afc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f973 	bl	8000dc0 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff f96f 	bl	8000dc0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e14f      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d037      	beq.n	8001b78 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d016      	beq.n	8001b3e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_OscConfig+0x278>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff f953 	bl	8000dc0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f94f 	bl	8000dc0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e12f      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x22e>
 8001b3c:	e01c      	b.n	8001b78 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_OscConfig+0x278>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f93c 	bl	8000dc0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4a:	e00f      	b.n	8001b6c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f938 	bl	8000dc0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d908      	bls.n	8001b6c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e118      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	42470000 	.word	0x42470000
 8001b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6c:	4b8a      	ldr	r3, [pc, #552]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e9      	bne.n	8001b4c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8097 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b83      	ldr	r3, [pc, #524]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b79      	ldr	r3, [pc, #484]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f8f7 	bl	8000dc0 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff f8f3 	bl	8000dc0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0d3      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x31a>
 8001bfc:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
 8001c08:	e01c      	b.n	8001c44 <HAL_RCC_OscConfig+0x354>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x33c>
 8001c12:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	4a60      	ldr	r2, [pc, #384]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1e:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	4a5d      	ldr	r2, [pc, #372]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_OscConfig+0x354>
 8001c2c:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	4a59      	ldr	r2, [pc, #356]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	; 0x70
 8001c38:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c3e:	f023 0304 	bic.w	r3, r3, #4
 8001c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d015      	beq.n	8001c78 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f8b8 	bl	8000dc0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7ff f8b4 	bl	8000dc0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e092      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0ee      	beq.n	8001c54 <HAL_RCC_OscConfig+0x364>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f8a2 	bl	8000dc0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c80:	f7ff f89e 	bl	8000dc0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e07c      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c96:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ee      	bne.n	8001c80 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d068      	beq.n	8001d8e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d060      	beq.n	8001d8a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d145      	bne.n	8001d5c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <HAL_RCC_OscConfig+0x4b0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f873 	bl	8000dc0 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f86f 	bl	8000dc0 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e04f      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69da      	ldr	r2, [r3, #28]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	061b      	lsls	r3, r3, #24
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	071b      	lsls	r3, r3, #28
 8001d28:	491b      	ldr	r1, [pc, #108]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_RCC_OscConfig+0x4b0>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f844 	bl	8000dc0 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f840 	bl	8000dc0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e020      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x44c>
 8001d5a:	e018      	b.n	8001d8e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_RCC_OscConfig+0x4b0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff f82d 	bl	8000dc0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff f829 	bl	8000dc0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e009      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x4a8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x47a>
 8001d88:	e001      	b.n	8001d8e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	42470060 	.word	0x42470060

08001da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e056      	b.n	8001e64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fe1d 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	ea42 0103 	orr.w	r1, r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f003 0104 	and.w	r1, r3, #4
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_SPI_Transmit+0x22>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e11e      	b.n	80020cc <HAL_SPI_Transmit+0x260>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e96:	f7fe ff93 	bl	8000dc0 <HAL_GetTick>
 8001e9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d002      	beq.n	8001eb2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
 8001eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eb0:	e103      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_SPI_Transmit+0x52>
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ec2:	e0fa      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	88fa      	ldrh	r2, [r7, #6]
 8001ee2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0a:	d107      	bne.n	8001f1c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d007      	beq.n	8001f3a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f42:	d14b      	bne.n	8001fdc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_Transmit+0xe6>
 8001f4c:	8afb      	ldrh	r3, [r7, #22]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d13e      	bne.n	8001fd0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	1c9a      	adds	r2, r3, #2
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f76:	e02b      	b.n	8001fd0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d112      	bne.n	8001fac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	1c9a      	adds	r2, r3, #2
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001faa:	e011      	b.n	8001fd0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fac:	f7fe ff08 	bl	8000dc0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d803      	bhi.n	8001fc4 <HAL_SPI_Transmit+0x158>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d102      	bne.n	8001fca <HAL_SPI_Transmit+0x15e>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fce:	e074      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ce      	bne.n	8001f78 <HAL_SPI_Transmit+0x10c>
 8001fda:	e04c      	b.n	8002076 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_SPI_Transmit+0x17e>
 8001fe4:	8afb      	ldrh	r3, [r7, #22]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d140      	bne.n	800206c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002010:	e02c      	b.n	800206c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d113      	bne.n	8002048 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	330c      	adds	r3, #12
 800202a:	7812      	ldrb	r2, [r2, #0]
 800202c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	86da      	strh	r2, [r3, #54]	; 0x36
 8002046:	e011      	b.n	800206c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002048:	f7fe feba 	bl	8000dc0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d803      	bhi.n	8002060 <HAL_SPI_Transmit+0x1f4>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d102      	bne.n	8002066 <HAL_SPI_Transmit+0x1fa>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	77fb      	strb	r3, [r7, #31]
          goto error;
 800206a:	e026      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1cd      	bne.n	8002012 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fba4 	bl	80027c8 <SPI_EndRxTxTransaction>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	77fb      	strb	r3, [r7, #31]
 80020b6:	e000      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80020b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020f0:	d112      	bne.n	8002118 <HAL_SPI_Receive+0x44>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10e      	bne.n	8002118 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2204      	movs	r2, #4
 80020fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f8e9 	bl	80022e6 <HAL_SPI_TransmitReceive>
 8002114:	4603      	mov	r3, r0
 8002116:	e0e2      	b.n	80022de <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_SPI_Receive+0x52>
 8002122:	2302      	movs	r3, #2
 8002124:	e0db      	b.n	80022de <HAL_SPI_Receive+0x20a>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800212e:	f7fe fe47 	bl	8000dc0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d002      	beq.n	8002146 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002144:	e0c2      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_SPI_Receive+0x7e>
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002156:	e0b9      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2204      	movs	r2, #4
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219e:	d107      	bne.n	80021b0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d007      	beq.n	80021ce <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d162      	bne.n	800229c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021d6:	e02e      	b.n	8002236 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d115      	bne.n	8002212 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f103 020c 	add.w	r2, r3, #12
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002210:	e011      	b.n	8002236 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002212:	f7fe fdd5 	bl	8000dc0 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d803      	bhi.n	800222a <HAL_SPI_Receive+0x156>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d102      	bne.n	8002230 <HAL_SPI_Receive+0x15c>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002234:	e04a      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1cb      	bne.n	80021d8 <HAL_SPI_Receive+0x104>
 8002240:	e031      	b.n	80022a6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d113      	bne.n	8002278 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	b292      	uxth	r2, r2
 800225c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	1c9a      	adds	r2, r3, #2
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002276:	e011      	b.n	800229c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002278:	f7fe fda2 	bl	8000dc0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d803      	bhi.n	8002290 <HAL_SPI_Receive+0x1bc>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Receive+0x1c2>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	75fb      	strb	r3, [r7, #23]
          goto error;
 800229a:	e017      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1cd      	bne.n	8002242 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fa27 	bl	80026fe <SPI_EndRxTransaction>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	75fb      	strb	r3, [r7, #23]
 80022c8:	e000      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
  }

error :
 80022ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08c      	sub	sp, #48	; 0x30
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_SPI_TransmitReceive+0x26>
 8002308:	2302      	movs	r3, #2
 800230a:	e18a      	b.n	8002622 <HAL_SPI_TransmitReceive+0x33c>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002314:	f7fe fd54 	bl	8000dc0 <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800232e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002332:	2b01      	cmp	r3, #1
 8002334:	d00f      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x70>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800233c:	d107      	bne.n	800234e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <HAL_SPI_TransmitReceive+0x68>
 8002346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800234a:	2b04      	cmp	r3, #4
 800234c:	d003      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002354:	e15b      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x82>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x82>
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800236e:	e14e      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b04      	cmp	r3, #4
 800237a:	d003      	beq.n	8002384 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2205      	movs	r2, #5
 8002380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	887a      	ldrh	r2, [r7, #2]
 800239a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d007      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e0:	d178      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x10a>
 80023ea:	8b7b      	ldrh	r3, [r7, #26]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d166      	bne.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002414:	e053      	b.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d11b      	bne.n	800245c <HAL_SPI_TransmitReceive+0x176>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_SPI_TransmitReceive+0x176>
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d113      	bne.n	800245c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	1c9a      	adds	r2, r3, #2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d119      	bne.n	800249e <HAL_SPI_TransmitReceive+0x1b8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d014      	beq.n	800249e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	b292      	uxth	r2, r2
 8002480:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	1c9a      	adds	r2, r3, #2
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800249a:	2301      	movs	r3, #1
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800249e:	f7fe fc8f 	bl	8000dc0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d807      	bhi.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d003      	beq.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024bc:	e0a7      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1a6      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x130>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1a1      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x130>
 80024d2:	e07c      	b.n	80025ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x1fc>
 80024dc:	8b7b      	ldrh	r3, [r7, #26]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d16b      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002508:	e057      	b.n	80025ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b02      	cmp	r3, #2
 8002516:	d11c      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x26c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d017      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x26c>
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d114      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d119      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x2ae>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d014      	beq.n	8002594 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002594:	f7fe fc14 	bl	8000dc0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d803      	bhi.n	80025ac <HAL_SPI_TransmitReceive+0x2c6>
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d102      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x2cc>
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025b8:	e029      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1a2      	bne.n	800250a <HAL_SPI_TransmitReceive+0x224>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d19d      	bne.n	800250a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f8f8 	bl	80027c8 <SPI_EndRxTxTransaction>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025ea:	e010      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	e000      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800260c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800261e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002622:	4618      	mov	r0, r3
 8002624:	3730      	adds	r7, #48	; 0x30
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263a:	e04c      	b.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d048      	beq.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002644:	f7fe fbbc 	bl	8000dc0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d902      	bls.n	800265a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13d      	bne.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002672:	d111      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	d004      	beq.n	8002688 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d107      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a0:	d10f      	bne.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e00f      	b.n	80026f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1a3      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af02      	add	r7, sp, #8
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002712:	d111      	bne.n	8002738 <SPI_EndRxTransaction+0x3a>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271c:	d004      	beq.n	8002728 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d107      	bne.n	8002738 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002740:	d12a      	bne.n	8002798 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d012      	beq.n	8002772 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff ff67 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d02d      	beq.n	80027be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e026      	b.n	80027c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	2101      	movs	r1, #1
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ff54 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01a      	beq.n	80027be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e013      	b.n	80027c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	2101      	movs	r1, #1
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff ff41 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e000      	b.n	80027c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <SPI_EndRxTxTransaction+0x7c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <SPI_EndRxTxTransaction+0x80>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0d5b      	lsrs	r3, r3, #21
 80027e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f2:	d112      	bne.n	800281a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff ff13 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00f      	b.n	800283a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3b01      	subs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d0f2      	beq.n	800281a <SPI_EndRxTxTransaction+0x52>
 8002834:	e000      	b.n	8002838 <SPI_EndRxTxTransaction+0x70>
        break;
 8002836:	bf00      	nop
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000
 8002848:	165e9f81 	.word	0x165e9f81

0800284c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e03f      	b.n	80028de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe f914 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f829 	bl	80028e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002928:	f023 030c 	bic.w	r3, r3, #12
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	430b      	orrs	r3, r1
 8002934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002954:	f040 80e4 	bne.w	8002b20 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4aab      	ldr	r2, [pc, #684]	; (8002c0c <UART_SetConfig+0x324>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <UART_SetConfig+0x84>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4aaa      	ldr	r2, [pc, #680]	; (8002c10 <UART_SetConfig+0x328>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d16c      	bne.n	8002a46 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800296c:	f7fe fe0c 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002970:	4602      	mov	r2, r0
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	441a      	add	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4aa3      	ldr	r2, [pc, #652]	; (8002c14 <UART_SetConfig+0x32c>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	011c      	lsls	r4, r3, #4
 8002990:	f7fe fdfa 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002994:	4602      	mov	r2, r0
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009a      	lsls	r2, r3, #2
 800299e:	441a      	add	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80029aa:	f7fe fded 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009a      	lsls	r2, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	4a93      	ldr	r2, [pc, #588]	; (8002c14 <UART_SetConfig+0x32c>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2264      	movs	r2, #100	; 0x64
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	1aeb      	subs	r3, r5, r3
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3332      	adds	r3, #50	; 0x32
 80029d8:	4a8e      	ldr	r2, [pc, #568]	; (8002c14 <UART_SetConfig+0x32c>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029e6:	441c      	add	r4, r3
 80029e8:	f7fe fdce 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	441a      	add	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a02:	f7fe fdc1 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009a      	lsls	r2, r3, #2
 8002a10:	441a      	add	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	4a7d      	ldr	r2, [pc, #500]	; (8002c14 <UART_SetConfig+0x32c>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	2264      	movs	r2, #100	; 0x64
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	1aeb      	subs	r3, r5, r3
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	3332      	adds	r3, #50	; 0x32
 8002a30:	4a78      	ldr	r2, [pc, #480]	; (8002c14 <UART_SetConfig+0x32c>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	f003 0207 	and.w	r2, r3, #7
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4422      	add	r2, r4
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e154      	b.n	8002cf0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a46:	f7fe fd8b 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <UART_SetConfig+0x32c>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	011c      	lsls	r4, r3, #4
 8002a6a:	f7fe fd79 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a84:	f7fe fd6c 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009a      	lsls	r2, r3, #2
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4a5d      	ldr	r2, [pc, #372]	; (8002c14 <UART_SetConfig+0x32c>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	2264      	movs	r2, #100	; 0x64
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	1aeb      	subs	r3, r5, r3
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	3332      	adds	r3, #50	; 0x32
 8002ab2:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <UART_SetConfig+0x32c>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ac0:	441c      	add	r4, r3
 8002ac2:	f7fe fd4d 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002adc:	f7fe fd40 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4a47      	ldr	r2, [pc, #284]	; (8002c14 <UART_SetConfig+0x32c>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	2264      	movs	r2, #100	; 0x64
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	1aeb      	subs	r3, r5, r3
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	3332      	adds	r3, #50	; 0x32
 8002b0a:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <UART_SetConfig+0x32c>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	f003 0207 	and.w	r2, r3, #7
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4422      	add	r2, r4
 8002b1c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002b1e:	e0e7      	b.n	8002cf0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a39      	ldr	r2, [pc, #228]	; (8002c0c <UART_SetConfig+0x324>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <UART_SetConfig+0x24c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <UART_SetConfig+0x328>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d171      	bne.n	8002c18 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b34:	f7fe fd28 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	4a31      	ldr	r2, [pc, #196]	; (8002c14 <UART_SetConfig+0x32c>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	011c      	lsls	r4, r3, #4
 8002b58:	f7fe fd16 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009a      	lsls	r2, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b72:	f7fe fd09 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <UART_SetConfig+0x32c>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2264      	movs	r2, #100	; 0x64
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	1aeb      	subs	r3, r5, r3
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <UART_SetConfig+0x32c>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bac:	441c      	add	r4, r3
 8002bae:	f7fe fceb 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	009a      	lsls	r2, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bc8:	f7fe fcde 	bl	8001588 <HAL_RCC_GetPCLK2Freq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <UART_SetConfig+0x32c>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	2264      	movs	r2, #100	; 0x64
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	1aeb      	subs	r3, r5, r3
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	3332      	adds	r3, #50	; 0x32
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <UART_SetConfig+0x32c>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	f003 020f 	and.w	r2, r3, #15
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4422      	add	r2, r4
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	e071      	b.n	8002cf0 <UART_SetConfig+0x408>
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	40011400 	.word	0x40011400
 8002c14:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c18:	f7fe fca2 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009a      	lsls	r2, r3, #2
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <UART_SetConfig+0x410>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	011c      	lsls	r4, r3, #4
 8002c3c:	f7fe fc90 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009a      	lsls	r2, r3, #2
 8002c4a:	441a      	add	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c56:	f7fe fc83 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009a      	lsls	r2, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <UART_SetConfig+0x410>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2264      	movs	r2, #100	; 0x64
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	1aeb      	subs	r3, r5, r3
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	3332      	adds	r3, #50	; 0x32
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <UART_SetConfig+0x410>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c90:	441c      	add	r4, r3
 8002c92:	f7fe fc65 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cac:	f7fe fc58 	bl	8001560 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009a      	lsls	r2, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <UART_SetConfig+0x410>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	2264      	movs	r2, #100	; 0x64
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	1aeb      	subs	r3, r5, r3
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	3332      	adds	r3, #50	; 0x32
 8002cda:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <UART_SetConfig+0x410>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4422      	add	r2, r4
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	e7ff      	b.n	8002cf0 <UART_SetConfig+0x408>
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf8:	51eb851f 	.word	0x51eb851f

08002cfc <__errno>:
 8002cfc:	4b01      	ldr	r3, [pc, #4]	; (8002d04 <__errno+0x8>)
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	2000000c 	.word	0x2000000c

08002d08 <__libc_init_array>:
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	4e0d      	ldr	r6, [pc, #52]	; (8002d40 <__libc_init_array+0x38>)
 8002d0c:	4c0d      	ldr	r4, [pc, #52]	; (8002d44 <__libc_init_array+0x3c>)
 8002d0e:	1ba4      	subs	r4, r4, r6
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	2500      	movs	r5, #0
 8002d14:	42a5      	cmp	r5, r4
 8002d16:	d109      	bne.n	8002d2c <__libc_init_array+0x24>
 8002d18:	4e0b      	ldr	r6, [pc, #44]	; (8002d48 <__libc_init_array+0x40>)
 8002d1a:	4c0c      	ldr	r4, [pc, #48]	; (8002d4c <__libc_init_array+0x44>)
 8002d1c:	f001 f856 	bl	8003dcc <_init>
 8002d20:	1ba4      	subs	r4, r4, r6
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	2500      	movs	r5, #0
 8002d26:	42a5      	cmp	r5, r4
 8002d28:	d105      	bne.n	8002d36 <__libc_init_array+0x2e>
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d30:	4798      	blx	r3
 8002d32:	3501      	adds	r5, #1
 8002d34:	e7ee      	b.n	8002d14 <__libc_init_array+0xc>
 8002d36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3a:	4798      	blx	r3
 8002d3c:	3501      	adds	r5, #1
 8002d3e:	e7f2      	b.n	8002d26 <__libc_init_array+0x1e>
 8002d40:	08003ec8 	.word	0x08003ec8
 8002d44:	08003ec8 	.word	0x08003ec8
 8002d48:	08003ec8 	.word	0x08003ec8
 8002d4c:	08003ecc 	.word	0x08003ecc

08002d50 <memset>:
 8002d50:	4402      	add	r2, r0
 8002d52:	4603      	mov	r3, r0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d100      	bne.n	8002d5a <memset+0xa>
 8002d58:	4770      	bx	lr
 8002d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5e:	e7f9      	b.n	8002d54 <memset+0x4>

08002d60 <iprintf>:
 8002d60:	b40f      	push	{r0, r1, r2, r3}
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <iprintf+0x2c>)
 8002d64:	b513      	push	{r0, r1, r4, lr}
 8002d66:	681c      	ldr	r4, [r3, #0]
 8002d68:	b124      	cbz	r4, 8002d74 <iprintf+0x14>
 8002d6a:	69a3      	ldr	r3, [r4, #24]
 8002d6c:	b913      	cbnz	r3, 8002d74 <iprintf+0x14>
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f000 f84e 	bl	8002e10 <__sinit>
 8002d74:	ab05      	add	r3, sp, #20
 8002d76:	9a04      	ldr	r2, [sp, #16]
 8002d78:	68a1      	ldr	r1, [r4, #8]
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f000 f955 	bl	800302c <_vfiprintf_r>
 8002d82:	b002      	add	sp, #8
 8002d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d88:	b004      	add	sp, #16
 8002d8a:	4770      	bx	lr
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <std>:
 8002d90:	2300      	movs	r3, #0
 8002d92:	b510      	push	{r4, lr}
 8002d94:	4604      	mov	r4, r0
 8002d96:	e9c0 3300 	strd	r3, r3, [r0]
 8002d9a:	6083      	str	r3, [r0, #8]
 8002d9c:	8181      	strh	r1, [r0, #12]
 8002d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8002da0:	81c2      	strh	r2, [r0, #14]
 8002da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002da6:	6183      	str	r3, [r0, #24]
 8002da8:	4619      	mov	r1, r3
 8002daa:	2208      	movs	r2, #8
 8002dac:	305c      	adds	r0, #92	; 0x5c
 8002dae:	f7ff ffcf 	bl	8002d50 <memset>
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <std+0x38>)
 8002db4:	6263      	str	r3, [r4, #36]	; 0x24
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <std+0x3c>)
 8002db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <std+0x40>)
 8002dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <std+0x44>)
 8002dc0:	6224      	str	r4, [r4, #32]
 8002dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08003589 	.word	0x08003589
 8002dcc:	080035ab 	.word	0x080035ab
 8002dd0:	080035e3 	.word	0x080035e3
 8002dd4:	08003607 	.word	0x08003607

08002dd8 <_cleanup_r>:
 8002dd8:	4901      	ldr	r1, [pc, #4]	; (8002de0 <_cleanup_r+0x8>)
 8002dda:	f000 b885 	b.w	8002ee8 <_fwalk_reent>
 8002dde:	bf00      	nop
 8002de0:	080038e1 	.word	0x080038e1

08002de4 <__sfmoreglue>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	1e4a      	subs	r2, r1, #1
 8002de8:	2568      	movs	r5, #104	; 0x68
 8002dea:	4355      	muls	r5, r2
 8002dec:	460e      	mov	r6, r1
 8002dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002df2:	f000 f897 	bl	8002f24 <_malloc_r>
 8002df6:	4604      	mov	r4, r0
 8002df8:	b140      	cbz	r0, 8002e0c <__sfmoreglue+0x28>
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8002e00:	300c      	adds	r0, #12
 8002e02:	60a0      	str	r0, [r4, #8]
 8002e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e08:	f7ff ffa2 	bl	8002d50 <memset>
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}

08002e10 <__sinit>:
 8002e10:	6983      	ldr	r3, [r0, #24]
 8002e12:	b510      	push	{r4, lr}
 8002e14:	4604      	mov	r4, r0
 8002e16:	bb33      	cbnz	r3, 8002e66 <__sinit+0x56>
 8002e18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002e1c:	6503      	str	r3, [r0, #80]	; 0x50
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <__sinit+0x58>)
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <__sinit+0x5c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6282      	str	r2, [r0, #40]	; 0x28
 8002e26:	4298      	cmp	r0, r3
 8002e28:	bf04      	itt	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	6183      	streq	r3, [r0, #24]
 8002e2e:	f000 f81f 	bl	8002e70 <__sfp>
 8002e32:	6060      	str	r0, [r4, #4]
 8002e34:	4620      	mov	r0, r4
 8002e36:	f000 f81b 	bl	8002e70 <__sfp>
 8002e3a:	60a0      	str	r0, [r4, #8]
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f000 f817 	bl	8002e70 <__sfp>
 8002e42:	2200      	movs	r2, #0
 8002e44:	60e0      	str	r0, [r4, #12]
 8002e46:	2104      	movs	r1, #4
 8002e48:	6860      	ldr	r0, [r4, #4]
 8002e4a:	f7ff ffa1 	bl	8002d90 <std>
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2109      	movs	r1, #9
 8002e52:	68a0      	ldr	r0, [r4, #8]
 8002e54:	f7ff ff9c 	bl	8002d90 <std>
 8002e58:	2202      	movs	r2, #2
 8002e5a:	2112      	movs	r1, #18
 8002e5c:	68e0      	ldr	r0, [r4, #12]
 8002e5e:	f7ff ff97 	bl	8002d90 <std>
 8002e62:	2301      	movs	r3, #1
 8002e64:	61a3      	str	r3, [r4, #24]
 8002e66:	bd10      	pop	{r4, pc}
 8002e68:	08003e28 	.word	0x08003e28
 8002e6c:	08002dd9 	.word	0x08002dd9

08002e70 <__sfp>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <__sfp+0x70>)
 8002e74:	681e      	ldr	r6, [r3, #0]
 8002e76:	69b3      	ldr	r3, [r6, #24]
 8002e78:	4607      	mov	r7, r0
 8002e7a:	b913      	cbnz	r3, 8002e82 <__sfp+0x12>
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f7ff ffc7 	bl	8002e10 <__sinit>
 8002e82:	3648      	adds	r6, #72	; 0x48
 8002e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	d503      	bpl.n	8002e94 <__sfp+0x24>
 8002e8c:	6833      	ldr	r3, [r6, #0]
 8002e8e:	b133      	cbz	r3, 8002e9e <__sfp+0x2e>
 8002e90:	6836      	ldr	r6, [r6, #0]
 8002e92:	e7f7      	b.n	8002e84 <__sfp+0x14>
 8002e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e98:	b16d      	cbz	r5, 8002eb6 <__sfp+0x46>
 8002e9a:	3468      	adds	r4, #104	; 0x68
 8002e9c:	e7f4      	b.n	8002e88 <__sfp+0x18>
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	f7ff ff9f 	bl	8002de4 <__sfmoreglue>
 8002ea6:	6030      	str	r0, [r6, #0]
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d1f1      	bne.n	8002e90 <__sfp+0x20>
 8002eac:	230c      	movs	r3, #12
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <__sfp+0x74>)
 8002eb8:	6665      	str	r5, [r4, #100]	; 0x64
 8002eba:	e9c4 5500 	strd	r5, r5, [r4]
 8002ebe:	60a5      	str	r5, [r4, #8]
 8002ec0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002ec4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ed0:	f7ff ff3e 	bl	8002d50 <memset>
 8002ed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002edc:	e7e9      	b.n	8002eb2 <__sfp+0x42>
 8002ede:	bf00      	nop
 8002ee0:	08003e28 	.word	0x08003e28
 8002ee4:	ffff0001 	.word	0xffff0001

08002ee8 <_fwalk_reent>:
 8002ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eec:	4680      	mov	r8, r0
 8002eee:	4689      	mov	r9, r1
 8002ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ef4:	2600      	movs	r6, #0
 8002ef6:	b914      	cbnz	r4, 8002efe <_fwalk_reent+0x16>
 8002ef8:	4630      	mov	r0, r6
 8002efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002efe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002f02:	3f01      	subs	r7, #1
 8002f04:	d501      	bpl.n	8002f0a <_fwalk_reent+0x22>
 8002f06:	6824      	ldr	r4, [r4, #0]
 8002f08:	e7f5      	b.n	8002ef6 <_fwalk_reent+0xe>
 8002f0a:	89ab      	ldrh	r3, [r5, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d907      	bls.n	8002f20 <_fwalk_reent+0x38>
 8002f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f14:	3301      	adds	r3, #1
 8002f16:	d003      	beq.n	8002f20 <_fwalk_reent+0x38>
 8002f18:	4629      	mov	r1, r5
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	47c8      	blx	r9
 8002f1e:	4306      	orrs	r6, r0
 8002f20:	3568      	adds	r5, #104	; 0x68
 8002f22:	e7ee      	b.n	8002f02 <_fwalk_reent+0x1a>

08002f24 <_malloc_r>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	1ccd      	adds	r5, r1, #3
 8002f28:	f025 0503 	bic.w	r5, r5, #3
 8002f2c:	3508      	adds	r5, #8
 8002f2e:	2d0c      	cmp	r5, #12
 8002f30:	bf38      	it	cc
 8002f32:	250c      	movcc	r5, #12
 8002f34:	2d00      	cmp	r5, #0
 8002f36:	4606      	mov	r6, r0
 8002f38:	db01      	blt.n	8002f3e <_malloc_r+0x1a>
 8002f3a:	42a9      	cmp	r1, r5
 8002f3c:	d903      	bls.n	8002f46 <_malloc_r+0x22>
 8002f3e:	230c      	movs	r3, #12
 8002f40:	6033      	str	r3, [r6, #0]
 8002f42:	2000      	movs	r0, #0
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
 8002f46:	f000 fd6b 	bl	8003a20 <__malloc_lock>
 8002f4a:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <_malloc_r+0xac>)
 8002f4c:	6814      	ldr	r4, [r2, #0]
 8002f4e:	4621      	mov	r1, r4
 8002f50:	b991      	cbnz	r1, 8002f78 <_malloc_r+0x54>
 8002f52:	4c20      	ldr	r4, [pc, #128]	; (8002fd4 <_malloc_r+0xb0>)
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	b91b      	cbnz	r3, 8002f60 <_malloc_r+0x3c>
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f000 fb05 	bl	8003568 <_sbrk_r>
 8002f5e:	6020      	str	r0, [r4, #0]
 8002f60:	4629      	mov	r1, r5
 8002f62:	4630      	mov	r0, r6
 8002f64:	f000 fb00 	bl	8003568 <_sbrk_r>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	d124      	bne.n	8002fb6 <_malloc_r+0x92>
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	6033      	str	r3, [r6, #0]
 8002f70:	4630      	mov	r0, r6
 8002f72:	f000 fd56 	bl	8003a22 <__malloc_unlock>
 8002f76:	e7e4      	b.n	8002f42 <_malloc_r+0x1e>
 8002f78:	680b      	ldr	r3, [r1, #0]
 8002f7a:	1b5b      	subs	r3, r3, r5
 8002f7c:	d418      	bmi.n	8002fb0 <_malloc_r+0x8c>
 8002f7e:	2b0b      	cmp	r3, #11
 8002f80:	d90f      	bls.n	8002fa2 <_malloc_r+0x7e>
 8002f82:	600b      	str	r3, [r1, #0]
 8002f84:	50cd      	str	r5, [r1, r3]
 8002f86:	18cc      	adds	r4, r1, r3
 8002f88:	4630      	mov	r0, r6
 8002f8a:	f000 fd4a 	bl	8003a22 <__malloc_unlock>
 8002f8e:	f104 000b 	add.w	r0, r4, #11
 8002f92:	1d23      	adds	r3, r4, #4
 8002f94:	f020 0007 	bic.w	r0, r0, #7
 8002f98:	1ac3      	subs	r3, r0, r3
 8002f9a:	d0d3      	beq.n	8002f44 <_malloc_r+0x20>
 8002f9c:	425a      	negs	r2, r3
 8002f9e:	50e2      	str	r2, [r4, r3]
 8002fa0:	e7d0      	b.n	8002f44 <_malloc_r+0x20>
 8002fa2:	428c      	cmp	r4, r1
 8002fa4:	684b      	ldr	r3, [r1, #4]
 8002fa6:	bf16      	itet	ne
 8002fa8:	6063      	strne	r3, [r4, #4]
 8002faa:	6013      	streq	r3, [r2, #0]
 8002fac:	460c      	movne	r4, r1
 8002fae:	e7eb      	b.n	8002f88 <_malloc_r+0x64>
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	6849      	ldr	r1, [r1, #4]
 8002fb4:	e7cc      	b.n	8002f50 <_malloc_r+0x2c>
 8002fb6:	1cc4      	adds	r4, r0, #3
 8002fb8:	f024 0403 	bic.w	r4, r4, #3
 8002fbc:	42a0      	cmp	r0, r4
 8002fbe:	d005      	beq.n	8002fcc <_malloc_r+0xa8>
 8002fc0:	1a21      	subs	r1, r4, r0
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f000 fad0 	bl	8003568 <_sbrk_r>
 8002fc8:	3001      	adds	r0, #1
 8002fca:	d0cf      	beq.n	8002f6c <_malloc_r+0x48>
 8002fcc:	6025      	str	r5, [r4, #0]
 8002fce:	e7db      	b.n	8002f88 <_malloc_r+0x64>
 8002fd0:	20000094 	.word	0x20000094
 8002fd4:	20000098 	.word	0x20000098

08002fd8 <__sfputc_r>:
 8002fd8:	6893      	ldr	r3, [r2, #8]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	b410      	push	{r4}
 8002fe0:	6093      	str	r3, [r2, #8]
 8002fe2:	da08      	bge.n	8002ff6 <__sfputc_r+0x1e>
 8002fe4:	6994      	ldr	r4, [r2, #24]
 8002fe6:	42a3      	cmp	r3, r4
 8002fe8:	db01      	blt.n	8002fee <__sfputc_r+0x16>
 8002fea:	290a      	cmp	r1, #10
 8002fec:	d103      	bne.n	8002ff6 <__sfputc_r+0x1e>
 8002fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ff2:	f000 bb0d 	b.w	8003610 <__swbuf_r>
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	1c58      	adds	r0, r3, #1
 8002ffa:	6010      	str	r0, [r2, #0]
 8002ffc:	7019      	strb	r1, [r3, #0]
 8002ffe:	4608      	mov	r0, r1
 8003000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003004:	4770      	bx	lr

08003006 <__sfputs_r>:
 8003006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003008:	4606      	mov	r6, r0
 800300a:	460f      	mov	r7, r1
 800300c:	4614      	mov	r4, r2
 800300e:	18d5      	adds	r5, r2, r3
 8003010:	42ac      	cmp	r4, r5
 8003012:	d101      	bne.n	8003018 <__sfputs_r+0x12>
 8003014:	2000      	movs	r0, #0
 8003016:	e007      	b.n	8003028 <__sfputs_r+0x22>
 8003018:	463a      	mov	r2, r7
 800301a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800301e:	4630      	mov	r0, r6
 8003020:	f7ff ffda 	bl	8002fd8 <__sfputc_r>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d1f3      	bne.n	8003010 <__sfputs_r+0xa>
 8003028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800302c <_vfiprintf_r>:
 800302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003030:	460c      	mov	r4, r1
 8003032:	b09d      	sub	sp, #116	; 0x74
 8003034:	4617      	mov	r7, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4606      	mov	r6, r0
 800303a:	b118      	cbz	r0, 8003044 <_vfiprintf_r+0x18>
 800303c:	6983      	ldr	r3, [r0, #24]
 800303e:	b90b      	cbnz	r3, 8003044 <_vfiprintf_r+0x18>
 8003040:	f7ff fee6 	bl	8002e10 <__sinit>
 8003044:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <_vfiprintf_r+0x20c>)
 8003046:	429c      	cmp	r4, r3
 8003048:	d158      	bne.n	80030fc <_vfiprintf_r+0xd0>
 800304a:	6874      	ldr	r4, [r6, #4]
 800304c:	89a3      	ldrh	r3, [r4, #12]
 800304e:	0718      	lsls	r0, r3, #28
 8003050:	d55e      	bpl.n	8003110 <_vfiprintf_r+0xe4>
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05b      	beq.n	8003110 <_vfiprintf_r+0xe4>
 8003058:	2300      	movs	r3, #0
 800305a:	9309      	str	r3, [sp, #36]	; 0x24
 800305c:	2320      	movs	r3, #32
 800305e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003062:	2330      	movs	r3, #48	; 0x30
 8003064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003068:	9503      	str	r5, [sp, #12]
 800306a:	f04f 0b01 	mov.w	fp, #1
 800306e:	46b8      	mov	r8, r7
 8003070:	4645      	mov	r5, r8
 8003072:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003076:	b10b      	cbz	r3, 800307c <_vfiprintf_r+0x50>
 8003078:	2b25      	cmp	r3, #37	; 0x25
 800307a:	d154      	bne.n	8003126 <_vfiprintf_r+0xfa>
 800307c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003080:	d00b      	beq.n	800309a <_vfiprintf_r+0x6e>
 8003082:	4653      	mov	r3, sl
 8003084:	463a      	mov	r2, r7
 8003086:	4621      	mov	r1, r4
 8003088:	4630      	mov	r0, r6
 800308a:	f7ff ffbc 	bl	8003006 <__sfputs_r>
 800308e:	3001      	adds	r0, #1
 8003090:	f000 80c2 	beq.w	8003218 <_vfiprintf_r+0x1ec>
 8003094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003096:	4453      	add	r3, sl
 8003098:	9309      	str	r3, [sp, #36]	; 0x24
 800309a:	f898 3000 	ldrb.w	r3, [r8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80ba 	beq.w	8003218 <_vfiprintf_r+0x1ec>
 80030a4:	2300      	movs	r3, #0
 80030a6:	f04f 32ff 	mov.w	r2, #4294967295
 80030aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ae:	9304      	str	r3, [sp, #16]
 80030b0:	9307      	str	r3, [sp, #28]
 80030b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030b6:	931a      	str	r3, [sp, #104]	; 0x68
 80030b8:	46a8      	mov	r8, r5
 80030ba:	2205      	movs	r2, #5
 80030bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80030c0:	485e      	ldr	r0, [pc, #376]	; (800323c <_vfiprintf_r+0x210>)
 80030c2:	f7fd f8a5 	bl	8000210 <memchr>
 80030c6:	9b04      	ldr	r3, [sp, #16]
 80030c8:	bb78      	cbnz	r0, 800312a <_vfiprintf_r+0xfe>
 80030ca:	06d9      	lsls	r1, r3, #27
 80030cc:	bf44      	itt	mi
 80030ce:	2220      	movmi	r2, #32
 80030d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030d4:	071a      	lsls	r2, r3, #28
 80030d6:	bf44      	itt	mi
 80030d8:	222b      	movmi	r2, #43	; 0x2b
 80030da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030de:	782a      	ldrb	r2, [r5, #0]
 80030e0:	2a2a      	cmp	r2, #42	; 0x2a
 80030e2:	d02a      	beq.n	800313a <_vfiprintf_r+0x10e>
 80030e4:	9a07      	ldr	r2, [sp, #28]
 80030e6:	46a8      	mov	r8, r5
 80030e8:	2000      	movs	r0, #0
 80030ea:	250a      	movs	r5, #10
 80030ec:	4641      	mov	r1, r8
 80030ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030f2:	3b30      	subs	r3, #48	; 0x30
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	d969      	bls.n	80031cc <_vfiprintf_r+0x1a0>
 80030f8:	b360      	cbz	r0, 8003154 <_vfiprintf_r+0x128>
 80030fa:	e024      	b.n	8003146 <_vfiprintf_r+0x11a>
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <_vfiprintf_r+0x214>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d101      	bne.n	8003106 <_vfiprintf_r+0xda>
 8003102:	68b4      	ldr	r4, [r6, #8]
 8003104:	e7a2      	b.n	800304c <_vfiprintf_r+0x20>
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <_vfiprintf_r+0x218>)
 8003108:	429c      	cmp	r4, r3
 800310a:	bf08      	it	eq
 800310c:	68f4      	ldreq	r4, [r6, #12]
 800310e:	e79d      	b.n	800304c <_vfiprintf_r+0x20>
 8003110:	4621      	mov	r1, r4
 8003112:	4630      	mov	r0, r6
 8003114:	f000 fae0 	bl	80036d8 <__swsetup_r>
 8003118:	2800      	cmp	r0, #0
 800311a:	d09d      	beq.n	8003058 <_vfiprintf_r+0x2c>
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	b01d      	add	sp, #116	; 0x74
 8003122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003126:	46a8      	mov	r8, r5
 8003128:	e7a2      	b.n	8003070 <_vfiprintf_r+0x44>
 800312a:	4a44      	ldr	r2, [pc, #272]	; (800323c <_vfiprintf_r+0x210>)
 800312c:	1a80      	subs	r0, r0, r2
 800312e:	fa0b f000 	lsl.w	r0, fp, r0
 8003132:	4318      	orrs	r0, r3
 8003134:	9004      	str	r0, [sp, #16]
 8003136:	4645      	mov	r5, r8
 8003138:	e7be      	b.n	80030b8 <_vfiprintf_r+0x8c>
 800313a:	9a03      	ldr	r2, [sp, #12]
 800313c:	1d11      	adds	r1, r2, #4
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	9103      	str	r1, [sp, #12]
 8003142:	2a00      	cmp	r2, #0
 8003144:	db01      	blt.n	800314a <_vfiprintf_r+0x11e>
 8003146:	9207      	str	r2, [sp, #28]
 8003148:	e004      	b.n	8003154 <_vfiprintf_r+0x128>
 800314a:	4252      	negs	r2, r2
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	9207      	str	r2, [sp, #28]
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	f898 3000 	ldrb.w	r3, [r8]
 8003158:	2b2e      	cmp	r3, #46	; 0x2e
 800315a:	d10e      	bne.n	800317a <_vfiprintf_r+0x14e>
 800315c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003160:	2b2a      	cmp	r3, #42	; 0x2a
 8003162:	d138      	bne.n	80031d6 <_vfiprintf_r+0x1aa>
 8003164:	9b03      	ldr	r3, [sp, #12]
 8003166:	1d1a      	adds	r2, r3, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	9203      	str	r2, [sp, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	bfb8      	it	lt
 8003170:	f04f 33ff 	movlt.w	r3, #4294967295
 8003174:	f108 0802 	add.w	r8, r8, #2
 8003178:	9305      	str	r3, [sp, #20]
 800317a:	4d33      	ldr	r5, [pc, #204]	; (8003248 <_vfiprintf_r+0x21c>)
 800317c:	f898 1000 	ldrb.w	r1, [r8]
 8003180:	2203      	movs	r2, #3
 8003182:	4628      	mov	r0, r5
 8003184:	f7fd f844 	bl	8000210 <memchr>
 8003188:	b140      	cbz	r0, 800319c <_vfiprintf_r+0x170>
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	1b40      	subs	r0, r0, r5
 800318e:	fa03 f000 	lsl.w	r0, r3, r0
 8003192:	9b04      	ldr	r3, [sp, #16]
 8003194:	4303      	orrs	r3, r0
 8003196:	f108 0801 	add.w	r8, r8, #1
 800319a:	9304      	str	r3, [sp, #16]
 800319c:	f898 1000 	ldrb.w	r1, [r8]
 80031a0:	482a      	ldr	r0, [pc, #168]	; (800324c <_vfiprintf_r+0x220>)
 80031a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031a6:	2206      	movs	r2, #6
 80031a8:	f108 0701 	add.w	r7, r8, #1
 80031ac:	f7fd f830 	bl	8000210 <memchr>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d037      	beq.n	8003224 <_vfiprintf_r+0x1f8>
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <_vfiprintf_r+0x224>)
 80031b6:	bb1b      	cbnz	r3, 8003200 <_vfiprintf_r+0x1d4>
 80031b8:	9b03      	ldr	r3, [sp, #12]
 80031ba:	3307      	adds	r3, #7
 80031bc:	f023 0307 	bic.w	r3, r3, #7
 80031c0:	3308      	adds	r3, #8
 80031c2:	9303      	str	r3, [sp, #12]
 80031c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031c6:	444b      	add	r3, r9
 80031c8:	9309      	str	r3, [sp, #36]	; 0x24
 80031ca:	e750      	b.n	800306e <_vfiprintf_r+0x42>
 80031cc:	fb05 3202 	mla	r2, r5, r2, r3
 80031d0:	2001      	movs	r0, #1
 80031d2:	4688      	mov	r8, r1
 80031d4:	e78a      	b.n	80030ec <_vfiprintf_r+0xc0>
 80031d6:	2300      	movs	r3, #0
 80031d8:	f108 0801 	add.w	r8, r8, #1
 80031dc:	9305      	str	r3, [sp, #20]
 80031de:	4619      	mov	r1, r3
 80031e0:	250a      	movs	r5, #10
 80031e2:	4640      	mov	r0, r8
 80031e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031e8:	3a30      	subs	r2, #48	; 0x30
 80031ea:	2a09      	cmp	r2, #9
 80031ec:	d903      	bls.n	80031f6 <_vfiprintf_r+0x1ca>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0c3      	beq.n	800317a <_vfiprintf_r+0x14e>
 80031f2:	9105      	str	r1, [sp, #20]
 80031f4:	e7c1      	b.n	800317a <_vfiprintf_r+0x14e>
 80031f6:	fb05 2101 	mla	r1, r5, r1, r2
 80031fa:	2301      	movs	r3, #1
 80031fc:	4680      	mov	r8, r0
 80031fe:	e7f0      	b.n	80031e2 <_vfiprintf_r+0x1b6>
 8003200:	ab03      	add	r3, sp, #12
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4622      	mov	r2, r4
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <_vfiprintf_r+0x228>)
 8003208:	a904      	add	r1, sp, #16
 800320a:	4630      	mov	r0, r6
 800320c:	f3af 8000 	nop.w
 8003210:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003214:	4681      	mov	r9, r0
 8003216:	d1d5      	bne.n	80031c4 <_vfiprintf_r+0x198>
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	065b      	lsls	r3, r3, #25
 800321c:	f53f af7e 	bmi.w	800311c <_vfiprintf_r+0xf0>
 8003220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003222:	e77d      	b.n	8003120 <_vfiprintf_r+0xf4>
 8003224:	ab03      	add	r3, sp, #12
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	4622      	mov	r2, r4
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <_vfiprintf_r+0x228>)
 800322c:	a904      	add	r1, sp, #16
 800322e:	4630      	mov	r0, r6
 8003230:	f000 f888 	bl	8003344 <_printf_i>
 8003234:	e7ec      	b.n	8003210 <_vfiprintf_r+0x1e4>
 8003236:	bf00      	nop
 8003238:	08003e4c 	.word	0x08003e4c
 800323c:	08003e8c 	.word	0x08003e8c
 8003240:	08003e6c 	.word	0x08003e6c
 8003244:	08003e2c 	.word	0x08003e2c
 8003248:	08003e92 	.word	0x08003e92
 800324c:	08003e96 	.word	0x08003e96
 8003250:	00000000 	.word	0x00000000
 8003254:	08003007 	.word	0x08003007

08003258 <_printf_common>:
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	4691      	mov	r9, r2
 800325e:	461f      	mov	r7, r3
 8003260:	688a      	ldr	r2, [r1, #8]
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003268:	4293      	cmp	r3, r2
 800326a:	bfb8      	it	lt
 800326c:	4613      	movlt	r3, r2
 800326e:	f8c9 3000 	str.w	r3, [r9]
 8003272:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003276:	4606      	mov	r6, r0
 8003278:	460c      	mov	r4, r1
 800327a:	b112      	cbz	r2, 8003282 <_printf_common+0x2a>
 800327c:	3301      	adds	r3, #1
 800327e:	f8c9 3000 	str.w	r3, [r9]
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	0699      	lsls	r1, r3, #26
 8003286:	bf42      	ittt	mi
 8003288:	f8d9 3000 	ldrmi.w	r3, [r9]
 800328c:	3302      	addmi	r3, #2
 800328e:	f8c9 3000 	strmi.w	r3, [r9]
 8003292:	6825      	ldr	r5, [r4, #0]
 8003294:	f015 0506 	ands.w	r5, r5, #6
 8003298:	d107      	bne.n	80032aa <_printf_common+0x52>
 800329a:	f104 0a19 	add.w	sl, r4, #25
 800329e:	68e3      	ldr	r3, [r4, #12]
 80032a0:	f8d9 2000 	ldr.w	r2, [r9]
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	42ab      	cmp	r3, r5
 80032a8:	dc28      	bgt.n	80032fc <_printf_common+0xa4>
 80032aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	3300      	adds	r3, #0
 80032b2:	bf18      	it	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	0692      	lsls	r2, r2, #26
 80032b8:	d42d      	bmi.n	8003316 <_printf_common+0xbe>
 80032ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032be:	4639      	mov	r1, r7
 80032c0:	4630      	mov	r0, r6
 80032c2:	47c0      	blx	r8
 80032c4:	3001      	adds	r0, #1
 80032c6:	d020      	beq.n	800330a <_printf_common+0xb2>
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	68e5      	ldr	r5, [r4, #12]
 80032cc:	f8d9 2000 	ldr.w	r2, [r9]
 80032d0:	f003 0306 	and.w	r3, r3, #6
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	bf08      	it	eq
 80032d8:	1aad      	subeq	r5, r5, r2
 80032da:	68a3      	ldr	r3, [r4, #8]
 80032dc:	6922      	ldr	r2, [r4, #16]
 80032de:	bf0c      	ite	eq
 80032e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e4:	2500      	movne	r5, #0
 80032e6:	4293      	cmp	r3, r2
 80032e8:	bfc4      	itt	gt
 80032ea:	1a9b      	subgt	r3, r3, r2
 80032ec:	18ed      	addgt	r5, r5, r3
 80032ee:	f04f 0900 	mov.w	r9, #0
 80032f2:	341a      	adds	r4, #26
 80032f4:	454d      	cmp	r5, r9
 80032f6:	d11a      	bne.n	800332e <_printf_common+0xd6>
 80032f8:	2000      	movs	r0, #0
 80032fa:	e008      	b.n	800330e <_printf_common+0xb6>
 80032fc:	2301      	movs	r3, #1
 80032fe:	4652      	mov	r2, sl
 8003300:	4639      	mov	r1, r7
 8003302:	4630      	mov	r0, r6
 8003304:	47c0      	blx	r8
 8003306:	3001      	adds	r0, #1
 8003308:	d103      	bne.n	8003312 <_printf_common+0xba>
 800330a:	f04f 30ff 	mov.w	r0, #4294967295
 800330e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003312:	3501      	adds	r5, #1
 8003314:	e7c3      	b.n	800329e <_printf_common+0x46>
 8003316:	18e1      	adds	r1, r4, r3
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	2030      	movs	r0, #48	; 0x30
 800331c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003320:	4422      	add	r2, r4
 8003322:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800332a:	3302      	adds	r3, #2
 800332c:	e7c5      	b.n	80032ba <_printf_common+0x62>
 800332e:	2301      	movs	r3, #1
 8003330:	4622      	mov	r2, r4
 8003332:	4639      	mov	r1, r7
 8003334:	4630      	mov	r0, r6
 8003336:	47c0      	blx	r8
 8003338:	3001      	adds	r0, #1
 800333a:	d0e6      	beq.n	800330a <_printf_common+0xb2>
 800333c:	f109 0901 	add.w	r9, r9, #1
 8003340:	e7d8      	b.n	80032f4 <_printf_common+0x9c>
	...

08003344 <_printf_i>:
 8003344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003348:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800334c:	460c      	mov	r4, r1
 800334e:	7e09      	ldrb	r1, [r1, #24]
 8003350:	b085      	sub	sp, #20
 8003352:	296e      	cmp	r1, #110	; 0x6e
 8003354:	4617      	mov	r7, r2
 8003356:	4606      	mov	r6, r0
 8003358:	4698      	mov	r8, r3
 800335a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800335c:	f000 80b3 	beq.w	80034c6 <_printf_i+0x182>
 8003360:	d822      	bhi.n	80033a8 <_printf_i+0x64>
 8003362:	2963      	cmp	r1, #99	; 0x63
 8003364:	d036      	beq.n	80033d4 <_printf_i+0x90>
 8003366:	d80a      	bhi.n	800337e <_printf_i+0x3a>
 8003368:	2900      	cmp	r1, #0
 800336a:	f000 80b9 	beq.w	80034e0 <_printf_i+0x19c>
 800336e:	2958      	cmp	r1, #88	; 0x58
 8003370:	f000 8083 	beq.w	800347a <_printf_i+0x136>
 8003374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003378:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800337c:	e032      	b.n	80033e4 <_printf_i+0xa0>
 800337e:	2964      	cmp	r1, #100	; 0x64
 8003380:	d001      	beq.n	8003386 <_printf_i+0x42>
 8003382:	2969      	cmp	r1, #105	; 0x69
 8003384:	d1f6      	bne.n	8003374 <_printf_i+0x30>
 8003386:	6820      	ldr	r0, [r4, #0]
 8003388:	6813      	ldr	r3, [r2, #0]
 800338a:	0605      	lsls	r5, r0, #24
 800338c:	f103 0104 	add.w	r1, r3, #4
 8003390:	d52a      	bpl.n	80033e8 <_printf_i+0xa4>
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	da03      	bge.n	80033a2 <_printf_i+0x5e>
 800339a:	222d      	movs	r2, #45	; 0x2d
 800339c:	425b      	negs	r3, r3
 800339e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033a2:	486f      	ldr	r0, [pc, #444]	; (8003560 <_printf_i+0x21c>)
 80033a4:	220a      	movs	r2, #10
 80033a6:	e039      	b.n	800341c <_printf_i+0xd8>
 80033a8:	2973      	cmp	r1, #115	; 0x73
 80033aa:	f000 809d 	beq.w	80034e8 <_printf_i+0x1a4>
 80033ae:	d808      	bhi.n	80033c2 <_printf_i+0x7e>
 80033b0:	296f      	cmp	r1, #111	; 0x6f
 80033b2:	d020      	beq.n	80033f6 <_printf_i+0xb2>
 80033b4:	2970      	cmp	r1, #112	; 0x70
 80033b6:	d1dd      	bne.n	8003374 <_printf_i+0x30>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	f043 0320 	orr.w	r3, r3, #32
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	e003      	b.n	80033ca <_printf_i+0x86>
 80033c2:	2975      	cmp	r1, #117	; 0x75
 80033c4:	d017      	beq.n	80033f6 <_printf_i+0xb2>
 80033c6:	2978      	cmp	r1, #120	; 0x78
 80033c8:	d1d4      	bne.n	8003374 <_printf_i+0x30>
 80033ca:	2378      	movs	r3, #120	; 0x78
 80033cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033d0:	4864      	ldr	r0, [pc, #400]	; (8003564 <_printf_i+0x220>)
 80033d2:	e055      	b.n	8003480 <_printf_i+0x13c>
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	1d19      	adds	r1, r3, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6011      	str	r1, [r2, #0]
 80033dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e4:	2301      	movs	r3, #1
 80033e6:	e08c      	b.n	8003502 <_printf_i+0x1be>
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6011      	str	r1, [r2, #0]
 80033ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033f0:	bf18      	it	ne
 80033f2:	b21b      	sxthne	r3, r3
 80033f4:	e7cf      	b.n	8003396 <_printf_i+0x52>
 80033f6:	6813      	ldr	r3, [r2, #0]
 80033f8:	6825      	ldr	r5, [r4, #0]
 80033fa:	1d18      	adds	r0, r3, #4
 80033fc:	6010      	str	r0, [r2, #0]
 80033fe:	0628      	lsls	r0, r5, #24
 8003400:	d501      	bpl.n	8003406 <_printf_i+0xc2>
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	e002      	b.n	800340c <_printf_i+0xc8>
 8003406:	0668      	lsls	r0, r5, #25
 8003408:	d5fb      	bpl.n	8003402 <_printf_i+0xbe>
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	4854      	ldr	r0, [pc, #336]	; (8003560 <_printf_i+0x21c>)
 800340e:	296f      	cmp	r1, #111	; 0x6f
 8003410:	bf14      	ite	ne
 8003412:	220a      	movne	r2, #10
 8003414:	2208      	moveq	r2, #8
 8003416:	2100      	movs	r1, #0
 8003418:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800341c:	6865      	ldr	r5, [r4, #4]
 800341e:	60a5      	str	r5, [r4, #8]
 8003420:	2d00      	cmp	r5, #0
 8003422:	f2c0 8095 	blt.w	8003550 <_printf_i+0x20c>
 8003426:	6821      	ldr	r1, [r4, #0]
 8003428:	f021 0104 	bic.w	r1, r1, #4
 800342c:	6021      	str	r1, [r4, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13d      	bne.n	80034ae <_printf_i+0x16a>
 8003432:	2d00      	cmp	r5, #0
 8003434:	f040 808e 	bne.w	8003554 <_printf_i+0x210>
 8003438:	4665      	mov	r5, ip
 800343a:	2a08      	cmp	r2, #8
 800343c:	d10b      	bne.n	8003456 <_printf_i+0x112>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	07db      	lsls	r3, r3, #31
 8003442:	d508      	bpl.n	8003456 <_printf_i+0x112>
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	6862      	ldr	r2, [r4, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	bfde      	ittt	le
 800344c:	2330      	movle	r3, #48	; 0x30
 800344e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003452:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003456:	ebac 0305 	sub.w	r3, ip, r5
 800345a:	6123      	str	r3, [r4, #16]
 800345c:	f8cd 8000 	str.w	r8, [sp]
 8003460:	463b      	mov	r3, r7
 8003462:	aa03      	add	r2, sp, #12
 8003464:	4621      	mov	r1, r4
 8003466:	4630      	mov	r0, r6
 8003468:	f7ff fef6 	bl	8003258 <_printf_common>
 800346c:	3001      	adds	r0, #1
 800346e:	d14d      	bne.n	800350c <_printf_i+0x1c8>
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	b005      	add	sp, #20
 8003476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800347a:	4839      	ldr	r0, [pc, #228]	; (8003560 <_printf_i+0x21c>)
 800347c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	1d1d      	adds	r5, r3, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6015      	str	r5, [r2, #0]
 800348a:	060a      	lsls	r2, r1, #24
 800348c:	d50b      	bpl.n	80034a6 <_printf_i+0x162>
 800348e:	07ca      	lsls	r2, r1, #31
 8003490:	bf44      	itt	mi
 8003492:	f041 0120 	orrmi.w	r1, r1, #32
 8003496:	6021      	strmi	r1, [r4, #0]
 8003498:	b91b      	cbnz	r3, 80034a2 <_printf_i+0x15e>
 800349a:	6822      	ldr	r2, [r4, #0]
 800349c:	f022 0220 	bic.w	r2, r2, #32
 80034a0:	6022      	str	r2, [r4, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	e7b7      	b.n	8003416 <_printf_i+0xd2>
 80034a6:	064d      	lsls	r5, r1, #25
 80034a8:	bf48      	it	mi
 80034aa:	b29b      	uxthmi	r3, r3
 80034ac:	e7ef      	b.n	800348e <_printf_i+0x14a>
 80034ae:	4665      	mov	r5, ip
 80034b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80034b4:	fb02 3311 	mls	r3, r2, r1, r3
 80034b8:	5cc3      	ldrb	r3, [r0, r3]
 80034ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034be:	460b      	mov	r3, r1
 80034c0:	2900      	cmp	r1, #0
 80034c2:	d1f5      	bne.n	80034b0 <_printf_i+0x16c>
 80034c4:	e7b9      	b.n	800343a <_printf_i+0xf6>
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	6825      	ldr	r5, [r4, #0]
 80034ca:	6961      	ldr	r1, [r4, #20]
 80034cc:	1d18      	adds	r0, r3, #4
 80034ce:	6010      	str	r0, [r2, #0]
 80034d0:	0628      	lsls	r0, r5, #24
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	d501      	bpl.n	80034da <_printf_i+0x196>
 80034d6:	6019      	str	r1, [r3, #0]
 80034d8:	e002      	b.n	80034e0 <_printf_i+0x19c>
 80034da:	066a      	lsls	r2, r5, #25
 80034dc:	d5fb      	bpl.n	80034d6 <_printf_i+0x192>
 80034de:	8019      	strh	r1, [r3, #0]
 80034e0:	2300      	movs	r3, #0
 80034e2:	6123      	str	r3, [r4, #16]
 80034e4:	4665      	mov	r5, ip
 80034e6:	e7b9      	b.n	800345c <_printf_i+0x118>
 80034e8:	6813      	ldr	r3, [r2, #0]
 80034ea:	1d19      	adds	r1, r3, #4
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	681d      	ldr	r5, [r3, #0]
 80034f0:	6862      	ldr	r2, [r4, #4]
 80034f2:	2100      	movs	r1, #0
 80034f4:	4628      	mov	r0, r5
 80034f6:	f7fc fe8b 	bl	8000210 <memchr>
 80034fa:	b108      	cbz	r0, 8003500 <_printf_i+0x1bc>
 80034fc:	1b40      	subs	r0, r0, r5
 80034fe:	6060      	str	r0, [r4, #4]
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	6123      	str	r3, [r4, #16]
 8003504:	2300      	movs	r3, #0
 8003506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800350a:	e7a7      	b.n	800345c <_printf_i+0x118>
 800350c:	6923      	ldr	r3, [r4, #16]
 800350e:	462a      	mov	r2, r5
 8003510:	4639      	mov	r1, r7
 8003512:	4630      	mov	r0, r6
 8003514:	47c0      	blx	r8
 8003516:	3001      	adds	r0, #1
 8003518:	d0aa      	beq.n	8003470 <_printf_i+0x12c>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	079b      	lsls	r3, r3, #30
 800351e:	d413      	bmi.n	8003548 <_printf_i+0x204>
 8003520:	68e0      	ldr	r0, [r4, #12]
 8003522:	9b03      	ldr	r3, [sp, #12]
 8003524:	4298      	cmp	r0, r3
 8003526:	bfb8      	it	lt
 8003528:	4618      	movlt	r0, r3
 800352a:	e7a3      	b.n	8003474 <_printf_i+0x130>
 800352c:	2301      	movs	r3, #1
 800352e:	464a      	mov	r2, r9
 8003530:	4639      	mov	r1, r7
 8003532:	4630      	mov	r0, r6
 8003534:	47c0      	blx	r8
 8003536:	3001      	adds	r0, #1
 8003538:	d09a      	beq.n	8003470 <_printf_i+0x12c>
 800353a:	3501      	adds	r5, #1
 800353c:	68e3      	ldr	r3, [r4, #12]
 800353e:	9a03      	ldr	r2, [sp, #12]
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	42ab      	cmp	r3, r5
 8003544:	dcf2      	bgt.n	800352c <_printf_i+0x1e8>
 8003546:	e7eb      	b.n	8003520 <_printf_i+0x1dc>
 8003548:	2500      	movs	r5, #0
 800354a:	f104 0919 	add.w	r9, r4, #25
 800354e:	e7f5      	b.n	800353c <_printf_i+0x1f8>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ac      	bne.n	80034ae <_printf_i+0x16a>
 8003554:	7803      	ldrb	r3, [r0, #0]
 8003556:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800355a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800355e:	e76c      	b.n	800343a <_printf_i+0xf6>
 8003560:	08003e9d 	.word	0x08003e9d
 8003564:	08003eae 	.word	0x08003eae

08003568 <_sbrk_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4c06      	ldr	r4, [pc, #24]	; (8003584 <_sbrk_r+0x1c>)
 800356c:	2300      	movs	r3, #0
 800356e:	4605      	mov	r5, r0
 8003570:	4608      	mov	r0, r1
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	f7fd fb32 	bl	8000bdc <_sbrk>
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	d102      	bne.n	8003582 <_sbrk_r+0x1a>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	b103      	cbz	r3, 8003582 <_sbrk_r+0x1a>
 8003580:	602b      	str	r3, [r5, #0]
 8003582:	bd38      	pop	{r3, r4, r5, pc}
 8003584:	200001e0 	.word	0x200001e0

08003588 <__sread>:
 8003588:	b510      	push	{r4, lr}
 800358a:	460c      	mov	r4, r1
 800358c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003590:	f000 fa96 	bl	8003ac0 <_read_r>
 8003594:	2800      	cmp	r0, #0
 8003596:	bfab      	itete	ge
 8003598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800359a:	89a3      	ldrhlt	r3, [r4, #12]
 800359c:	181b      	addge	r3, r3, r0
 800359e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035a2:	bfac      	ite	ge
 80035a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80035a6:	81a3      	strhlt	r3, [r4, #12]
 80035a8:	bd10      	pop	{r4, pc}

080035aa <__swrite>:
 80035aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ae:	461f      	mov	r7, r3
 80035b0:	898b      	ldrh	r3, [r1, #12]
 80035b2:	05db      	lsls	r3, r3, #23
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	4616      	mov	r6, r2
 80035ba:	d505      	bpl.n	80035c8 <__swrite+0x1e>
 80035bc:	2302      	movs	r3, #2
 80035be:	2200      	movs	r2, #0
 80035c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c4:	f000 f9b6 	bl	8003934 <_lseek_r>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	4632      	mov	r2, r6
 80035d6:	463b      	mov	r3, r7
 80035d8:	4628      	mov	r0, r5
 80035da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035de:	f000 b869 	b.w	80036b4 <_write_r>

080035e2 <__sseek>:
 80035e2:	b510      	push	{r4, lr}
 80035e4:	460c      	mov	r4, r1
 80035e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ea:	f000 f9a3 	bl	8003934 <_lseek_r>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	bf15      	itete	ne
 80035f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035fe:	81a3      	strheq	r3, [r4, #12]
 8003600:	bf18      	it	ne
 8003602:	81a3      	strhne	r3, [r4, #12]
 8003604:	bd10      	pop	{r4, pc}

08003606 <__sclose>:
 8003606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800360a:	f000 b8d3 	b.w	80037b4 <_close_r>
	...

08003610 <__swbuf_r>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	460e      	mov	r6, r1
 8003614:	4614      	mov	r4, r2
 8003616:	4605      	mov	r5, r0
 8003618:	b118      	cbz	r0, 8003622 <__swbuf_r+0x12>
 800361a:	6983      	ldr	r3, [r0, #24]
 800361c:	b90b      	cbnz	r3, 8003622 <__swbuf_r+0x12>
 800361e:	f7ff fbf7 	bl	8002e10 <__sinit>
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <__swbuf_r+0x98>)
 8003624:	429c      	cmp	r4, r3
 8003626:	d12a      	bne.n	800367e <__swbuf_r+0x6e>
 8003628:	686c      	ldr	r4, [r5, #4]
 800362a:	69a3      	ldr	r3, [r4, #24]
 800362c:	60a3      	str	r3, [r4, #8]
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	071a      	lsls	r2, r3, #28
 8003632:	d52e      	bpl.n	8003692 <__swbuf_r+0x82>
 8003634:	6923      	ldr	r3, [r4, #16]
 8003636:	b363      	cbz	r3, 8003692 <__swbuf_r+0x82>
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	1ac0      	subs	r0, r0, r3
 800363e:	6963      	ldr	r3, [r4, #20]
 8003640:	b2f6      	uxtb	r6, r6
 8003642:	4283      	cmp	r3, r0
 8003644:	4637      	mov	r7, r6
 8003646:	dc04      	bgt.n	8003652 <__swbuf_r+0x42>
 8003648:	4621      	mov	r1, r4
 800364a:	4628      	mov	r0, r5
 800364c:	f000 f948 	bl	80038e0 <_fflush_r>
 8003650:	bb28      	cbnz	r0, 800369e <__swbuf_r+0x8e>
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60a3      	str	r3, [r4, #8]
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	6022      	str	r2, [r4, #0]
 800365e:	701e      	strb	r6, [r3, #0]
 8003660:	6963      	ldr	r3, [r4, #20]
 8003662:	3001      	adds	r0, #1
 8003664:	4283      	cmp	r3, r0
 8003666:	d004      	beq.n	8003672 <__swbuf_r+0x62>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	07db      	lsls	r3, r3, #31
 800366c:	d519      	bpl.n	80036a2 <__swbuf_r+0x92>
 800366e:	2e0a      	cmp	r6, #10
 8003670:	d117      	bne.n	80036a2 <__swbuf_r+0x92>
 8003672:	4621      	mov	r1, r4
 8003674:	4628      	mov	r0, r5
 8003676:	f000 f933 	bl	80038e0 <_fflush_r>
 800367a:	b190      	cbz	r0, 80036a2 <__swbuf_r+0x92>
 800367c:	e00f      	b.n	800369e <__swbuf_r+0x8e>
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <__swbuf_r+0x9c>)
 8003680:	429c      	cmp	r4, r3
 8003682:	d101      	bne.n	8003688 <__swbuf_r+0x78>
 8003684:	68ac      	ldr	r4, [r5, #8]
 8003686:	e7d0      	b.n	800362a <__swbuf_r+0x1a>
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <__swbuf_r+0xa0>)
 800368a:	429c      	cmp	r4, r3
 800368c:	bf08      	it	eq
 800368e:	68ec      	ldreq	r4, [r5, #12]
 8003690:	e7cb      	b.n	800362a <__swbuf_r+0x1a>
 8003692:	4621      	mov	r1, r4
 8003694:	4628      	mov	r0, r5
 8003696:	f000 f81f 	bl	80036d8 <__swsetup_r>
 800369a:	2800      	cmp	r0, #0
 800369c:	d0cc      	beq.n	8003638 <__swbuf_r+0x28>
 800369e:	f04f 37ff 	mov.w	r7, #4294967295
 80036a2:	4638      	mov	r0, r7
 80036a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a6:	bf00      	nop
 80036a8:	08003e4c 	.word	0x08003e4c
 80036ac:	08003e6c 	.word	0x08003e6c
 80036b0:	08003e2c 	.word	0x08003e2c

080036b4 <_write_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4c07      	ldr	r4, [pc, #28]	; (80036d4 <_write_r+0x20>)
 80036b8:	4605      	mov	r5, r0
 80036ba:	4608      	mov	r0, r1
 80036bc:	4611      	mov	r1, r2
 80036be:	2200      	movs	r2, #0
 80036c0:	6022      	str	r2, [r4, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f000 fae1 	bl	8003c8a <_write>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_write_r+0x1e>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_write_r+0x1e>
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	200001e0 	.word	0x200001e0

080036d8 <__swsetup_r>:
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <__swsetup_r+0xcc>)
 80036da:	b570      	push	{r4, r5, r6, lr}
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	4606      	mov	r6, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	b125      	cbz	r5, 80036ee <__swsetup_r+0x16>
 80036e4:	69ab      	ldr	r3, [r5, #24]
 80036e6:	b913      	cbnz	r3, 80036ee <__swsetup_r+0x16>
 80036e8:	4628      	mov	r0, r5
 80036ea:	f7ff fb91 	bl	8002e10 <__sinit>
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <__swsetup_r+0xd0>)
 80036f0:	429c      	cmp	r4, r3
 80036f2:	d10f      	bne.n	8003714 <__swsetup_r+0x3c>
 80036f4:	686c      	ldr	r4, [r5, #4]
 80036f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	0715      	lsls	r5, r2, #28
 80036fe:	d42c      	bmi.n	800375a <__swsetup_r+0x82>
 8003700:	06d0      	lsls	r0, r2, #27
 8003702:	d411      	bmi.n	8003728 <__swsetup_r+0x50>
 8003704:	2209      	movs	r2, #9
 8003706:	6032      	str	r2, [r6, #0]
 8003708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	f04f 30ff 	mov.w	r0, #4294967295
 8003712:	e03e      	b.n	8003792 <__swsetup_r+0xba>
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <__swsetup_r+0xd4>)
 8003716:	429c      	cmp	r4, r3
 8003718:	d101      	bne.n	800371e <__swsetup_r+0x46>
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	e7eb      	b.n	80036f6 <__swsetup_r+0x1e>
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <__swsetup_r+0xd8>)
 8003720:	429c      	cmp	r4, r3
 8003722:	bf08      	it	eq
 8003724:	68ec      	ldreq	r4, [r5, #12]
 8003726:	e7e6      	b.n	80036f6 <__swsetup_r+0x1e>
 8003728:	0751      	lsls	r1, r2, #29
 800372a:	d512      	bpl.n	8003752 <__swsetup_r+0x7a>
 800372c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800372e:	b141      	cbz	r1, 8003742 <__swsetup_r+0x6a>
 8003730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003734:	4299      	cmp	r1, r3
 8003736:	d002      	beq.n	800373e <__swsetup_r+0x66>
 8003738:	4630      	mov	r0, r6
 800373a:	f000 f973 	bl	8003a24 <_free_r>
 800373e:	2300      	movs	r3, #0
 8003740:	6363      	str	r3, [r4, #52]	; 0x34
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	2300      	movs	r3, #0
 800374c:	6063      	str	r3, [r4, #4]
 800374e:	6923      	ldr	r3, [r4, #16]
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	b94b      	cbnz	r3, 8003772 <__swsetup_r+0x9a>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d003      	beq.n	8003772 <__swsetup_r+0x9a>
 800376a:	4621      	mov	r1, r4
 800376c:	4630      	mov	r0, r6
 800376e:	f000 f917 	bl	80039a0 <__smakebuf_r>
 8003772:	89a2      	ldrh	r2, [r4, #12]
 8003774:	f012 0301 	ands.w	r3, r2, #1
 8003778:	d00c      	beq.n	8003794 <__swsetup_r+0xbc>
 800377a:	2300      	movs	r3, #0
 800377c:	60a3      	str	r3, [r4, #8]
 800377e:	6963      	ldr	r3, [r4, #20]
 8003780:	425b      	negs	r3, r3
 8003782:	61a3      	str	r3, [r4, #24]
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	b953      	cbnz	r3, 800379e <__swsetup_r+0xc6>
 8003788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800378c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003790:	d1ba      	bne.n	8003708 <__swsetup_r+0x30>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	0792      	lsls	r2, r2, #30
 8003796:	bf58      	it	pl
 8003798:	6963      	ldrpl	r3, [r4, #20]
 800379a:	60a3      	str	r3, [r4, #8]
 800379c:	e7f2      	b.n	8003784 <__swsetup_r+0xac>
 800379e:	2000      	movs	r0, #0
 80037a0:	e7f7      	b.n	8003792 <__swsetup_r+0xba>
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	08003e4c 	.word	0x08003e4c
 80037ac:	08003e6c 	.word	0x08003e6c
 80037b0:	08003e2c 	.word	0x08003e2c

080037b4 <_close_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4c06      	ldr	r4, [pc, #24]	; (80037d0 <_close_r+0x1c>)
 80037b8:	2300      	movs	r3, #0
 80037ba:	4605      	mov	r5, r0
 80037bc:	4608      	mov	r0, r1
 80037be:	6023      	str	r3, [r4, #0]
 80037c0:	f000 fa92 	bl	8003ce8 <_close>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_close_r+0x1a>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_close_r+0x1a>
 80037cc:	602b      	str	r3, [r5, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	200001e0 	.word	0x200001e0

080037d4 <__sflush_r>:
 80037d4:	898a      	ldrh	r2, [r1, #12]
 80037d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037da:	4605      	mov	r5, r0
 80037dc:	0710      	lsls	r0, r2, #28
 80037de:	460c      	mov	r4, r1
 80037e0:	d458      	bmi.n	8003894 <__sflush_r+0xc0>
 80037e2:	684b      	ldr	r3, [r1, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	dc05      	bgt.n	80037f4 <__sflush_r+0x20>
 80037e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	dc02      	bgt.n	80037f4 <__sflush_r+0x20>
 80037ee:	2000      	movs	r0, #0
 80037f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037f6:	2e00      	cmp	r6, #0
 80037f8:	d0f9      	beq.n	80037ee <__sflush_r+0x1a>
 80037fa:	2300      	movs	r3, #0
 80037fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003800:	682f      	ldr	r7, [r5, #0]
 8003802:	6a21      	ldr	r1, [r4, #32]
 8003804:	602b      	str	r3, [r5, #0]
 8003806:	d032      	beq.n	800386e <__sflush_r+0x9a>
 8003808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	075a      	lsls	r2, r3, #29
 800380e:	d505      	bpl.n	800381c <__sflush_r+0x48>
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	1ac0      	subs	r0, r0, r3
 8003814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003816:	b10b      	cbz	r3, 800381c <__sflush_r+0x48>
 8003818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800381a:	1ac0      	subs	r0, r0, r3
 800381c:	2300      	movs	r3, #0
 800381e:	4602      	mov	r2, r0
 8003820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003822:	6a21      	ldr	r1, [r4, #32]
 8003824:	4628      	mov	r0, r5
 8003826:	47b0      	blx	r6
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	d106      	bne.n	800383c <__sflush_r+0x68>
 800382e:	6829      	ldr	r1, [r5, #0]
 8003830:	291d      	cmp	r1, #29
 8003832:	d848      	bhi.n	80038c6 <__sflush_r+0xf2>
 8003834:	4a29      	ldr	r2, [pc, #164]	; (80038dc <__sflush_r+0x108>)
 8003836:	40ca      	lsrs	r2, r1
 8003838:	07d6      	lsls	r6, r2, #31
 800383a:	d544      	bpl.n	80038c6 <__sflush_r+0xf2>
 800383c:	2200      	movs	r2, #0
 800383e:	6062      	str	r2, [r4, #4]
 8003840:	04d9      	lsls	r1, r3, #19
 8003842:	6922      	ldr	r2, [r4, #16]
 8003844:	6022      	str	r2, [r4, #0]
 8003846:	d504      	bpl.n	8003852 <__sflush_r+0x7e>
 8003848:	1c42      	adds	r2, r0, #1
 800384a:	d101      	bne.n	8003850 <__sflush_r+0x7c>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	b903      	cbnz	r3, 8003852 <__sflush_r+0x7e>
 8003850:	6560      	str	r0, [r4, #84]	; 0x54
 8003852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003854:	602f      	str	r7, [r5, #0]
 8003856:	2900      	cmp	r1, #0
 8003858:	d0c9      	beq.n	80037ee <__sflush_r+0x1a>
 800385a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800385e:	4299      	cmp	r1, r3
 8003860:	d002      	beq.n	8003868 <__sflush_r+0x94>
 8003862:	4628      	mov	r0, r5
 8003864:	f000 f8de 	bl	8003a24 <_free_r>
 8003868:	2000      	movs	r0, #0
 800386a:	6360      	str	r0, [r4, #52]	; 0x34
 800386c:	e7c0      	b.n	80037f0 <__sflush_r+0x1c>
 800386e:	2301      	movs	r3, #1
 8003870:	4628      	mov	r0, r5
 8003872:	47b0      	blx	r6
 8003874:	1c41      	adds	r1, r0, #1
 8003876:	d1c8      	bne.n	800380a <__sflush_r+0x36>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0c5      	beq.n	800380a <__sflush_r+0x36>
 800387e:	2b1d      	cmp	r3, #29
 8003880:	d001      	beq.n	8003886 <__sflush_r+0xb2>
 8003882:	2b16      	cmp	r3, #22
 8003884:	d101      	bne.n	800388a <__sflush_r+0xb6>
 8003886:	602f      	str	r7, [r5, #0]
 8003888:	e7b1      	b.n	80037ee <__sflush_r+0x1a>
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	e7ad      	b.n	80037f0 <__sflush_r+0x1c>
 8003894:	690f      	ldr	r7, [r1, #16]
 8003896:	2f00      	cmp	r7, #0
 8003898:	d0a9      	beq.n	80037ee <__sflush_r+0x1a>
 800389a:	0793      	lsls	r3, r2, #30
 800389c:	680e      	ldr	r6, [r1, #0]
 800389e:	bf08      	it	eq
 80038a0:	694b      	ldreq	r3, [r1, #20]
 80038a2:	600f      	str	r7, [r1, #0]
 80038a4:	bf18      	it	ne
 80038a6:	2300      	movne	r3, #0
 80038a8:	eba6 0807 	sub.w	r8, r6, r7
 80038ac:	608b      	str	r3, [r1, #8]
 80038ae:	f1b8 0f00 	cmp.w	r8, #0
 80038b2:	dd9c      	ble.n	80037ee <__sflush_r+0x1a>
 80038b4:	4643      	mov	r3, r8
 80038b6:	463a      	mov	r2, r7
 80038b8:	6a21      	ldr	r1, [r4, #32]
 80038ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038bc:	4628      	mov	r0, r5
 80038be:	47b0      	blx	r6
 80038c0:	2800      	cmp	r0, #0
 80038c2:	dc06      	bgt.n	80038d2 <__sflush_r+0xfe>
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	e78e      	b.n	80037f0 <__sflush_r+0x1c>
 80038d2:	4407      	add	r7, r0
 80038d4:	eba8 0800 	sub.w	r8, r8, r0
 80038d8:	e7e9      	b.n	80038ae <__sflush_r+0xda>
 80038da:	bf00      	nop
 80038dc:	20400001 	.word	0x20400001

080038e0 <_fflush_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	690b      	ldr	r3, [r1, #16]
 80038e4:	4605      	mov	r5, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	b1db      	cbz	r3, 8003922 <_fflush_r+0x42>
 80038ea:	b118      	cbz	r0, 80038f4 <_fflush_r+0x14>
 80038ec:	6983      	ldr	r3, [r0, #24]
 80038ee:	b90b      	cbnz	r3, 80038f4 <_fflush_r+0x14>
 80038f0:	f7ff fa8e 	bl	8002e10 <__sinit>
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <_fflush_r+0x48>)
 80038f6:	429c      	cmp	r4, r3
 80038f8:	d109      	bne.n	800390e <_fflush_r+0x2e>
 80038fa:	686c      	ldr	r4, [r5, #4]
 80038fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003900:	b17b      	cbz	r3, 8003922 <_fflush_r+0x42>
 8003902:	4621      	mov	r1, r4
 8003904:	4628      	mov	r0, r5
 8003906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800390a:	f7ff bf63 	b.w	80037d4 <__sflush_r>
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <_fflush_r+0x4c>)
 8003910:	429c      	cmp	r4, r3
 8003912:	d101      	bne.n	8003918 <_fflush_r+0x38>
 8003914:	68ac      	ldr	r4, [r5, #8]
 8003916:	e7f1      	b.n	80038fc <_fflush_r+0x1c>
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <_fflush_r+0x50>)
 800391a:	429c      	cmp	r4, r3
 800391c:	bf08      	it	eq
 800391e:	68ec      	ldreq	r4, [r5, #12]
 8003920:	e7ec      	b.n	80038fc <_fflush_r+0x1c>
 8003922:	2000      	movs	r0, #0
 8003924:	bd38      	pop	{r3, r4, r5, pc}
 8003926:	bf00      	nop
 8003928:	08003e4c 	.word	0x08003e4c
 800392c:	08003e6c 	.word	0x08003e6c
 8003930:	08003e2c 	.word	0x08003e2c

08003934 <_lseek_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4c07      	ldr	r4, [pc, #28]	; (8003954 <_lseek_r+0x20>)
 8003938:	4605      	mov	r5, r0
 800393a:	4608      	mov	r0, r1
 800393c:	4611      	mov	r1, r2
 800393e:	2200      	movs	r2, #0
 8003940:	6022      	str	r2, [r4, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f000 f98f 	bl	8003c66 <_lseek>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_lseek_r+0x1e>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	b103      	cbz	r3, 8003952 <_lseek_r+0x1e>
 8003950:	602b      	str	r3, [r5, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	200001e0 	.word	0x200001e0

08003958 <__swhatbuf_r>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	460e      	mov	r6, r1
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	2900      	cmp	r1, #0
 8003962:	b096      	sub	sp, #88	; 0x58
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	da07      	bge.n	800397a <__swhatbuf_r+0x22>
 800396a:	2300      	movs	r3, #0
 800396c:	602b      	str	r3, [r5, #0]
 800396e:	89b3      	ldrh	r3, [r6, #12]
 8003970:	061a      	lsls	r2, r3, #24
 8003972:	d410      	bmi.n	8003996 <__swhatbuf_r+0x3e>
 8003974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003978:	e00e      	b.n	8003998 <__swhatbuf_r+0x40>
 800397a:	466a      	mov	r2, sp
 800397c:	f000 f8b2 	bl	8003ae4 <_fstat_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	dbf2      	blt.n	800396a <__swhatbuf_r+0x12>
 8003984:	9a01      	ldr	r2, [sp, #4]
 8003986:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800398a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800398e:	425a      	negs	r2, r3
 8003990:	415a      	adcs	r2, r3
 8003992:	602a      	str	r2, [r5, #0]
 8003994:	e7ee      	b.n	8003974 <__swhatbuf_r+0x1c>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	2000      	movs	r0, #0
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	b016      	add	sp, #88	; 0x58
 800399e:	bd70      	pop	{r4, r5, r6, pc}

080039a0 <__smakebuf_r>:
 80039a0:	898b      	ldrh	r3, [r1, #12]
 80039a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039a4:	079d      	lsls	r5, r3, #30
 80039a6:	4606      	mov	r6, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	d507      	bpl.n	80039bc <__smakebuf_r+0x1c>
 80039ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	6123      	str	r3, [r4, #16]
 80039b4:	2301      	movs	r3, #1
 80039b6:	6163      	str	r3, [r4, #20]
 80039b8:	b002      	add	sp, #8
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
 80039bc:	ab01      	add	r3, sp, #4
 80039be:	466a      	mov	r2, sp
 80039c0:	f7ff ffca 	bl	8003958 <__swhatbuf_r>
 80039c4:	9900      	ldr	r1, [sp, #0]
 80039c6:	4605      	mov	r5, r0
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7ff faab 	bl	8002f24 <_malloc_r>
 80039ce:	b948      	cbnz	r0, 80039e4 <__smakebuf_r+0x44>
 80039d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d4:	059a      	lsls	r2, r3, #22
 80039d6:	d4ef      	bmi.n	80039b8 <__smakebuf_r+0x18>
 80039d8:	f023 0303 	bic.w	r3, r3, #3
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	81a3      	strh	r3, [r4, #12]
 80039e2:	e7e3      	b.n	80039ac <__smakebuf_r+0xc>
 80039e4:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <__smakebuf_r+0x7c>)
 80039e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	6020      	str	r0, [r4, #0]
 80039ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f0:	81a3      	strh	r3, [r4, #12]
 80039f2:	9b00      	ldr	r3, [sp, #0]
 80039f4:	6163      	str	r3, [r4, #20]
 80039f6:	9b01      	ldr	r3, [sp, #4]
 80039f8:	6120      	str	r0, [r4, #16]
 80039fa:	b15b      	cbz	r3, 8003a14 <__smakebuf_r+0x74>
 80039fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f881 	bl	8003b08 <_isatty_r>
 8003a06:	b128      	cbz	r0, 8003a14 <__smakebuf_r+0x74>
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	431d      	orrs	r5, r3
 8003a18:	81a5      	strh	r5, [r4, #12]
 8003a1a:	e7cd      	b.n	80039b8 <__smakebuf_r+0x18>
 8003a1c:	08002dd9 	.word	0x08002dd9

08003a20 <__malloc_lock>:
 8003a20:	4770      	bx	lr

08003a22 <__malloc_unlock>:
 8003a22:	4770      	bx	lr

08003a24 <_free_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4605      	mov	r5, r0
 8003a28:	2900      	cmp	r1, #0
 8003a2a:	d045      	beq.n	8003ab8 <_free_r+0x94>
 8003a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a30:	1f0c      	subs	r4, r1, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bfb8      	it	lt
 8003a36:	18e4      	addlt	r4, r4, r3
 8003a38:	f7ff fff2 	bl	8003a20 <__malloc_lock>
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <_free_r+0x98>)
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	4610      	mov	r0, r2
 8003a42:	b933      	cbnz	r3, 8003a52 <_free_r+0x2e>
 8003a44:	6063      	str	r3, [r4, #4]
 8003a46:	6014      	str	r4, [r2, #0]
 8003a48:	4628      	mov	r0, r5
 8003a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a4e:	f7ff bfe8 	b.w	8003a22 <__malloc_unlock>
 8003a52:	42a3      	cmp	r3, r4
 8003a54:	d90c      	bls.n	8003a70 <_free_r+0x4c>
 8003a56:	6821      	ldr	r1, [r4, #0]
 8003a58:	1862      	adds	r2, r4, r1
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	bf04      	itt	eq
 8003a5e:	681a      	ldreq	r2, [r3, #0]
 8003a60:	685b      	ldreq	r3, [r3, #4]
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	bf04      	itt	eq
 8003a66:	1852      	addeq	r2, r2, r1
 8003a68:	6022      	streq	r2, [r4, #0]
 8003a6a:	6004      	str	r4, [r0, #0]
 8003a6c:	e7ec      	b.n	8003a48 <_free_r+0x24>
 8003a6e:	4613      	mov	r3, r2
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	b10a      	cbz	r2, 8003a78 <_free_r+0x54>
 8003a74:	42a2      	cmp	r2, r4
 8003a76:	d9fa      	bls.n	8003a6e <_free_r+0x4a>
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	1858      	adds	r0, r3, r1
 8003a7c:	42a0      	cmp	r0, r4
 8003a7e:	d10b      	bne.n	8003a98 <_free_r+0x74>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	4401      	add	r1, r0
 8003a84:	1858      	adds	r0, r3, r1
 8003a86:	4282      	cmp	r2, r0
 8003a88:	6019      	str	r1, [r3, #0]
 8003a8a:	d1dd      	bne.n	8003a48 <_free_r+0x24>
 8003a8c:	6810      	ldr	r0, [r2, #0]
 8003a8e:	6852      	ldr	r2, [r2, #4]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	4401      	add	r1, r0
 8003a94:	6019      	str	r1, [r3, #0]
 8003a96:	e7d7      	b.n	8003a48 <_free_r+0x24>
 8003a98:	d902      	bls.n	8003aa0 <_free_r+0x7c>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	602b      	str	r3, [r5, #0]
 8003a9e:	e7d3      	b.n	8003a48 <_free_r+0x24>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	1821      	adds	r1, r4, r0
 8003aa4:	428a      	cmp	r2, r1
 8003aa6:	bf04      	itt	eq
 8003aa8:	6811      	ldreq	r1, [r2, #0]
 8003aaa:	6852      	ldreq	r2, [r2, #4]
 8003aac:	6062      	str	r2, [r4, #4]
 8003aae:	bf04      	itt	eq
 8003ab0:	1809      	addeq	r1, r1, r0
 8003ab2:	6021      	streq	r1, [r4, #0]
 8003ab4:	605c      	str	r4, [r3, #4]
 8003ab6:	e7c7      	b.n	8003a48 <_free_r+0x24>
 8003ab8:	bd38      	pop	{r3, r4, r5, pc}
 8003aba:	bf00      	nop
 8003abc:	20000094 	.word	0x20000094

08003ac0 <_read_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4c07      	ldr	r4, [pc, #28]	; (8003ae0 <_read_r+0x20>)
 8003ac4:	4605      	mov	r5, r0
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	4611      	mov	r1, r2
 8003aca:	2200      	movs	r2, #0
 8003acc:	6022      	str	r2, [r4, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 f872 	bl	8003bb8 <_read>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_read_r+0x1e>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_read_r+0x1e>
 8003adc:	602b      	str	r3, [r5, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	200001e0 	.word	0x200001e0

08003ae4 <_fstat_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4c07      	ldr	r4, [pc, #28]	; (8003b04 <_fstat_r+0x20>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4605      	mov	r5, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	f000 f940 	bl	8003d76 <_fstat>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d102      	bne.n	8003b00 <_fstat_r+0x1c>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	b103      	cbz	r3, 8003b00 <_fstat_r+0x1c>
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
 8003b02:	bf00      	nop
 8003b04:	200001e0 	.word	0x200001e0

08003b08 <_isatty_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4c06      	ldr	r4, [pc, #24]	; (8003b24 <_isatty_r+0x1c>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4605      	mov	r5, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	f000 f93d 	bl	8003d92 <_isatty>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_isatty_r+0x1a>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_isatty_r+0x1a>
 8003b20:	602b      	str	r3, [r5, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	200001e0 	.word	0x200001e0

08003b28 <findslot>:
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <findslot+0x2c>)
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	b118      	cbz	r0, 8003b3a <findslot+0x12>
 8003b32:	6983      	ldr	r3, [r0, #24]
 8003b34:	b90b      	cbnz	r3, 8003b3a <findslot+0x12>
 8003b36:	f7ff f96b 	bl	8002e10 <__sinit>
 8003b3a:	2c13      	cmp	r4, #19
 8003b3c:	d807      	bhi.n	8003b4e <findslot+0x26>
 8003b3e:	4806      	ldr	r0, [pc, #24]	; (8003b58 <findslot+0x30>)
 8003b40:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8003b44:	3301      	adds	r3, #1
 8003b46:	d002      	beq.n	8003b4e <findslot+0x26>
 8003b48:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e7fc      	b.n	8003b4c <findslot+0x24>
 8003b52:	bf00      	nop
 8003b54:	2000000c 	.word	0x2000000c
 8003b58:	2000009c 	.word	0x2000009c

08003b5c <checkerror>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	1c43      	adds	r3, r0, #1
 8003b60:	4605      	mov	r5, r0
 8003b62:	d109      	bne.n	8003b78 <checkerror+0x1c>
 8003b64:	f7ff f8ca 	bl	8002cfc <__errno>
 8003b68:	2413      	movs	r4, #19
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	2700      	movs	r7, #0
 8003b6e:	4620      	mov	r0, r4
 8003b70:	4639      	mov	r1, r7
 8003b72:	beab      	bkpt	0x00ab
 8003b74:	4604      	mov	r4, r0
 8003b76:	6034      	str	r4, [r6, #0]
 8003b78:	4628      	mov	r0, r5
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b7c <error>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	4605      	mov	r5, r0
 8003b80:	f7ff f8bc 	bl	8002cfc <__errno>
 8003b84:	2413      	movs	r4, #19
 8003b86:	4606      	mov	r6, r0
 8003b88:	2700      	movs	r7, #0
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	4639      	mov	r1, r7
 8003b8e:	beab      	bkpt	0x00ab
 8003b90:	4604      	mov	r4, r0
 8003b92:	6034      	str	r4, [r6, #0]
 8003b94:	4628      	mov	r0, r5
 8003b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b98 <_swiread>:
 8003b98:	b530      	push	{r4, r5, lr}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003ba0:	9203      	str	r2, [sp, #12]
 8003ba2:	2406      	movs	r4, #6
 8003ba4:	ad01      	add	r5, sp, #4
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	4629      	mov	r1, r5
 8003baa:	beab      	bkpt	0x00ab
 8003bac:	4604      	mov	r4, r0
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff ffd4 	bl	8003b5c <checkerror>
 8003bb4:	b005      	add	sp, #20
 8003bb6:	bd30      	pop	{r4, r5, pc}

08003bb8 <_read>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	460e      	mov	r6, r1
 8003bbc:	4615      	mov	r5, r2
 8003bbe:	f7ff ffb3 	bl	8003b28 <findslot>
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	b930      	cbnz	r0, 8003bd4 <_read+0x1c>
 8003bc6:	f7ff f899 	bl	8002cfc <__errno>
 8003bca:	2309      	movs	r3, #9
 8003bcc:	6003      	str	r3, [r0, #0]
 8003bce:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	6800      	ldr	r0, [r0, #0]
 8003bda:	f7ff ffdd 	bl	8003b98 <_swiread>
 8003bde:	1c43      	adds	r3, r0, #1
 8003be0:	bf1f      	itttt	ne
 8003be2:	6863      	ldrne	r3, [r4, #4]
 8003be4:	1a28      	subne	r0, r5, r0
 8003be6:	181b      	addne	r3, r3, r0
 8003be8:	6063      	strne	r3, [r4, #4]
 8003bea:	e7f2      	b.n	8003bd2 <_read+0x1a>

08003bec <_swilseek>:
 8003bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	f7ff ff99 	bl	8003b28 <findslot>
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	b940      	cbnz	r0, 8003c0c <_swilseek+0x20>
 8003bfa:	f7ff f87f 	bl	8002cfc <__errno>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	6003      	str	r3, [r0, #0]
 8003c02:	f04f 34ff 	mov.w	r4, #4294967295
 8003c06:	4620      	mov	r0, r4
 8003c08:	b003      	add	sp, #12
 8003c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0c:	2e02      	cmp	r6, #2
 8003c0e:	d903      	bls.n	8003c18 <_swilseek+0x2c>
 8003c10:	f7ff f874 	bl	8002cfc <__errno>
 8003c14:	2316      	movs	r3, #22
 8003c16:	e7f3      	b.n	8003c00 <_swilseek+0x14>
 8003c18:	2e01      	cmp	r6, #1
 8003c1a:	d112      	bne.n	8003c42 <_swilseek+0x56>
 8003c1c:	6843      	ldr	r3, [r0, #4]
 8003c1e:	18e4      	adds	r4, r4, r3
 8003c20:	d4f6      	bmi.n	8003c10 <_swilseek+0x24>
 8003c22:	682b      	ldr	r3, [r5, #0]
 8003c24:	260a      	movs	r6, #10
 8003c26:	e9cd 3400 	strd	r3, r4, [sp]
 8003c2a:	466f      	mov	r7, sp
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	4639      	mov	r1, r7
 8003c30:	beab      	bkpt	0x00ab
 8003c32:	4606      	mov	r6, r0
 8003c34:	4630      	mov	r0, r6
 8003c36:	f7ff ff91 	bl	8003b5c <checkerror>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	dbe1      	blt.n	8003c02 <_swilseek+0x16>
 8003c3e:	606c      	str	r4, [r5, #4]
 8003c40:	e7e1      	b.n	8003c06 <_swilseek+0x1a>
 8003c42:	2e02      	cmp	r6, #2
 8003c44:	d1ed      	bne.n	8003c22 <_swilseek+0x36>
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	6803      	ldr	r3, [r0, #0]
 8003c4a:	f847 3d08 	str.w	r3, [r7, #-8]!
 8003c4e:	260c      	movs	r6, #12
 8003c50:	4630      	mov	r0, r6
 8003c52:	4639      	mov	r1, r7
 8003c54:	beab      	bkpt	0x00ab
 8003c56:	4606      	mov	r6, r0
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f7ff ff7f 	bl	8003b5c <checkerror>
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	d0cf      	beq.n	8003c02 <_swilseek+0x16>
 8003c62:	4404      	add	r4, r0
 8003c64:	e7dd      	b.n	8003c22 <_swilseek+0x36>

08003c66 <_lseek>:
 8003c66:	f7ff bfc1 	b.w	8003bec <_swilseek>

08003c6a <_swiwrite>:
 8003c6a:	b530      	push	{r4, r5, lr}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003c72:	9203      	str	r2, [sp, #12]
 8003c74:	2405      	movs	r4, #5
 8003c76:	ad01      	add	r5, sp, #4
 8003c78:	4620      	mov	r0, r4
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	beab      	bkpt	0x00ab
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4620      	mov	r0, r4
 8003c82:	f7ff ff6b 	bl	8003b5c <checkerror>
 8003c86:	b005      	add	sp, #20
 8003c88:	bd30      	pop	{r4, r5, pc}

08003c8a <_write>:
 8003c8a:	b570      	push	{r4, r5, r6, lr}
 8003c8c:	460e      	mov	r6, r1
 8003c8e:	4615      	mov	r5, r2
 8003c90:	f7ff ff4a 	bl	8003b28 <findslot>
 8003c94:	4604      	mov	r4, r0
 8003c96:	b930      	cbnz	r0, 8003ca6 <_write+0x1c>
 8003c98:	f7ff f830 	bl	8002cfc <__errno>
 8003c9c:	2309      	movs	r3, #9
 8003c9e:	6003      	str	r3, [r0, #0]
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	bd70      	pop	{r4, r5, r6, pc}
 8003ca6:	462a      	mov	r2, r5
 8003ca8:	4631      	mov	r1, r6
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	f7ff ffdd 	bl	8003c6a <_swiwrite>
 8003cb0:	1e02      	subs	r2, r0, #0
 8003cb2:	dbf5      	blt.n	8003ca0 <_write+0x16>
 8003cb4:	6863      	ldr	r3, [r4, #4]
 8003cb6:	1aa8      	subs	r0, r5, r2
 8003cb8:	4403      	add	r3, r0
 8003cba:	42aa      	cmp	r2, r5
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	d1f1      	bne.n	8003ca4 <_write+0x1a>
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003cc6:	f7ff bf59 	b.w	8003b7c <error>

08003cca <_swiclose>:
 8003cca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ccc:	ad02      	add	r5, sp, #8
 8003cce:	2402      	movs	r4, #2
 8003cd0:	f845 0d04 	str.w	r0, [r5, #-4]!
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	beab      	bkpt	0x00ab
 8003cda:	4604      	mov	r4, r0
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff ff3d 	bl	8003b5c <checkerror>
 8003ce2:	b003      	add	sp, #12
 8003ce4:	bd30      	pop	{r4, r5, pc}
	...

08003ce8 <_close>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4605      	mov	r5, r0
 8003cec:	f7ff ff1c 	bl	8003b28 <findslot>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	b930      	cbnz	r0, 8003d02 <_close+0x1a>
 8003cf4:	f7ff f802 	bl	8002cfc <__errno>
 8003cf8:	2309      	movs	r3, #9
 8003cfa:	6003      	str	r3, [r0, #0]
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	bd38      	pop	{r3, r4, r5, pc}
 8003d02:	3d01      	subs	r5, #1
 8003d04:	2d01      	cmp	r5, #1
 8003d06:	d809      	bhi.n	8003d1c <_close+0x34>
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <_close+0x48>)
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d104      	bne.n	8003d1c <_close+0x34>
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	6003      	str	r3, [r0, #0]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e7f1      	b.n	8003d00 <_close+0x18>
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	f7ff ffd4 	bl	8003cca <_swiclose>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d1ec      	bne.n	8003d00 <_close+0x18>
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	e7e8      	b.n	8003d00 <_close+0x18>
 8003d2e:	bf00      	nop
 8003d30:	2000009c 	.word	0x2000009c

08003d34 <_swistat>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	460c      	mov	r4, r1
 8003d38:	f7ff fef6 	bl	8003b28 <findslot>
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	b930      	cbnz	r0, 8003d4e <_swistat+0x1a>
 8003d40:	f7fe ffdc 	bl	8002cfc <__errno>
 8003d44:	2309      	movs	r3, #9
 8003d46:	6003      	str	r3, [r0, #0]
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d54:	6063      	str	r3, [r4, #4]
 8003d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5a:	6463      	str	r3, [r4, #68]	; 0x44
 8003d5c:	250c      	movs	r5, #12
 8003d5e:	4628      	mov	r0, r5
 8003d60:	4631      	mov	r1, r6
 8003d62:	beab      	bkpt	0x00ab
 8003d64:	4605      	mov	r5, r0
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7ff fef8 	bl	8003b5c <checkerror>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	bf1c      	itt	ne
 8003d70:	6120      	strne	r0, [r4, #16]
 8003d72:	2000      	movne	r0, #0
 8003d74:	e7ea      	b.n	8003d4c <_swistat+0x18>

08003d76 <_fstat>:
 8003d76:	460b      	mov	r3, r1
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	2258      	movs	r2, #88	; 0x58
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe ffe5 	bl	8002d50 <memset>
 8003d86:	4601      	mov	r1, r0
 8003d88:	4620      	mov	r0, r4
 8003d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8e:	f7ff bfd1 	b.w	8003d34 <_swistat>

08003d92 <_isatty>:
 8003d92:	b570      	push	{r4, r5, r6, lr}
 8003d94:	f7ff fec8 	bl	8003b28 <findslot>
 8003d98:	2509      	movs	r5, #9
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	b920      	cbnz	r0, 8003da8 <_isatty+0x16>
 8003d9e:	f7fe ffad 	bl	8002cfc <__errno>
 8003da2:	6005      	str	r5, [r0, #0]
 8003da4:	4620      	mov	r0, r4
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	4628      	mov	r0, r5
 8003daa:	4621      	mov	r1, r4
 8003dac:	beab      	bkpt	0x00ab
 8003dae:	4604      	mov	r4, r0
 8003db0:	2c01      	cmp	r4, #1
 8003db2:	d0f7      	beq.n	8003da4 <_isatty+0x12>
 8003db4:	f7fe ffa2 	bl	8002cfc <__errno>
 8003db8:	2400      	movs	r4, #0
 8003dba:	4606      	mov	r6, r0
 8003dbc:	2513      	movs	r5, #19
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	beab      	bkpt	0x00ab
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	6035      	str	r5, [r6, #0]
 8003dc8:	e7ec      	b.n	8003da4 <_isatty+0x12>
	...

08003dcc <_init>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr

08003dd8 <_fini>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	bf00      	nop
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr
