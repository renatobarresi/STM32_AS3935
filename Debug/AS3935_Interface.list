
AS3935_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f0  080040f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f8  080040f8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000078  08004178  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004178  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa2e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019b1  00000000  00000000  0002aad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002cd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021d2b  00000000  00000000  0002d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fc2  00000000  00000000  0004f1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9010  00000000  00000000  0005719d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001201ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c88  00000000  00000000  00120228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003fc8 	.word	0x08003fc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08003fc8 	.word	0x08003fc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <read_register>:
 *
 * Param -> reg_addr = the address of the register to read
 *
 * Returns -> Should return OK if reading was ok
 */
void read_register(uint8_t reg_addr){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	  uint8_t command = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
	  //Read mode
	  command |= 1 << 6;
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73fb      	strb	r3, [r7, #15]

	  //Address of register
	  command |= reg_addr << 0;
 80005d8:	7bfa      	ldrb	r2, [r7, #15]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4313      	orrs	r3, r2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]

	  //Transmit command to AS3935
	  HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 80005e2:	f107 010f 	add.w	r1, r7, #15
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <read_register+0x58>)
 80005ee:	f001 fb81 	bl	8001cf4 <HAL_SPI_Transmit>

	  //store received value reg_value
	  HAL_SPI_Receive(&hspi1, &reg_value, 1, HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	2201      	movs	r2, #1
 80005f8:	4908      	ldr	r1, [pc, #32]	; (800061c <read_register+0x5c>)
 80005fa:	4807      	ldr	r0, [pc, #28]	; (8000618 <read_register+0x58>)
 80005fc:	f001 fcae 	bl	8001f5c <HAL_SPI_Receive>

#if DEBUG_SH
	  printf("The value of the register %#X is %#X\n", reg_addr, reg_value);
 8000600:	79f9      	ldrb	r1, [r7, #7]
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <read_register+0x5c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <read_register+0x60>)
 800060a:	f002 faed 	bl	8002be8 <iprintf>
#endif
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000194 	.word	0x20000194
 800061c:	2000014c 	.word	0x2000014c
 8000620:	08003fe0 	.word	0x08003fe0

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#if DEBUG_SH
	initialise_monitor_handles();
 8000628:	f003 fc54 	bl	8003ed4 <initialise_monitor_handles>
	printf("AS3935 LIGHTNING DETECTOR\n");
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <main+0x2c>)
 800062e:	f002 fb4f 	bl	8002cd0 <puts>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fae7 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f80d 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f8cb 	bl	80007d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800063e:	f000 f869 	bl	8000714 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000642:	f000 f89d 	bl	8000780 <MX_USART3_UART_Init>
  //Address of register
  command[0] |= 0x09 << 0;

  HAL_SPI_Transmit(&hspi1, command, 2, HAL_MAX_DELAY);
   */
  read_register(0x09);
 8000646:	2009      	movs	r0, #9
 8000648:	f7ff ffba 	bl	80005c0 <read_register>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0x28>
 800064e:	bf00      	nop
 8000650:	08004008 	.word	0x08004008

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fab8 	bl	8002bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <SystemClock_Config+0xb8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a22      	ldr	r2, [pc, #136]	; (800070c <SystemClock_Config+0xb8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <SystemClock_Config+0xb8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <SystemClock_Config+0xbc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <SystemClock_Config+0xbc>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <SystemClock_Config+0xbc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f855 	bl	8001778 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d4:	f000 f8fc 	bl	80008d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fd89 	bl	800120c <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000700:	f000 f8e6 	bl	80008d0 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_SPI1_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_SPI1_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_SPI1_Init+0x64>)
 800073a:	2201      	movs	r2, #1
 800073c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI1_Init+0x64>)
 8000740:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000744:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI1_Init+0x64>)
 8000748:	2218      	movs	r2, #24
 800074a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI1_Init+0x64>)
 8000760:	220a      	movs	r2, #10
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_SPI1_Init+0x64>)
 8000766:	f001 fa61 	bl	8001c2c <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000770:	f000 f8ae 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000194 	.word	0x20000194
 800077c:	40013000 	.word	0x40013000

08000780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART3_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007b8:	f001 ff8c 	bl	80026d4 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f885 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000154 	.word	0x20000154
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_GPIO_Init+0xf4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a35      	ldr	r2, [pc, #212]	; (80008c8 <MX_GPIO_Init+0xf4>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_GPIO_Init+0xf4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_GPIO_Init+0xf4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2e      	ldr	r2, [pc, #184]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <MX_GPIO_Init+0xf4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a20      	ldr	r2, [pc, #128]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_GPIO_Init+0xf8>)
 8000862:	f000 fcb9 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000866:	230c      	movs	r3, #12
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000876:	2307      	movs	r3, #7
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0xf8>)
 8000882:	f000 fb17 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0xf8>)
 80008a0:	f000 fb08 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xf8>)
 80008ba:	f000 fafb 	bl	8000eb4 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_SPI_MspInit+0x84>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d12b      	bne.n	80009aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 800095c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800098a:	23f0      	movs	r3, #240	; 0xf0
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800099a:	2305      	movs	r3, #5
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_SPI_MspInit+0x8c>)
 80009a6:	f000 fa85 	bl	8000eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40013000 	.word	0x40013000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <HAL_UART_MspInit+0xc0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d14a      	bne.n	8000a78 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a36:	2320      	movs	r3, #32
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a46:	2307      	movs	r3, #7
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <HAL_UART_MspInit+0xc8>)
 8000a52:	f000 fa2f 	bl	8000eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <HAL_UART_MspInit+0xcc>)
 8000a74:	f000 fa1e 	bl	8000eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004800 	.word	0x40004800
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f8e0 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x50>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x16>
		heap_end = &end;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <_sbrk+0x50>)
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <_sbrk+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <_sbrk+0x50>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <_sbrk+0x50>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	466a      	mov	r2, sp
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d907      	bls.n	8000b26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b16:	f002 f835 	bl	8002b84 <__errno>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	e006      	b.n	8000b34 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <_sbrk+0x50>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <_sbrk+0x50>)
 8000b30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	200001f8 	.word	0x200001f8

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <SystemInit+0x60>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <SystemInit+0x60>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <SystemInit+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <SystemInit+0x64>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <SystemInit+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <SystemInit+0x64>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <SystemInit+0x64>)
 8000b70:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <SystemInit+0x64>)
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <SystemInit+0x68>)
 8000b7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <SystemInit+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <SystemInit+0x64>)
 8000b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SystemInit+0x60>)
 8000b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b98:	609a      	str	r2, [r3, #8]
#endif
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	24003010 	.word	0x24003010

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bb6:	e003      	b.n	8000bc0 <LoopCopyDataInit>

08000bb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bbe:	3104      	adds	r1, #4

08000bc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bc8:	d3f6      	bcc.n	8000bb8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bcc:	e002      	b.n	8000bd4 <LoopFillZerobss>

08000bce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bd0:	f842 3b04 	str.w	r3, [r2], #4

08000bd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bd8:	d3f9      	bcc.n	8000bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ffb3 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f001 ffd7 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fd1f 	bl	8000624 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bec:	08004100 	.word	0x08004100
  ldr  r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000bf8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000bfc:	200001f4 	.word	0x200001f4

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f90d 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe52 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f917 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f8ed 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	200001ec 	.word	0x200001ec

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200001ec 	.word	0x200001ec

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff47 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff5c 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb0 	bl	8000e08 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e165      	b.n	800119c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8154 	bne.w	8001196 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x4a>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	69b9      	ldr	r1, [r7, #24]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d00b      	beq.n	8000f9a <HAL_GPIO_Init+0xe6>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8e:	2b11      	cmp	r3, #17
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80ae 	beq.w	8001196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b5c      	ldr	r3, [pc, #368]	; (80011b0 <HAL_GPIO_Init+0x2fc>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a5b      	ldr	r2, [pc, #364]	; (80011b0 <HAL_GPIO_Init+0x2fc>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_GPIO_Init+0x2fc>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <HAL_GPIO_Init+0x300>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_GPIO_Init+0x304>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d025      	beq.n	80010ce <HAL_GPIO_Init+0x21a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x308>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d01f      	beq.n	80010ca <HAL_GPIO_Init+0x216>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x212>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_GPIO_Init+0x310>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x20e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	; (80011c8 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x20a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a49      	ldr	r2, [pc, #292]	; (80011cc <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x206>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a48      	ldr	r2, [pc, #288]	; (80011d0 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x202>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00c      	b.n	80010d0 <HAL_GPIO_Init+0x21c>
 80010b6:	2307      	movs	r3, #7
 80010b8:	e00a      	b.n	80010d0 <HAL_GPIO_Init+0x21c>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x21c>
 80010be:	2304      	movs	r3, #4
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x21c>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x21c>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x21c>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x21c>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4934      	ldr	r1, [pc, #208]	; (80011b4 <HAL_GPIO_Init+0x300>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <HAL_GPIO_Init+0x320>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <HAL_GPIO_Init+0x320>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_GPIO_Init+0x320>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113c:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <HAL_GPIO_Init+0x320>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x320>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_GPIO_Init+0x320>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_GPIO_Init+0x320>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_GPIO_Init+0x320>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f ae96 	bls.w	8000ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	3724      	adds	r7, #36	; 0x24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40021400 	.word	0x40021400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0ca      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d90c      	bls.n	8001248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0b6      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001260:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4a57      	ldr	r2, [pc, #348]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800126a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001284:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	494c      	ldr	r1, [pc, #304]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d044      	beq.n	800132c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d119      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e07d      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d003      	beq.n	80012ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e06d      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e065      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f023 0203 	bic.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4933      	ldr	r1, [pc, #204]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fce8 	bl	8000cd0 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fce4 	bl	8000cd0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e04d      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1eb      	bne.n	8001304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d20c      	bcs.n	8001354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e030      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4915      	ldr	r1, [pc, #84]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800136e:	4313      	orrs	r3, r2
 8001370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	490d      	ldr	r1, [pc, #52]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001392:	f000 f851 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 8001396:	4601      	mov	r1, r0
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	fa21 f303 	lsr.w	r3, r1, r3
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fc4a 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00
 80013c4:	40023800 	.word	0x40023800
 80013c8:	08004024 	.word	0x08004024
 80013cc:	20000000 	.word	0x20000000

080013d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013ec:	f7ff fff0 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 80013f0:	4601      	mov	r1, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0a9b      	lsrs	r3, r3, #10
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_RCC_GetPCLK1Freq+0x24>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	08004034 	.word	0x08004034

08001410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001414:	f7ff ffdc 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 8001418:	4601      	mov	r1, r0
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	0b5b      	lsrs	r3, r3, #13
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	4a03      	ldr	r2, [pc, #12]	; (8001434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	08004034 	.word	0x08004034

08001438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001452:	4bc6      	ldr	r3, [pc, #792]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b0c      	cmp	r3, #12
 800145c:	f200 817e 	bhi.w	800175c <HAL_RCC_GetSysClockFreq+0x324>
 8001460:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <HAL_RCC_GetSysClockFreq+0x30>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	0800149d 	.word	0x0800149d
 800146c:	0800175d 	.word	0x0800175d
 8001470:	0800175d 	.word	0x0800175d
 8001474:	0800175d 	.word	0x0800175d
 8001478:	080014a3 	.word	0x080014a3
 800147c:	0800175d 	.word	0x0800175d
 8001480:	0800175d 	.word	0x0800175d
 8001484:	0800175d 	.word	0x0800175d
 8001488:	080014a9 	.word	0x080014a9
 800148c:	0800175d 	.word	0x0800175d
 8001490:	0800175d 	.word	0x0800175d
 8001494:	0800175d 	.word	0x0800175d
 8001498:	08001605 	.word	0x08001605
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800149c:	4bb4      	ldr	r3, [pc, #720]	; (8001770 <HAL_RCC_GetSysClockFreq+0x338>)
 800149e:	613b      	str	r3, [r7, #16]
       break;
 80014a0:	e15f      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a2:	4bb4      	ldr	r3, [pc, #720]	; (8001774 <HAL_RCC_GetSysClockFreq+0x33c>)
 80014a4:	613b      	str	r3, [r7, #16]
      break;
 80014a6:	e15c      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a8:	4bb0      	ldr	r3, [pc, #704]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014b0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b2:	4bae      	ldr	r3, [pc, #696]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d04a      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014be:	4bab      	ldr	r3, [pc, #684]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	099b      	lsrs	r3, r3, #6
 80014c4:	f04f 0400 	mov.w	r4, #0
 80014c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	ea03 0501 	and.w	r5, r3, r1
 80014d4:	ea04 0602 	and.w	r6, r4, r2
 80014d8:	4629      	mov	r1, r5
 80014da:	4632      	mov	r2, r6
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	f04f 0400 	mov.w	r4, #0
 80014e4:	0154      	lsls	r4, r2, #5
 80014e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ea:	014b      	lsls	r3, r1, #5
 80014ec:	4619      	mov	r1, r3
 80014ee:	4622      	mov	r2, r4
 80014f0:	1b49      	subs	r1, r1, r5
 80014f2:	eb62 0206 	sbc.w	r2, r2, r6
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f04f 0400 	mov.w	r4, #0
 80014fe:	0194      	lsls	r4, r2, #6
 8001500:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001504:	018b      	lsls	r3, r1, #6
 8001506:	1a5b      	subs	r3, r3, r1
 8001508:	eb64 0402 	sbc.w	r4, r4, r2
 800150c:	f04f 0100 	mov.w	r1, #0
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	00e2      	lsls	r2, r4, #3
 8001516:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800151a:	00d9      	lsls	r1, r3, #3
 800151c:	460b      	mov	r3, r1
 800151e:	4614      	mov	r4, r2
 8001520:	195b      	adds	r3, r3, r5
 8001522:	eb44 0406 	adc.w	r4, r4, r6
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	0262      	lsls	r2, r4, #9
 8001530:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001534:	0259      	lsls	r1, r3, #9
 8001536:	460b      	mov	r3, r1
 8001538:	4614      	mov	r4, r2
 800153a:	4618      	mov	r0, r3
 800153c:	4621      	mov	r1, r4
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f04f 0400 	mov.w	r4, #0
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	f7fe feba 	bl	80002c0 <__aeabi_uldivmod>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e049      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001554:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	f04f 0400 	mov.w	r4, #0
 800155e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	ea03 0501 	and.w	r5, r3, r1
 800156a:	ea04 0602 	and.w	r6, r4, r2
 800156e:	4629      	mov	r1, r5
 8001570:	4632      	mov	r2, r6
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f04f 0400 	mov.w	r4, #0
 800157a:	0154      	lsls	r4, r2, #5
 800157c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001580:	014b      	lsls	r3, r1, #5
 8001582:	4619      	mov	r1, r3
 8001584:	4622      	mov	r2, r4
 8001586:	1b49      	subs	r1, r1, r5
 8001588:	eb62 0206 	sbc.w	r2, r2, r6
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f04f 0400 	mov.w	r4, #0
 8001594:	0194      	lsls	r4, r2, #6
 8001596:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800159a:	018b      	lsls	r3, r1, #6
 800159c:	1a5b      	subs	r3, r3, r1
 800159e:	eb64 0402 	sbc.w	r4, r4, r2
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	00e2      	lsls	r2, r4, #3
 80015ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015b0:	00d9      	lsls	r1, r3, #3
 80015b2:	460b      	mov	r3, r1
 80015b4:	4614      	mov	r4, r2
 80015b6:	195b      	adds	r3, r3, r5
 80015b8:	eb44 0406 	adc.w	r4, r4, r6
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	02a2      	lsls	r2, r4, #10
 80015c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015ca:	0299      	lsls	r1, r3, #10
 80015cc:	460b      	mov	r3, r1
 80015ce:	4614      	mov	r4, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	4621      	mov	r1, r4
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f04f 0400 	mov.w	r4, #0
 80015da:	461a      	mov	r2, r3
 80015dc:	4623      	mov	r3, r4
 80015de:	f7fe fe6f 	bl	80002c0 <__aeabi_uldivmod>
 80015e2:	4603      	mov	r3, r0
 80015e4:	460c      	mov	r4, r1
 80015e6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015e8:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	3301      	adds	r3, #1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001600:	613b      	str	r3, [r7, #16]
      break;
 8001602:	e0ae      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800160e:	4b57      	ldr	r3, [pc, #348]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d04a      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161a:	4b54      	ldr	r3, [pc, #336]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	099b      	lsrs	r3, r3, #6
 8001620:	f04f 0400 	mov.w	r4, #0
 8001624:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	ea03 0501 	and.w	r5, r3, r1
 8001630:	ea04 0602 	and.w	r6, r4, r2
 8001634:	4629      	mov	r1, r5
 8001636:	4632      	mov	r2, r6
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	f04f 0400 	mov.w	r4, #0
 8001640:	0154      	lsls	r4, r2, #5
 8001642:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001646:	014b      	lsls	r3, r1, #5
 8001648:	4619      	mov	r1, r3
 800164a:	4622      	mov	r2, r4
 800164c:	1b49      	subs	r1, r1, r5
 800164e:	eb62 0206 	sbc.w	r2, r2, r6
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	f04f 0400 	mov.w	r4, #0
 800165a:	0194      	lsls	r4, r2, #6
 800165c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001660:	018b      	lsls	r3, r1, #6
 8001662:	1a5b      	subs	r3, r3, r1
 8001664:	eb64 0402 	sbc.w	r4, r4, r2
 8001668:	f04f 0100 	mov.w	r1, #0
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	00e2      	lsls	r2, r4, #3
 8001672:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001676:	00d9      	lsls	r1, r3, #3
 8001678:	460b      	mov	r3, r1
 800167a:	4614      	mov	r4, r2
 800167c:	195b      	adds	r3, r3, r5
 800167e:	eb44 0406 	adc.w	r4, r4, r6
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	0262      	lsls	r2, r4, #9
 800168c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001690:	0259      	lsls	r1, r3, #9
 8001692:	460b      	mov	r3, r1
 8001694:	4614      	mov	r4, r2
 8001696:	4618      	mov	r0, r3
 8001698:	4621      	mov	r1, r4
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f04f 0400 	mov.w	r4, #0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4623      	mov	r3, r4
 80016a4:	f7fe fe0c 	bl	80002c0 <__aeabi_uldivmod>
 80016a8:	4603      	mov	r3, r0
 80016aa:	460c      	mov	r4, r1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e049      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	f04f 0400 	mov.w	r4, #0
 80016ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	ea03 0501 	and.w	r5, r3, r1
 80016c6:	ea04 0602 	and.w	r6, r4, r2
 80016ca:	4629      	mov	r1, r5
 80016cc:	4632      	mov	r2, r6
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	f04f 0400 	mov.w	r4, #0
 80016d6:	0154      	lsls	r4, r2, #5
 80016d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016dc:	014b      	lsls	r3, r1, #5
 80016de:	4619      	mov	r1, r3
 80016e0:	4622      	mov	r2, r4
 80016e2:	1b49      	subs	r1, r1, r5
 80016e4:	eb62 0206 	sbc.w	r2, r2, r6
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	f04f 0400 	mov.w	r4, #0
 80016f0:	0194      	lsls	r4, r2, #6
 80016f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016f6:	018b      	lsls	r3, r1, #6
 80016f8:	1a5b      	subs	r3, r3, r1
 80016fa:	eb64 0402 	sbc.w	r4, r4, r2
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	00e2      	lsls	r2, r4, #3
 8001708:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800170c:	00d9      	lsls	r1, r3, #3
 800170e:	460b      	mov	r3, r1
 8001710:	4614      	mov	r4, r2
 8001712:	195b      	adds	r3, r3, r5
 8001714:	eb44 0406 	adc.w	r4, r4, r6
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	02a2      	lsls	r2, r4, #10
 8001722:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001726:	0299      	lsls	r1, r3, #10
 8001728:	460b      	mov	r3, r1
 800172a:	4614      	mov	r4, r2
 800172c:	4618      	mov	r0, r3
 800172e:	4621      	mov	r1, r4
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f04f 0400 	mov.w	r4, #0
 8001736:	461a      	mov	r2, r3
 8001738:	4623      	mov	r3, r4
 800173a:	f7fe fdc1 	bl	80002c0 <__aeabi_uldivmod>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_GetSysClockFreq+0x334>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0f1b      	lsrs	r3, r3, #28
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	613b      	str	r3, [r7, #16]
      break;
 800175a:	e002      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_RCC_GetSysClockFreq+0x338>)
 800175e:	613b      	str	r3, [r7, #16]
      break;
 8001760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001762:	693b      	ldr	r3, [r7, #16]
}
 8001764:	4618      	mov	r0, r3
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	00f42400 	.word	0x00f42400
 8001774:	007a1200 	.word	0x007a1200

08001778 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8083 	beq.w	8001898 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001792:	4b95      	ldr	r3, [pc, #596]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b04      	cmp	r3, #4
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800179e:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017aa:	4b8f      	ldr	r3, [pc, #572]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b6:	d00c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b8:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d112      	bne.n	80017ea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d05b      	beq.n	8001896 <HAL_RCC_OscConfig+0x11e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d157      	bne.n	8001896 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e216      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x8a>
 80017f4:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a7b      	ldr	r2, [pc, #492]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e01d      	b.n	800183e <HAL_RCC_OscConfig+0xc6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0xae>
 800180c:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a75      	ldr	r2, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0xc6>
 8001826:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6f      	ldr	r2, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b6d      	ldr	r3, [pc, #436]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6c      	ldr	r2, [pc, #432]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d013      	beq.n	800186e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fa43 	bl	8000cd0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184e:	f7ff fa3f 	bl	8000cd0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1db      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0xd6>
 800186c:	e014      	b.n	8001898 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff fa2f 	bl	8000cd0 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001876:	f7ff fa2b 	bl	8000cd0 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1c7      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0xfe>
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d06f      	beq.n	8001984 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c8:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d11c      	bne.n	800190e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d116      	bne.n	800190e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x180>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e18f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4938      	ldr	r1, [pc, #224]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190c:	e03a      	b.n	8001984 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d020      	beq.n	8001958 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001916:	4b35      	ldr	r3, [pc, #212]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f9d8 	bl	8000cd0 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff f9d4 	bl	8000cd0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e170      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4925      	ldr	r1, [pc, #148]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
 8001956:	e015      	b.n	8001984 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff f9b7 	bl	8000cd0 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff f9b3 	bl	8000cd0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e14f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d037      	beq.n	8001a00 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d016      	beq.n	80019c6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_OscConfig+0x278>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f997 	bl	8000cd0 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff f993 	bl	8000cd0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e12f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x22e>
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_RCC_OscConfig+0x278>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f980 	bl	8000cd0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f97c 	bl	8000cd0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d908      	bls.n	80019f4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e118      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	42470000 	.word	0x42470000
 80019f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	4b8a      	ldr	r3, [pc, #552]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 80019f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e9      	bne.n	80019d4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8097 	beq.w	8001b3c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a7e      	ldr	r2, [pc, #504]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d118      	bne.n	8001a7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4a:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a75      	ldr	r2, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a56:	f7ff f93b 	bl	8000cd0 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7ff f937 	bl	8000cd0 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0d3      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x31a>
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a90:	e01c      	b.n	8001acc <HAL_RCC_OscConfig+0x354>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x33c>
 8001a9a:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a60      	ldr	r2, [pc, #384]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a5d      	ldr	r2, [pc, #372]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0x354>
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a59      	ldr	r2, [pc, #356]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac0:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001ac6:	f023 0304 	bic.w	r3, r3, #4
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d015      	beq.n	8001b00 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f8fc 	bl	8000cd0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff f8f8 	bl	8000cd0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e092      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ee      	beq.n	8001adc <HAL_RCC_OscConfig+0x364>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f8e6 	bl	8000cd0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff f8e2 	bl	8000cd0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e07c      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ee      	bne.n	8001b08 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a3a      	ldr	r2, [pc, #232]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d068      	beq.n	8001c16 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d060      	beq.n	8001c12 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d145      	bne.n	8001be4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f8b7 	bl	8000cd0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f8b3 	bl	8000cd0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e04f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	061b      	lsls	r3, r3, #24
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	071b      	lsls	r3, r3, #28
 8001bb0:	491b      	ldr	r1, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f888 	bl	8000cd0 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f884 	bl	8000cd0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e020      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x44c>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f871 	bl	8000cd0 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff f86d 	bl	8000cd0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e009      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x47a>
 8001c10:	e001      	b.n	8001c16 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40007000 	.word	0x40007000
 8001c28:	42470060 	.word	0x42470060

08001c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e056      	b.n	8001cec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7fe fe69 	bl	8000930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	ea42 0103 	orr.w	r1, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	0c1b      	lsrs	r3, r3, #16
 8001cbc:	f003 0104 	and.w	r1, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_SPI_Transmit+0x22>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e11e      	b.n	8001f54 <HAL_SPI_Transmit+0x260>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d1e:	f7fe ffd7 	bl	8000cd0 <HAL_GetTick>
 8001d22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d002      	beq.n	8001d3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
 8001d36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d38:	e103      	b.n	8001f42 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_SPI_Transmit+0x52>
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d4a:	e0fa      	b.n	8001f42 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	88fa      	ldrh	r2, [r7, #6]
 8001d6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d92:	d107      	bne.n	8001da4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	d007      	beq.n	8001dc2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dca:	d14b      	bne.n	8001e64 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_SPI_Transmit+0xe6>
 8001dd4:	8afb      	ldrh	r3, [r7, #22]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d13e      	bne.n	8001e58 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	881a      	ldrh	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	1c9a      	adds	r2, r3, #2
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dfe:	e02b      	b.n	8001e58 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d112      	bne.n	8001e34 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	881a      	ldrh	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	1c9a      	adds	r2, r3, #2
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e32:	e011      	b.n	8001e58 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e34:	f7fe ff4c 	bl	8000cd0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d803      	bhi.n	8001e4c <HAL_SPI_Transmit+0x158>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4a:	d102      	bne.n	8001e52 <HAL_SPI_Transmit+0x15e>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e56:	e074      	b.n	8001f42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ce      	bne.n	8001e00 <HAL_SPI_Transmit+0x10c>
 8001e62:	e04c      	b.n	8001efe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_SPI_Transmit+0x17e>
 8001e6c:	8afb      	ldrh	r3, [r7, #22]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d140      	bne.n	8001ef4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e98:	e02c      	b.n	8001ef4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d113      	bne.n	8001ed0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ece:	e011      	b.n	8001ef4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed0:	f7fe fefe 	bl	8000cd0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d803      	bhi.n	8001ee8 <HAL_SPI_Transmit+0x1f4>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d102      	bne.n	8001eee <HAL_SPI_Transmit+0x1fa>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ef2:	e026      	b.n	8001f42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1cd      	bne.n	8001e9a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fba4 	bl	8002650 <SPI_EndRxTxTransaction>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	77fb      	strb	r3, [r7, #31]
 8001f3e:	e000      	b.n	8001f42 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001f40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f78:	d112      	bne.n	8001fa0 <HAL_SPI_Receive+0x44>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2204      	movs	r2, #4
 8001f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f8a:	88fa      	ldrh	r2, [r7, #6]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f8e9 	bl	800216e <HAL_SPI_TransmitReceive>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	e0e2      	b.n	8002166 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_SPI_Receive+0x52>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e0db      	b.n	8002166 <HAL_SPI_Receive+0x20a>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fb6:	f7fe fe8b 	bl	8000cd0 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d002      	beq.n	8001fce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fcc:	e0c2      	b.n	8002154 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_SPI_Receive+0x7e>
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fde:	e0b9      	b.n	8002154 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002026:	d107      	bne.n	8002038 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	d007      	beq.n	8002056 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d162      	bne.n	8002124 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800205e:	e02e      	b.n	80020be <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d115      	bne.n	800209a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f103 020c 	add.w	r2, r3, #12
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002098:	e011      	b.n	80020be <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800209a:	f7fe fe19 	bl	8000cd0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d803      	bhi.n	80020b2 <HAL_SPI_Receive+0x156>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d102      	bne.n	80020b8 <HAL_SPI_Receive+0x15c>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020bc:	e04a      	b.n	8002154 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1cb      	bne.n	8002060 <HAL_SPI_Receive+0x104>
 80020c8:	e031      	b.n	800212e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d113      	bne.n	8002100 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	b292      	uxth	r2, r2
 80020e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	1c9a      	adds	r2, r3, #2
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020fe:	e011      	b.n	8002124 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002100:	f7fe fde6 	bl	8000cd0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d803      	bhi.n	8002118 <HAL_SPI_Receive+0x1bc>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d102      	bne.n	800211e <HAL_SPI_Receive+0x1c2>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002122:	e017      	b.n	8002154 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1cd      	bne.n	80020ca <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fa27 	bl	8002586 <SPI_EndRxTransaction>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	75fb      	strb	r3, [r7, #23]
 8002150:	e000      	b.n	8002154 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08c      	sub	sp, #48	; 0x30
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x26>
 8002190:	2302      	movs	r3, #2
 8002192:	e18a      	b.n	80024aa <HAL_SPI_TransmitReceive+0x33c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800219c:	f7fe fd98 	bl	8000cd0 <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d00f      	beq.n	80021de <HAL_SPI_TransmitReceive+0x70>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021c4:	d107      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x68>
 80021ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d003      	beq.n	80021de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021dc:	e15b      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x82>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x82>
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021f6:	e14e      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b04      	cmp	r3, #4
 8002202:	d003      	beq.n	800220c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2205      	movs	r2, #5
 8002208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d007      	beq.n	8002260 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002268:	d178      	bne.n	800235c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x10a>
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d166      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	1c9a      	adds	r2, r3, #2
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229c:	e053      	b.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d11b      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d113      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	1c9a      	adds	r2, r3, #2
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d119      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x1b8>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d014      	beq.n	8002326 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	b292      	uxth	r2, r2
 8002308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	1c9a      	adds	r2, r3, #2
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002326:	f7fe fcd3 	bl	8000cd0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002332:	429a      	cmp	r2, r3
 8002334:	d807      	bhi.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d003      	beq.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002344:	e0a7      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1a6      	bne.n	800229e <HAL_SPI_TransmitReceive+0x130>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1a1      	bne.n	800229e <HAL_SPI_TransmitReceive+0x130>
 800235a:	e07c      	b.n	8002456 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_SPI_TransmitReceive+0x1fc>
 8002364:	8b7b      	ldrh	r3, [r7, #26]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d16b      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002390:	e057      	b.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d11c      	bne.n	80023da <HAL_SPI_TransmitReceive+0x26c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d017      	beq.n	80023da <HAL_SPI_TransmitReceive+0x26c>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d114      	bne.n	80023da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d119      	bne.n	800241c <HAL_SPI_TransmitReceive+0x2ae>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002418:	2301      	movs	r3, #1
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800241c:	f7fe fc58 	bl	8000cd0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002428:	429a      	cmp	r2, r3
 800242a:	d803      	bhi.n	8002434 <HAL_SPI_TransmitReceive+0x2c6>
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d102      	bne.n	800243a <HAL_SPI_TransmitReceive+0x2cc>
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002440:	e029      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1a2      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x224>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d19d      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f8f8 	bl	8002650 <SPI_EndRxTxTransaction>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002472:	e010      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	e000      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024c2:	e04c      	b.n	800255e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d048      	beq.n	800255e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80024cc:	f7fe fc00 	bl	8000cd0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d902      	bls.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d13d      	bne.n	800255e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fa:	d111      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002504:	d004      	beq.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250e:	d107      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002528:	d10f      	bne.n	800254a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e00f      	b.n	800257e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4013      	ands	r3, r2
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	429a      	cmp	r2, r3
 800257a:	d1a3      	bne.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af02      	add	r7, sp, #8
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259a:	d111      	bne.n	80025c0 <SPI_EndRxTransaction+0x3a>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a4:	d004      	beq.n	80025b0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d107      	bne.n	80025c0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c8:	d12a      	bne.n	8002620 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d012      	beq.n	80025fa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff ff67 	bl	80024b2 <SPI_WaitFlagStateUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02d      	beq.n	8002646 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e026      	b.n	8002648 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	2101      	movs	r1, #1
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff ff54 	bl	80024b2 <SPI_WaitFlagStateUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01a      	beq.n	8002646 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e013      	b.n	8002648 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	2101      	movs	r1, #1
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff ff41 	bl	80024b2 <SPI_WaitFlagStateUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e000      	b.n	8002648 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <SPI_EndRxTxTransaction+0x7c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <SPI_EndRxTxTransaction+0x80>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0d5b      	lsrs	r3, r3, #21
 8002668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800267a:	d112      	bne.n	80026a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff ff13 	bl	80024b2 <SPI_WaitFlagStateUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e00f      	b.n	80026c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d0f2      	beq.n	80026a2 <SPI_EndRxTxTransaction+0x52>
 80026bc:	e000      	b.n	80026c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80026be:	bf00      	nop
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	165e9f81 	.word	0x165e9f81

080026d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e03f      	b.n	8002766 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe f960 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f829 	bl	8002770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800272c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800273c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800274c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027b0:	f023 030c 	bic.w	r3, r3, #12
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027dc:	f040 80e4 	bne.w	80029a8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4aab      	ldr	r2, [pc, #684]	; (8002a94 <UART_SetConfig+0x324>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <UART_SetConfig+0x84>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4aaa      	ldr	r2, [pc, #680]	; (8002a98 <UART_SetConfig+0x328>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d16c      	bne.n	80028ce <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027f4:	f7fe fe0c 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009a      	lsls	r2, r3, #2
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4aa3      	ldr	r2, [pc, #652]	; (8002a9c <UART_SetConfig+0x32c>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	011c      	lsls	r4, r3, #4
 8002818:	f7fe fdfa 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 800281c:	4602      	mov	r2, r0
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009a      	lsls	r2, r3, #2
 8002826:	441a      	add	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002832:	f7fe fded 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8002836:	4602      	mov	r2, r0
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	4a93      	ldr	r2, [pc, #588]	; (8002a9c <UART_SetConfig+0x32c>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2264      	movs	r2, #100	; 0x64
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	1aeb      	subs	r3, r5, r3
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <UART_SetConfig+0x32c>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800286e:	441c      	add	r4, r3
 8002870:	f7fe fdce 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8002874:	4602      	mov	r2, r0
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	009a      	lsls	r2, r3, #2
 800287e:	441a      	add	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fbb2 f5f3 	udiv	r5, r2, r3
 800288a:	f7fe fdc1 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 800288e:	4602      	mov	r2, r0
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	4a7d      	ldr	r2, [pc, #500]	; (8002a9c <UART_SetConfig+0x32c>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2264      	movs	r2, #100	; 0x64
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	1aeb      	subs	r3, r5, r3
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	3332      	adds	r3, #50	; 0x32
 80028b8:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <UART_SetConfig+0x32c>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	f003 0207 	and.w	r2, r3, #7
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4422      	add	r2, r4
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e154      	b.n	8002b78 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028ce:	f7fe fd8b 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009a      	lsls	r2, r3, #2
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4a6c      	ldr	r2, [pc, #432]	; (8002a9c <UART_SetConfig+0x32c>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	011c      	lsls	r4, r3, #4
 80028f2:	f7fe fd79 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fbb2 f5f3 	udiv	r5, r2, r3
 800290c:	f7fe fd6c 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002910:	4602      	mov	r2, r0
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009a      	lsls	r2, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	4a5d      	ldr	r2, [pc, #372]	; (8002a9c <UART_SetConfig+0x32c>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	2264      	movs	r2, #100	; 0x64
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	1aeb      	subs	r3, r5, r3
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	3332      	adds	r3, #50	; 0x32
 800293a:	4a58      	ldr	r2, [pc, #352]	; (8002a9c <UART_SetConfig+0x32c>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002948:	441c      	add	r4, r3
 800294a:	f7fe fd4d 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 800294e:	4602      	mov	r2, r0
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009a      	lsls	r2, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fbb2 f5f3 	udiv	r5, r2, r3
 8002964:	f7fe fd40 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002968:	4602      	mov	r2, r0
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009a      	lsls	r2, r3, #2
 8002972:	441a      	add	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	4a47      	ldr	r2, [pc, #284]	; (8002a9c <UART_SetConfig+0x32c>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	2264      	movs	r2, #100	; 0x64
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	1aeb      	subs	r3, r5, r3
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	3332      	adds	r3, #50	; 0x32
 8002992:	4a42      	ldr	r2, [pc, #264]	; (8002a9c <UART_SetConfig+0x32c>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	f003 0207 	and.w	r2, r3, #7
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4422      	add	r2, r4
 80029a4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80029a6:	e0e7      	b.n	8002b78 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <UART_SetConfig+0x324>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <UART_SetConfig+0x24c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <UART_SetConfig+0x328>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d171      	bne.n	8002aa0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80029bc:	f7fe fd28 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009a      	lsls	r2, r3, #2
 80029ca:	441a      	add	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <UART_SetConfig+0x32c>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	011c      	lsls	r4, r3, #4
 80029e0:	f7fe fd16 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009a      	lsls	r2, r3, #2
 80029ee:	441a      	add	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80029fa:	f7fe fd09 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <UART_SetConfig+0x32c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2264      	movs	r2, #100	; 0x64
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	1aeb      	subs	r3, r5, r3
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	3332      	adds	r3, #50	; 0x32
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <UART_SetConfig+0x32c>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	441c      	add	r4, r3
 8002a36:	f7fe fceb 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009a      	lsls	r2, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a50:	f7fe fcde 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009a      	lsls	r2, r3, #2
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <UART_SetConfig+0x32c>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	2264      	movs	r2, #100	; 0x64
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	1aeb      	subs	r3, r5, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	3332      	adds	r3, #50	; 0x32
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <UART_SetConfig+0x32c>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4422      	add	r2, r4
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	e071      	b.n	8002b78 <UART_SetConfig+0x408>
 8002a94:	40011000 	.word	0x40011000
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002aa0:	f7fe fca2 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	009a      	lsls	r2, r3, #2
 8002aae:	441a      	add	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4a31      	ldr	r2, [pc, #196]	; (8002b80 <UART_SetConfig+0x410>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	011c      	lsls	r4, r3, #4
 8002ac4:	f7fe fc90 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009a      	lsls	r2, r3, #2
 8002ad2:	441a      	add	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ade:	f7fe fc83 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009a      	lsls	r2, r3, #2
 8002aec:	441a      	add	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	4a21      	ldr	r2, [pc, #132]	; (8002b80 <UART_SetConfig+0x410>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2264      	movs	r2, #100	; 0x64
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	1aeb      	subs	r3, r5, r3
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	3332      	adds	r3, #50	; 0x32
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <UART_SetConfig+0x410>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b18:	441c      	add	r4, r3
 8002b1a:	f7fe fc65 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009a      	lsls	r2, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b34:	f7fe fc58 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <UART_SetConfig+0x410>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	2264      	movs	r2, #100	; 0x64
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	1aeb      	subs	r3, r5, r3
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	3332      	adds	r3, #50	; 0x32
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <UART_SetConfig+0x410>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	f003 020f 	and.w	r2, r3, #15
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4422      	add	r2, r4
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	e7ff      	b.n	8002b78 <UART_SetConfig+0x408>
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	4e0d      	ldr	r6, [pc, #52]	; (8002bc8 <__libc_init_array+0x38>)
 8002b94:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b96:	1ba4      	subs	r4, r4, r6
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	2500      	movs	r5, #0
 8002b9c:	42a5      	cmp	r5, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	4e0b      	ldr	r6, [pc, #44]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba2:	4c0c      	ldr	r4, [pc, #48]	; (8002bd4 <__libc_init_array+0x44>)
 8002ba4:	f001 fa10 	bl	8003fc8 <_init>
 8002ba8:	1ba4      	subs	r4, r4, r6
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	2500      	movs	r5, #0
 8002bae:	42a5      	cmp	r5, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bb8:	4798      	blx	r3
 8002bba:	3501      	adds	r5, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bc2:	4798      	blx	r3
 8002bc4:	3501      	adds	r5, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	080040f8 	.word	0x080040f8
 8002bcc:	080040f8 	.word	0x080040f8
 8002bd0:	080040f8 	.word	0x080040f8
 8002bd4:	080040fc 	.word	0x080040fc

08002bd8 <memset>:
 8002bd8:	4402      	add	r2, r0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d100      	bne.n	8002be2 <memset+0xa>
 8002be0:	4770      	bx	lr
 8002be2:	f803 1b01 	strb.w	r1, [r3], #1
 8002be6:	e7f9      	b.n	8002bdc <memset+0x4>

08002be8 <iprintf>:
 8002be8:	b40f      	push	{r0, r1, r2, r3}
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <iprintf+0x2c>)
 8002bec:	b513      	push	{r0, r1, r4, lr}
 8002bee:	681c      	ldr	r4, [r3, #0]
 8002bf0:	b124      	cbz	r4, 8002bfc <iprintf+0x14>
 8002bf2:	69a3      	ldr	r3, [r4, #24]
 8002bf4:	b913      	cbnz	r3, 8002bfc <iprintf+0x14>
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 fa22 	bl	8003040 <__sinit>
 8002bfc:	ab05      	add	r3, sp, #20
 8002bfe:	9a04      	ldr	r2, [sp, #16]
 8002c00:	68a1      	ldr	r1, [r4, #8]
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 fbdb 	bl	80033c0 <_vfiprintf_r>
 8002c0a:	b002      	add	sp, #8
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c10:	b004      	add	sp, #16
 8002c12:	4770      	bx	lr
 8002c14:	2000000c 	.word	0x2000000c

08002c18 <_puts_r>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	460e      	mov	r6, r1
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	b118      	cbz	r0, 8002c28 <_puts_r+0x10>
 8002c20:	6983      	ldr	r3, [r0, #24]
 8002c22:	b90b      	cbnz	r3, 8002c28 <_puts_r+0x10>
 8002c24:	f000 fa0c 	bl	8003040 <__sinit>
 8002c28:	69ab      	ldr	r3, [r5, #24]
 8002c2a:	68ac      	ldr	r4, [r5, #8]
 8002c2c:	b913      	cbnz	r3, 8002c34 <_puts_r+0x1c>
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f000 fa06 	bl	8003040 <__sinit>
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <_puts_r+0xac>)
 8002c36:	429c      	cmp	r4, r3
 8002c38:	d117      	bne.n	8002c6a <_puts_r+0x52>
 8002c3a:	686c      	ldr	r4, [r5, #4]
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	071b      	lsls	r3, r3, #28
 8002c40:	d51d      	bpl.n	8002c7e <_puts_r+0x66>
 8002c42:	6923      	ldr	r3, [r4, #16]
 8002c44:	b1db      	cbz	r3, 8002c7e <_puts_r+0x66>
 8002c46:	3e01      	subs	r6, #1
 8002c48:	68a3      	ldr	r3, [r4, #8]
 8002c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	60a3      	str	r3, [r4, #8]
 8002c52:	b9e9      	cbnz	r1, 8002c90 <_puts_r+0x78>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da2e      	bge.n	8002cb6 <_puts_r+0x9e>
 8002c58:	4622      	mov	r2, r4
 8002c5a:	210a      	movs	r1, #10
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f000 f83f 	bl	8002ce0 <__swbuf_r>
 8002c62:	3001      	adds	r0, #1
 8002c64:	d011      	beq.n	8002c8a <_puts_r+0x72>
 8002c66:	200a      	movs	r0, #10
 8002c68:	e011      	b.n	8002c8e <_puts_r+0x76>
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <_puts_r+0xb0>)
 8002c6c:	429c      	cmp	r4, r3
 8002c6e:	d101      	bne.n	8002c74 <_puts_r+0x5c>
 8002c70:	68ac      	ldr	r4, [r5, #8]
 8002c72:	e7e3      	b.n	8002c3c <_puts_r+0x24>
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <_puts_r+0xb4>)
 8002c76:	429c      	cmp	r4, r3
 8002c78:	bf08      	it	eq
 8002c7a:	68ec      	ldreq	r4, [r5, #12]
 8002c7c:	e7de      	b.n	8002c3c <_puts_r+0x24>
 8002c7e:	4621      	mov	r1, r4
 8002c80:	4628      	mov	r0, r5
 8002c82:	f000 f87f 	bl	8002d84 <__swsetup_r>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d0dd      	beq.n	8002c46 <_puts_r+0x2e>
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da04      	bge.n	8002c9e <_puts_r+0x86>
 8002c94:	69a2      	ldr	r2, [r4, #24]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	dc06      	bgt.n	8002ca8 <_puts_r+0x90>
 8002c9a:	290a      	cmp	r1, #10
 8002c9c:	d004      	beq.n	8002ca8 <_puts_r+0x90>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	6022      	str	r2, [r4, #0]
 8002ca4:	7019      	strb	r1, [r3, #0]
 8002ca6:	e7cf      	b.n	8002c48 <_puts_r+0x30>
 8002ca8:	4622      	mov	r2, r4
 8002caa:	4628      	mov	r0, r5
 8002cac:	f000 f818 	bl	8002ce0 <__swbuf_r>
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	d1c9      	bne.n	8002c48 <_puts_r+0x30>
 8002cb4:	e7e9      	b.n	8002c8a <_puts_r+0x72>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	200a      	movs	r0, #10
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	6022      	str	r2, [r4, #0]
 8002cbe:	7018      	strb	r0, [r3, #0]
 8002cc0:	e7e5      	b.n	8002c8e <_puts_r+0x76>
 8002cc2:	bf00      	nop
 8002cc4:	08004060 	.word	0x08004060
 8002cc8:	08004080 	.word	0x08004080
 8002ccc:	08004040 	.word	0x08004040

08002cd0 <puts>:
 8002cd0:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <puts+0xc>)
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	f7ff bf9f 	b.w	8002c18 <_puts_r>
 8002cda:	bf00      	nop
 8002cdc:	2000000c 	.word	0x2000000c

08002ce0 <__swbuf_r>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	460e      	mov	r6, r1
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	b118      	cbz	r0, 8002cf2 <__swbuf_r+0x12>
 8002cea:	6983      	ldr	r3, [r0, #24]
 8002cec:	b90b      	cbnz	r3, 8002cf2 <__swbuf_r+0x12>
 8002cee:	f000 f9a7 	bl	8003040 <__sinit>
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <__swbuf_r+0x98>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	d12a      	bne.n	8002d4e <__swbuf_r+0x6e>
 8002cf8:	686c      	ldr	r4, [r5, #4]
 8002cfa:	69a3      	ldr	r3, [r4, #24]
 8002cfc:	60a3      	str	r3, [r4, #8]
 8002cfe:	89a3      	ldrh	r3, [r4, #12]
 8002d00:	071a      	lsls	r2, r3, #28
 8002d02:	d52e      	bpl.n	8002d62 <__swbuf_r+0x82>
 8002d04:	6923      	ldr	r3, [r4, #16]
 8002d06:	b363      	cbz	r3, 8002d62 <__swbuf_r+0x82>
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	6820      	ldr	r0, [r4, #0]
 8002d0c:	1ac0      	subs	r0, r0, r3
 8002d0e:	6963      	ldr	r3, [r4, #20]
 8002d10:	b2f6      	uxtb	r6, r6
 8002d12:	4283      	cmp	r3, r0
 8002d14:	4637      	mov	r7, r6
 8002d16:	dc04      	bgt.n	8002d22 <__swbuf_r+0x42>
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f000 f926 	bl	8002f6c <_fflush_r>
 8002d20:	bb28      	cbnz	r0, 8002d6e <__swbuf_r+0x8e>
 8002d22:	68a3      	ldr	r3, [r4, #8]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60a3      	str	r3, [r4, #8]
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	701e      	strb	r6, [r3, #0]
 8002d30:	6963      	ldr	r3, [r4, #20]
 8002d32:	3001      	adds	r0, #1
 8002d34:	4283      	cmp	r3, r0
 8002d36:	d004      	beq.n	8002d42 <__swbuf_r+0x62>
 8002d38:	89a3      	ldrh	r3, [r4, #12]
 8002d3a:	07db      	lsls	r3, r3, #31
 8002d3c:	d519      	bpl.n	8002d72 <__swbuf_r+0x92>
 8002d3e:	2e0a      	cmp	r6, #10
 8002d40:	d117      	bne.n	8002d72 <__swbuf_r+0x92>
 8002d42:	4621      	mov	r1, r4
 8002d44:	4628      	mov	r0, r5
 8002d46:	f000 f911 	bl	8002f6c <_fflush_r>
 8002d4a:	b190      	cbz	r0, 8002d72 <__swbuf_r+0x92>
 8002d4c:	e00f      	b.n	8002d6e <__swbuf_r+0x8e>
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <__swbuf_r+0x9c>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	d101      	bne.n	8002d58 <__swbuf_r+0x78>
 8002d54:	68ac      	ldr	r4, [r5, #8]
 8002d56:	e7d0      	b.n	8002cfa <__swbuf_r+0x1a>
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <__swbuf_r+0xa0>)
 8002d5a:	429c      	cmp	r4, r3
 8002d5c:	bf08      	it	eq
 8002d5e:	68ec      	ldreq	r4, [r5, #12]
 8002d60:	e7cb      	b.n	8002cfa <__swbuf_r+0x1a>
 8002d62:	4621      	mov	r1, r4
 8002d64:	4628      	mov	r0, r5
 8002d66:	f000 f80d 	bl	8002d84 <__swsetup_r>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d0cc      	beq.n	8002d08 <__swbuf_r+0x28>
 8002d6e:	f04f 37ff 	mov.w	r7, #4294967295
 8002d72:	4638      	mov	r0, r7
 8002d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08004060 	.word	0x08004060
 8002d7c:	08004080 	.word	0x08004080
 8002d80:	08004040 	.word	0x08004040

08002d84 <__swsetup_r>:
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <__swsetup_r+0xcc>)
 8002d86:	b570      	push	{r4, r5, r6, lr}
 8002d88:	681d      	ldr	r5, [r3, #0]
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	b125      	cbz	r5, 8002d9a <__swsetup_r+0x16>
 8002d90:	69ab      	ldr	r3, [r5, #24]
 8002d92:	b913      	cbnz	r3, 8002d9a <__swsetup_r+0x16>
 8002d94:	4628      	mov	r0, r5
 8002d96:	f000 f953 	bl	8003040 <__sinit>
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <__swsetup_r+0xd0>)
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	d10f      	bne.n	8002dc0 <__swsetup_r+0x3c>
 8002da0:	686c      	ldr	r4, [r5, #4]
 8002da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	0715      	lsls	r5, r2, #28
 8002daa:	d42c      	bmi.n	8002e06 <__swsetup_r+0x82>
 8002dac:	06d0      	lsls	r0, r2, #27
 8002dae:	d411      	bmi.n	8002dd4 <__swsetup_r+0x50>
 8002db0:	2209      	movs	r2, #9
 8002db2:	6032      	str	r2, [r6, #0]
 8002db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db8:	81a3      	strh	r3, [r4, #12]
 8002dba:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbe:	e03e      	b.n	8002e3e <__swsetup_r+0xba>
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <__swsetup_r+0xd4>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d101      	bne.n	8002dca <__swsetup_r+0x46>
 8002dc6:	68ac      	ldr	r4, [r5, #8]
 8002dc8:	e7eb      	b.n	8002da2 <__swsetup_r+0x1e>
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <__swsetup_r+0xd8>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	bf08      	it	eq
 8002dd0:	68ec      	ldreq	r4, [r5, #12]
 8002dd2:	e7e6      	b.n	8002da2 <__swsetup_r+0x1e>
 8002dd4:	0751      	lsls	r1, r2, #29
 8002dd6:	d512      	bpl.n	8002dfe <__swsetup_r+0x7a>
 8002dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dda:	b141      	cbz	r1, 8002dee <__swsetup_r+0x6a>
 8002ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002de0:	4299      	cmp	r1, r3
 8002de2:	d002      	beq.n	8002dea <__swsetup_r+0x66>
 8002de4:	4630      	mov	r0, r6
 8002de6:	f000 fa19 	bl	800321c <_free_r>
 8002dea:	2300      	movs	r3, #0
 8002dec:	6363      	str	r3, [r4, #52]	; 0x34
 8002dee:	89a3      	ldrh	r3, [r4, #12]
 8002df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002df4:	81a3      	strh	r3, [r4, #12]
 8002df6:	2300      	movs	r3, #0
 8002df8:	6063      	str	r3, [r4, #4]
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	6023      	str	r3, [r4, #0]
 8002dfe:	89a3      	ldrh	r3, [r4, #12]
 8002e00:	f043 0308 	orr.w	r3, r3, #8
 8002e04:	81a3      	strh	r3, [r4, #12]
 8002e06:	6923      	ldr	r3, [r4, #16]
 8002e08:	b94b      	cbnz	r3, 8002e1e <__swsetup_r+0x9a>
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e14:	d003      	beq.n	8002e1e <__swsetup_r+0x9a>
 8002e16:	4621      	mov	r1, r4
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f000 f9bf 	bl	800319c <__smakebuf_r>
 8002e1e:	89a2      	ldrh	r2, [r4, #12]
 8002e20:	f012 0301 	ands.w	r3, r2, #1
 8002e24:	d00c      	beq.n	8002e40 <__swsetup_r+0xbc>
 8002e26:	2300      	movs	r3, #0
 8002e28:	60a3      	str	r3, [r4, #8]
 8002e2a:	6963      	ldr	r3, [r4, #20]
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	61a3      	str	r3, [r4, #24]
 8002e30:	6923      	ldr	r3, [r4, #16]
 8002e32:	b953      	cbnz	r3, 8002e4a <__swsetup_r+0xc6>
 8002e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002e3c:	d1ba      	bne.n	8002db4 <__swsetup_r+0x30>
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	0792      	lsls	r2, r2, #30
 8002e42:	bf58      	it	pl
 8002e44:	6963      	ldrpl	r3, [r4, #20]
 8002e46:	60a3      	str	r3, [r4, #8]
 8002e48:	e7f2      	b.n	8002e30 <__swsetup_r+0xac>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e7f7      	b.n	8002e3e <__swsetup_r+0xba>
 8002e4e:	bf00      	nop
 8002e50:	2000000c 	.word	0x2000000c
 8002e54:	08004060 	.word	0x08004060
 8002e58:	08004080 	.word	0x08004080
 8002e5c:	08004040 	.word	0x08004040

08002e60 <__sflush_r>:
 8002e60:	898a      	ldrh	r2, [r1, #12]
 8002e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e66:	4605      	mov	r5, r0
 8002e68:	0710      	lsls	r0, r2, #28
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	d458      	bmi.n	8002f20 <__sflush_r+0xc0>
 8002e6e:	684b      	ldr	r3, [r1, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	dc05      	bgt.n	8002e80 <__sflush_r+0x20>
 8002e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	dc02      	bgt.n	8002e80 <__sflush_r+0x20>
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e82:	2e00      	cmp	r6, #0
 8002e84:	d0f9      	beq.n	8002e7a <__sflush_r+0x1a>
 8002e86:	2300      	movs	r3, #0
 8002e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e8c:	682f      	ldr	r7, [r5, #0]
 8002e8e:	6a21      	ldr	r1, [r4, #32]
 8002e90:	602b      	str	r3, [r5, #0]
 8002e92:	d032      	beq.n	8002efa <__sflush_r+0x9a>
 8002e94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e96:	89a3      	ldrh	r3, [r4, #12]
 8002e98:	075a      	lsls	r2, r3, #29
 8002e9a:	d505      	bpl.n	8002ea8 <__sflush_r+0x48>
 8002e9c:	6863      	ldr	r3, [r4, #4]
 8002e9e:	1ac0      	subs	r0, r0, r3
 8002ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ea2:	b10b      	cbz	r3, 8002ea8 <__sflush_r+0x48>
 8002ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ea6:	1ac0      	subs	r0, r0, r3
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eae:	6a21      	ldr	r1, [r4, #32]
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	47b0      	blx	r6
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	89a3      	ldrh	r3, [r4, #12]
 8002eb8:	d106      	bne.n	8002ec8 <__sflush_r+0x68>
 8002eba:	6829      	ldr	r1, [r5, #0]
 8002ebc:	291d      	cmp	r1, #29
 8002ebe:	d848      	bhi.n	8002f52 <__sflush_r+0xf2>
 8002ec0:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <__sflush_r+0x108>)
 8002ec2:	40ca      	lsrs	r2, r1
 8002ec4:	07d6      	lsls	r6, r2, #31
 8002ec6:	d544      	bpl.n	8002f52 <__sflush_r+0xf2>
 8002ec8:	2200      	movs	r2, #0
 8002eca:	6062      	str	r2, [r4, #4]
 8002ecc:	04d9      	lsls	r1, r3, #19
 8002ece:	6922      	ldr	r2, [r4, #16]
 8002ed0:	6022      	str	r2, [r4, #0]
 8002ed2:	d504      	bpl.n	8002ede <__sflush_r+0x7e>
 8002ed4:	1c42      	adds	r2, r0, #1
 8002ed6:	d101      	bne.n	8002edc <__sflush_r+0x7c>
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	b903      	cbnz	r3, 8002ede <__sflush_r+0x7e>
 8002edc:	6560      	str	r0, [r4, #84]	; 0x54
 8002ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee0:	602f      	str	r7, [r5, #0]
 8002ee2:	2900      	cmp	r1, #0
 8002ee4:	d0c9      	beq.n	8002e7a <__sflush_r+0x1a>
 8002ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eea:	4299      	cmp	r1, r3
 8002eec:	d002      	beq.n	8002ef4 <__sflush_r+0x94>
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f000 f994 	bl	800321c <_free_r>
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	6360      	str	r0, [r4, #52]	; 0x34
 8002ef8:	e7c0      	b.n	8002e7c <__sflush_r+0x1c>
 8002efa:	2301      	movs	r3, #1
 8002efc:	4628      	mov	r0, r5
 8002efe:	47b0      	blx	r6
 8002f00:	1c41      	adds	r1, r0, #1
 8002f02:	d1c8      	bne.n	8002e96 <__sflush_r+0x36>
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0c5      	beq.n	8002e96 <__sflush_r+0x36>
 8002f0a:	2b1d      	cmp	r3, #29
 8002f0c:	d001      	beq.n	8002f12 <__sflush_r+0xb2>
 8002f0e:	2b16      	cmp	r3, #22
 8002f10:	d101      	bne.n	8002f16 <__sflush_r+0xb6>
 8002f12:	602f      	str	r7, [r5, #0]
 8002f14:	e7b1      	b.n	8002e7a <__sflush_r+0x1a>
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	e7ad      	b.n	8002e7c <__sflush_r+0x1c>
 8002f20:	690f      	ldr	r7, [r1, #16]
 8002f22:	2f00      	cmp	r7, #0
 8002f24:	d0a9      	beq.n	8002e7a <__sflush_r+0x1a>
 8002f26:	0793      	lsls	r3, r2, #30
 8002f28:	680e      	ldr	r6, [r1, #0]
 8002f2a:	bf08      	it	eq
 8002f2c:	694b      	ldreq	r3, [r1, #20]
 8002f2e:	600f      	str	r7, [r1, #0]
 8002f30:	bf18      	it	ne
 8002f32:	2300      	movne	r3, #0
 8002f34:	eba6 0807 	sub.w	r8, r6, r7
 8002f38:	608b      	str	r3, [r1, #8]
 8002f3a:	f1b8 0f00 	cmp.w	r8, #0
 8002f3e:	dd9c      	ble.n	8002e7a <__sflush_r+0x1a>
 8002f40:	4643      	mov	r3, r8
 8002f42:	463a      	mov	r2, r7
 8002f44:	6a21      	ldr	r1, [r4, #32]
 8002f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f48:	4628      	mov	r0, r5
 8002f4a:	47b0      	blx	r6
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	dc06      	bgt.n	8002f5e <__sflush_r+0xfe>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f56:	81a3      	strh	r3, [r4, #12]
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	e78e      	b.n	8002e7c <__sflush_r+0x1c>
 8002f5e:	4407      	add	r7, r0
 8002f60:	eba8 0800 	sub.w	r8, r8, r0
 8002f64:	e7e9      	b.n	8002f3a <__sflush_r+0xda>
 8002f66:	bf00      	nop
 8002f68:	20400001 	.word	0x20400001

08002f6c <_fflush_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	690b      	ldr	r3, [r1, #16]
 8002f70:	4605      	mov	r5, r0
 8002f72:	460c      	mov	r4, r1
 8002f74:	b1db      	cbz	r3, 8002fae <_fflush_r+0x42>
 8002f76:	b118      	cbz	r0, 8002f80 <_fflush_r+0x14>
 8002f78:	6983      	ldr	r3, [r0, #24]
 8002f7a:	b90b      	cbnz	r3, 8002f80 <_fflush_r+0x14>
 8002f7c:	f000 f860 	bl	8003040 <__sinit>
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <_fflush_r+0x48>)
 8002f82:	429c      	cmp	r4, r3
 8002f84:	d109      	bne.n	8002f9a <_fflush_r+0x2e>
 8002f86:	686c      	ldr	r4, [r5, #4]
 8002f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f8c:	b17b      	cbz	r3, 8002fae <_fflush_r+0x42>
 8002f8e:	4621      	mov	r1, r4
 8002f90:	4628      	mov	r0, r5
 8002f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f96:	f7ff bf63 	b.w	8002e60 <__sflush_r>
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <_fflush_r+0x4c>)
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	d101      	bne.n	8002fa4 <_fflush_r+0x38>
 8002fa0:	68ac      	ldr	r4, [r5, #8]
 8002fa2:	e7f1      	b.n	8002f88 <_fflush_r+0x1c>
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <_fflush_r+0x50>)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	bf08      	it	eq
 8002faa:	68ec      	ldreq	r4, [r5, #12]
 8002fac:	e7ec      	b.n	8002f88 <_fflush_r+0x1c>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	bd38      	pop	{r3, r4, r5, pc}
 8002fb2:	bf00      	nop
 8002fb4:	08004060 	.word	0x08004060
 8002fb8:	08004080 	.word	0x08004080
 8002fbc:	08004040 	.word	0x08004040

08002fc0 <std>:
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	b510      	push	{r4, lr}
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8002fca:	6083      	str	r3, [r0, #8]
 8002fcc:	8181      	strh	r1, [r0, #12]
 8002fce:	6643      	str	r3, [r0, #100]	; 0x64
 8002fd0:	81c2      	strh	r2, [r0, #14]
 8002fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fd6:	6183      	str	r3, [r0, #24]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	2208      	movs	r2, #8
 8002fdc:	305c      	adds	r0, #92	; 0x5c
 8002fde:	f7ff fdfb 	bl	8002bd8 <memset>
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <std+0x38>)
 8002fe4:	6263      	str	r3, [r4, #36]	; 0x24
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <std+0x3c>)
 8002fe8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <std+0x40>)
 8002fec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <std+0x44>)
 8002ff0:	6224      	str	r4, [r4, #32]
 8002ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ff4:	bd10      	pop	{r4, pc}
 8002ff6:	bf00      	nop
 8002ff8:	0800391d 	.word	0x0800391d
 8002ffc:	0800393f 	.word	0x0800393f
 8003000:	08003977 	.word	0x08003977
 8003004:	0800399b 	.word	0x0800399b

08003008 <_cleanup_r>:
 8003008:	4901      	ldr	r1, [pc, #4]	; (8003010 <_cleanup_r+0x8>)
 800300a:	f000 b885 	b.w	8003118 <_fwalk_reent>
 800300e:	bf00      	nop
 8003010:	08002f6d 	.word	0x08002f6d

08003014 <__sfmoreglue>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	1e4a      	subs	r2, r1, #1
 8003018:	2568      	movs	r5, #104	; 0x68
 800301a:	4355      	muls	r5, r2
 800301c:	460e      	mov	r6, r1
 800301e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003022:	f000 f949 	bl	80032b8 <_malloc_r>
 8003026:	4604      	mov	r4, r0
 8003028:	b140      	cbz	r0, 800303c <__sfmoreglue+0x28>
 800302a:	2100      	movs	r1, #0
 800302c:	e9c0 1600 	strd	r1, r6, [r0]
 8003030:	300c      	adds	r0, #12
 8003032:	60a0      	str	r0, [r4, #8]
 8003034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003038:	f7ff fdce 	bl	8002bd8 <memset>
 800303c:	4620      	mov	r0, r4
 800303e:	bd70      	pop	{r4, r5, r6, pc}

08003040 <__sinit>:
 8003040:	6983      	ldr	r3, [r0, #24]
 8003042:	b510      	push	{r4, lr}
 8003044:	4604      	mov	r4, r0
 8003046:	bb33      	cbnz	r3, 8003096 <__sinit+0x56>
 8003048:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800304c:	6503      	str	r3, [r0, #80]	; 0x50
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <__sinit+0x58>)
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <__sinit+0x5c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6282      	str	r2, [r0, #40]	; 0x28
 8003056:	4298      	cmp	r0, r3
 8003058:	bf04      	itt	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	6183      	streq	r3, [r0, #24]
 800305e:	f000 f81f 	bl	80030a0 <__sfp>
 8003062:	6060      	str	r0, [r4, #4]
 8003064:	4620      	mov	r0, r4
 8003066:	f000 f81b 	bl	80030a0 <__sfp>
 800306a:	60a0      	str	r0, [r4, #8]
 800306c:	4620      	mov	r0, r4
 800306e:	f000 f817 	bl	80030a0 <__sfp>
 8003072:	2200      	movs	r2, #0
 8003074:	60e0      	str	r0, [r4, #12]
 8003076:	2104      	movs	r1, #4
 8003078:	6860      	ldr	r0, [r4, #4]
 800307a:	f7ff ffa1 	bl	8002fc0 <std>
 800307e:	2201      	movs	r2, #1
 8003080:	2109      	movs	r1, #9
 8003082:	68a0      	ldr	r0, [r4, #8]
 8003084:	f7ff ff9c 	bl	8002fc0 <std>
 8003088:	2202      	movs	r2, #2
 800308a:	2112      	movs	r1, #18
 800308c:	68e0      	ldr	r0, [r4, #12]
 800308e:	f7ff ff97 	bl	8002fc0 <std>
 8003092:	2301      	movs	r3, #1
 8003094:	61a3      	str	r3, [r4, #24]
 8003096:	bd10      	pop	{r4, pc}
 8003098:	0800403c 	.word	0x0800403c
 800309c:	08003009 	.word	0x08003009

080030a0 <__sfp>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <__sfp+0x70>)
 80030a4:	681e      	ldr	r6, [r3, #0]
 80030a6:	69b3      	ldr	r3, [r6, #24]
 80030a8:	4607      	mov	r7, r0
 80030aa:	b913      	cbnz	r3, 80030b2 <__sfp+0x12>
 80030ac:	4630      	mov	r0, r6
 80030ae:	f7ff ffc7 	bl	8003040 <__sinit>
 80030b2:	3648      	adds	r6, #72	; 0x48
 80030b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	d503      	bpl.n	80030c4 <__sfp+0x24>
 80030bc:	6833      	ldr	r3, [r6, #0]
 80030be:	b133      	cbz	r3, 80030ce <__sfp+0x2e>
 80030c0:	6836      	ldr	r6, [r6, #0]
 80030c2:	e7f7      	b.n	80030b4 <__sfp+0x14>
 80030c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030c8:	b16d      	cbz	r5, 80030e6 <__sfp+0x46>
 80030ca:	3468      	adds	r4, #104	; 0x68
 80030cc:	e7f4      	b.n	80030b8 <__sfp+0x18>
 80030ce:	2104      	movs	r1, #4
 80030d0:	4638      	mov	r0, r7
 80030d2:	f7ff ff9f 	bl	8003014 <__sfmoreglue>
 80030d6:	6030      	str	r0, [r6, #0]
 80030d8:	2800      	cmp	r0, #0
 80030da:	d1f1      	bne.n	80030c0 <__sfp+0x20>
 80030dc:	230c      	movs	r3, #12
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4604      	mov	r4, r0
 80030e2:	4620      	mov	r0, r4
 80030e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <__sfp+0x74>)
 80030e8:	6665      	str	r5, [r4, #100]	; 0x64
 80030ea:	e9c4 5500 	strd	r5, r5, [r4]
 80030ee:	60a5      	str	r5, [r4, #8]
 80030f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80030f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80030f8:	2208      	movs	r2, #8
 80030fa:	4629      	mov	r1, r5
 80030fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003100:	f7ff fd6a 	bl	8002bd8 <memset>
 8003104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800310c:	e7e9      	b.n	80030e2 <__sfp+0x42>
 800310e:	bf00      	nop
 8003110:	0800403c 	.word	0x0800403c
 8003114:	ffff0001 	.word	0xffff0001

08003118 <_fwalk_reent>:
 8003118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800311c:	4680      	mov	r8, r0
 800311e:	4689      	mov	r9, r1
 8003120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003124:	2600      	movs	r6, #0
 8003126:	b914      	cbnz	r4, 800312e <_fwalk_reent+0x16>
 8003128:	4630      	mov	r0, r6
 800312a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800312e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003132:	3f01      	subs	r7, #1
 8003134:	d501      	bpl.n	800313a <_fwalk_reent+0x22>
 8003136:	6824      	ldr	r4, [r4, #0]
 8003138:	e7f5      	b.n	8003126 <_fwalk_reent+0xe>
 800313a:	89ab      	ldrh	r3, [r5, #12]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d907      	bls.n	8003150 <_fwalk_reent+0x38>
 8003140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003144:	3301      	adds	r3, #1
 8003146:	d003      	beq.n	8003150 <_fwalk_reent+0x38>
 8003148:	4629      	mov	r1, r5
 800314a:	4640      	mov	r0, r8
 800314c:	47c8      	blx	r9
 800314e:	4306      	orrs	r6, r0
 8003150:	3568      	adds	r5, #104	; 0x68
 8003152:	e7ee      	b.n	8003132 <_fwalk_reent+0x1a>

08003154 <__swhatbuf_r>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	460e      	mov	r6, r1
 8003158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315c:	2900      	cmp	r1, #0
 800315e:	b096      	sub	sp, #88	; 0x58
 8003160:	4614      	mov	r4, r2
 8003162:	461d      	mov	r5, r3
 8003164:	da07      	bge.n	8003176 <__swhatbuf_r+0x22>
 8003166:	2300      	movs	r3, #0
 8003168:	602b      	str	r3, [r5, #0]
 800316a:	89b3      	ldrh	r3, [r6, #12]
 800316c:	061a      	lsls	r2, r3, #24
 800316e:	d410      	bmi.n	8003192 <__swhatbuf_r+0x3e>
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	e00e      	b.n	8003194 <__swhatbuf_r+0x40>
 8003176:	466a      	mov	r2, sp
 8003178:	f000 fc36 	bl	80039e8 <_fstat_r>
 800317c:	2800      	cmp	r0, #0
 800317e:	dbf2      	blt.n	8003166 <__swhatbuf_r+0x12>
 8003180:	9a01      	ldr	r2, [sp, #4]
 8003182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003186:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800318a:	425a      	negs	r2, r3
 800318c:	415a      	adcs	r2, r3
 800318e:	602a      	str	r2, [r5, #0]
 8003190:	e7ee      	b.n	8003170 <__swhatbuf_r+0x1c>
 8003192:	2340      	movs	r3, #64	; 0x40
 8003194:	2000      	movs	r0, #0
 8003196:	6023      	str	r3, [r4, #0]
 8003198:	b016      	add	sp, #88	; 0x58
 800319a:	bd70      	pop	{r4, r5, r6, pc}

0800319c <__smakebuf_r>:
 800319c:	898b      	ldrh	r3, [r1, #12]
 800319e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031a0:	079d      	lsls	r5, r3, #30
 80031a2:	4606      	mov	r6, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	d507      	bpl.n	80031b8 <__smakebuf_r+0x1c>
 80031a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	6123      	str	r3, [r4, #16]
 80031b0:	2301      	movs	r3, #1
 80031b2:	6163      	str	r3, [r4, #20]
 80031b4:	b002      	add	sp, #8
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	ab01      	add	r3, sp, #4
 80031ba:	466a      	mov	r2, sp
 80031bc:	f7ff ffca 	bl	8003154 <__swhatbuf_r>
 80031c0:	9900      	ldr	r1, [sp, #0]
 80031c2:	4605      	mov	r5, r0
 80031c4:	4630      	mov	r0, r6
 80031c6:	f000 f877 	bl	80032b8 <_malloc_r>
 80031ca:	b948      	cbnz	r0, 80031e0 <__smakebuf_r+0x44>
 80031cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d0:	059a      	lsls	r2, r3, #22
 80031d2:	d4ef      	bmi.n	80031b4 <__smakebuf_r+0x18>
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	e7e3      	b.n	80031a8 <__smakebuf_r+0xc>
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <__smakebuf_r+0x7c>)
 80031e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	6020      	str	r0, [r4, #0]
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	9b00      	ldr	r3, [sp, #0]
 80031f0:	6163      	str	r3, [r4, #20]
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	6120      	str	r0, [r4, #16]
 80031f6:	b15b      	cbz	r3, 8003210 <__smakebuf_r+0x74>
 80031f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 fc05 	bl	8003a0c <_isatty_r>
 8003202:	b128      	cbz	r0, 8003210 <__smakebuf_r+0x74>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	431d      	orrs	r5, r3
 8003214:	81a5      	strh	r5, [r4, #12]
 8003216:	e7cd      	b.n	80031b4 <__smakebuf_r+0x18>
 8003218:	08003009 	.word	0x08003009

0800321c <_free_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4605      	mov	r5, r0
 8003220:	2900      	cmp	r1, #0
 8003222:	d045      	beq.n	80032b0 <_free_r+0x94>
 8003224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003228:	1f0c      	subs	r4, r1, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	bfb8      	it	lt
 800322e:	18e4      	addlt	r4, r4, r3
 8003230:	f000 fc0e 	bl	8003a50 <__malloc_lock>
 8003234:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <_free_r+0x98>)
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	4610      	mov	r0, r2
 800323a:	b933      	cbnz	r3, 800324a <_free_r+0x2e>
 800323c:	6063      	str	r3, [r4, #4]
 800323e:	6014      	str	r4, [r2, #0]
 8003240:	4628      	mov	r0, r5
 8003242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003246:	f000 bc04 	b.w	8003a52 <__malloc_unlock>
 800324a:	42a3      	cmp	r3, r4
 800324c:	d90c      	bls.n	8003268 <_free_r+0x4c>
 800324e:	6821      	ldr	r1, [r4, #0]
 8003250:	1862      	adds	r2, r4, r1
 8003252:	4293      	cmp	r3, r2
 8003254:	bf04      	itt	eq
 8003256:	681a      	ldreq	r2, [r3, #0]
 8003258:	685b      	ldreq	r3, [r3, #4]
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	bf04      	itt	eq
 800325e:	1852      	addeq	r2, r2, r1
 8003260:	6022      	streq	r2, [r4, #0]
 8003262:	6004      	str	r4, [r0, #0]
 8003264:	e7ec      	b.n	8003240 <_free_r+0x24>
 8003266:	4613      	mov	r3, r2
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	b10a      	cbz	r2, 8003270 <_free_r+0x54>
 800326c:	42a2      	cmp	r2, r4
 800326e:	d9fa      	bls.n	8003266 <_free_r+0x4a>
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	1858      	adds	r0, r3, r1
 8003274:	42a0      	cmp	r0, r4
 8003276:	d10b      	bne.n	8003290 <_free_r+0x74>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	4401      	add	r1, r0
 800327c:	1858      	adds	r0, r3, r1
 800327e:	4282      	cmp	r2, r0
 8003280:	6019      	str	r1, [r3, #0]
 8003282:	d1dd      	bne.n	8003240 <_free_r+0x24>
 8003284:	6810      	ldr	r0, [r2, #0]
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	4401      	add	r1, r0
 800328c:	6019      	str	r1, [r3, #0]
 800328e:	e7d7      	b.n	8003240 <_free_r+0x24>
 8003290:	d902      	bls.n	8003298 <_free_r+0x7c>
 8003292:	230c      	movs	r3, #12
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	e7d3      	b.n	8003240 <_free_r+0x24>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	1821      	adds	r1, r4, r0
 800329c:	428a      	cmp	r2, r1
 800329e:	bf04      	itt	eq
 80032a0:	6811      	ldreq	r1, [r2, #0]
 80032a2:	6852      	ldreq	r2, [r2, #4]
 80032a4:	6062      	str	r2, [r4, #4]
 80032a6:	bf04      	itt	eq
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	605c      	str	r4, [r3, #4]
 80032ae:	e7c7      	b.n	8003240 <_free_r+0x24>
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	bf00      	nop
 80032b4:	20000098 	.word	0x20000098

080032b8 <_malloc_r>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	1ccd      	adds	r5, r1, #3
 80032bc:	f025 0503 	bic.w	r5, r5, #3
 80032c0:	3508      	adds	r5, #8
 80032c2:	2d0c      	cmp	r5, #12
 80032c4:	bf38      	it	cc
 80032c6:	250c      	movcc	r5, #12
 80032c8:	2d00      	cmp	r5, #0
 80032ca:	4606      	mov	r6, r0
 80032cc:	db01      	blt.n	80032d2 <_malloc_r+0x1a>
 80032ce:	42a9      	cmp	r1, r5
 80032d0:	d903      	bls.n	80032da <_malloc_r+0x22>
 80032d2:	230c      	movs	r3, #12
 80032d4:	6033      	str	r3, [r6, #0]
 80032d6:	2000      	movs	r0, #0
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	f000 fbb9 	bl	8003a50 <__malloc_lock>
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <_malloc_r+0xac>)
 80032e0:	6814      	ldr	r4, [r2, #0]
 80032e2:	4621      	mov	r1, r4
 80032e4:	b991      	cbnz	r1, 800330c <_malloc_r+0x54>
 80032e6:	4c20      	ldr	r4, [pc, #128]	; (8003368 <_malloc_r+0xb0>)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	b91b      	cbnz	r3, 80032f4 <_malloc_r+0x3c>
 80032ec:	4630      	mov	r0, r6
 80032ee:	f000 fb05 	bl	80038fc <_sbrk_r>
 80032f2:	6020      	str	r0, [r4, #0]
 80032f4:	4629      	mov	r1, r5
 80032f6:	4630      	mov	r0, r6
 80032f8:	f000 fb00 	bl	80038fc <_sbrk_r>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	d124      	bne.n	800334a <_malloc_r+0x92>
 8003300:	230c      	movs	r3, #12
 8003302:	6033      	str	r3, [r6, #0]
 8003304:	4630      	mov	r0, r6
 8003306:	f000 fba4 	bl	8003a52 <__malloc_unlock>
 800330a:	e7e4      	b.n	80032d6 <_malloc_r+0x1e>
 800330c:	680b      	ldr	r3, [r1, #0]
 800330e:	1b5b      	subs	r3, r3, r5
 8003310:	d418      	bmi.n	8003344 <_malloc_r+0x8c>
 8003312:	2b0b      	cmp	r3, #11
 8003314:	d90f      	bls.n	8003336 <_malloc_r+0x7e>
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	50cd      	str	r5, [r1, r3]
 800331a:	18cc      	adds	r4, r1, r3
 800331c:	4630      	mov	r0, r6
 800331e:	f000 fb98 	bl	8003a52 <__malloc_unlock>
 8003322:	f104 000b 	add.w	r0, r4, #11
 8003326:	1d23      	adds	r3, r4, #4
 8003328:	f020 0007 	bic.w	r0, r0, #7
 800332c:	1ac3      	subs	r3, r0, r3
 800332e:	d0d3      	beq.n	80032d8 <_malloc_r+0x20>
 8003330:	425a      	negs	r2, r3
 8003332:	50e2      	str	r2, [r4, r3]
 8003334:	e7d0      	b.n	80032d8 <_malloc_r+0x20>
 8003336:	428c      	cmp	r4, r1
 8003338:	684b      	ldr	r3, [r1, #4]
 800333a:	bf16      	itet	ne
 800333c:	6063      	strne	r3, [r4, #4]
 800333e:	6013      	streq	r3, [r2, #0]
 8003340:	460c      	movne	r4, r1
 8003342:	e7eb      	b.n	800331c <_malloc_r+0x64>
 8003344:	460c      	mov	r4, r1
 8003346:	6849      	ldr	r1, [r1, #4]
 8003348:	e7cc      	b.n	80032e4 <_malloc_r+0x2c>
 800334a:	1cc4      	adds	r4, r0, #3
 800334c:	f024 0403 	bic.w	r4, r4, #3
 8003350:	42a0      	cmp	r0, r4
 8003352:	d005      	beq.n	8003360 <_malloc_r+0xa8>
 8003354:	1a21      	subs	r1, r4, r0
 8003356:	4630      	mov	r0, r6
 8003358:	f000 fad0 	bl	80038fc <_sbrk_r>
 800335c:	3001      	adds	r0, #1
 800335e:	d0cf      	beq.n	8003300 <_malloc_r+0x48>
 8003360:	6025      	str	r5, [r4, #0]
 8003362:	e7db      	b.n	800331c <_malloc_r+0x64>
 8003364:	20000098 	.word	0x20000098
 8003368:	2000009c 	.word	0x2000009c

0800336c <__sfputc_r>:
 800336c:	6893      	ldr	r3, [r2, #8]
 800336e:	3b01      	subs	r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	b410      	push	{r4}
 8003374:	6093      	str	r3, [r2, #8]
 8003376:	da08      	bge.n	800338a <__sfputc_r+0x1e>
 8003378:	6994      	ldr	r4, [r2, #24]
 800337a:	42a3      	cmp	r3, r4
 800337c:	db01      	blt.n	8003382 <__sfputc_r+0x16>
 800337e:	290a      	cmp	r1, #10
 8003380:	d103      	bne.n	800338a <__sfputc_r+0x1e>
 8003382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003386:	f7ff bcab 	b.w	8002ce0 <__swbuf_r>
 800338a:	6813      	ldr	r3, [r2, #0]
 800338c:	1c58      	adds	r0, r3, #1
 800338e:	6010      	str	r0, [r2, #0]
 8003390:	7019      	strb	r1, [r3, #0]
 8003392:	4608      	mov	r0, r1
 8003394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003398:	4770      	bx	lr

0800339a <__sfputs_r>:
 800339a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339c:	4606      	mov	r6, r0
 800339e:	460f      	mov	r7, r1
 80033a0:	4614      	mov	r4, r2
 80033a2:	18d5      	adds	r5, r2, r3
 80033a4:	42ac      	cmp	r4, r5
 80033a6:	d101      	bne.n	80033ac <__sfputs_r+0x12>
 80033a8:	2000      	movs	r0, #0
 80033aa:	e007      	b.n	80033bc <__sfputs_r+0x22>
 80033ac:	463a      	mov	r2, r7
 80033ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b2:	4630      	mov	r0, r6
 80033b4:	f7ff ffda 	bl	800336c <__sfputc_r>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d1f3      	bne.n	80033a4 <__sfputs_r+0xa>
 80033bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033c0 <_vfiprintf_r>:
 80033c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c4:	460c      	mov	r4, r1
 80033c6:	b09d      	sub	sp, #116	; 0x74
 80033c8:	4617      	mov	r7, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	4606      	mov	r6, r0
 80033ce:	b118      	cbz	r0, 80033d8 <_vfiprintf_r+0x18>
 80033d0:	6983      	ldr	r3, [r0, #24]
 80033d2:	b90b      	cbnz	r3, 80033d8 <_vfiprintf_r+0x18>
 80033d4:	f7ff fe34 	bl	8003040 <__sinit>
 80033d8:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <_vfiprintf_r+0x20c>)
 80033da:	429c      	cmp	r4, r3
 80033dc:	d158      	bne.n	8003490 <_vfiprintf_r+0xd0>
 80033de:	6874      	ldr	r4, [r6, #4]
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	0718      	lsls	r0, r3, #28
 80033e4:	d55e      	bpl.n	80034a4 <_vfiprintf_r+0xe4>
 80033e6:	6923      	ldr	r3, [r4, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d05b      	beq.n	80034a4 <_vfiprintf_r+0xe4>
 80033ec:	2300      	movs	r3, #0
 80033ee:	9309      	str	r3, [sp, #36]	; 0x24
 80033f0:	2320      	movs	r3, #32
 80033f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033f6:	2330      	movs	r3, #48	; 0x30
 80033f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033fc:	9503      	str	r5, [sp, #12]
 80033fe:	f04f 0b01 	mov.w	fp, #1
 8003402:	46b8      	mov	r8, r7
 8003404:	4645      	mov	r5, r8
 8003406:	f815 3b01 	ldrb.w	r3, [r5], #1
 800340a:	b10b      	cbz	r3, 8003410 <_vfiprintf_r+0x50>
 800340c:	2b25      	cmp	r3, #37	; 0x25
 800340e:	d154      	bne.n	80034ba <_vfiprintf_r+0xfa>
 8003410:	ebb8 0a07 	subs.w	sl, r8, r7
 8003414:	d00b      	beq.n	800342e <_vfiprintf_r+0x6e>
 8003416:	4653      	mov	r3, sl
 8003418:	463a      	mov	r2, r7
 800341a:	4621      	mov	r1, r4
 800341c:	4630      	mov	r0, r6
 800341e:	f7ff ffbc 	bl	800339a <__sfputs_r>
 8003422:	3001      	adds	r0, #1
 8003424:	f000 80c2 	beq.w	80035ac <_vfiprintf_r+0x1ec>
 8003428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800342a:	4453      	add	r3, sl
 800342c:	9309      	str	r3, [sp, #36]	; 0x24
 800342e:	f898 3000 	ldrb.w	r3, [r8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80ba 	beq.w	80035ac <_vfiprintf_r+0x1ec>
 8003438:	2300      	movs	r3, #0
 800343a:	f04f 32ff 	mov.w	r2, #4294967295
 800343e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003442:	9304      	str	r3, [sp, #16]
 8003444:	9307      	str	r3, [sp, #28]
 8003446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800344a:	931a      	str	r3, [sp, #104]	; 0x68
 800344c:	46a8      	mov	r8, r5
 800344e:	2205      	movs	r2, #5
 8003450:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003454:	485e      	ldr	r0, [pc, #376]	; (80035d0 <_vfiprintf_r+0x210>)
 8003456:	f7fc fedb 	bl	8000210 <memchr>
 800345a:	9b04      	ldr	r3, [sp, #16]
 800345c:	bb78      	cbnz	r0, 80034be <_vfiprintf_r+0xfe>
 800345e:	06d9      	lsls	r1, r3, #27
 8003460:	bf44      	itt	mi
 8003462:	2220      	movmi	r2, #32
 8003464:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003468:	071a      	lsls	r2, r3, #28
 800346a:	bf44      	itt	mi
 800346c:	222b      	movmi	r2, #43	; 0x2b
 800346e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003472:	782a      	ldrb	r2, [r5, #0]
 8003474:	2a2a      	cmp	r2, #42	; 0x2a
 8003476:	d02a      	beq.n	80034ce <_vfiprintf_r+0x10e>
 8003478:	9a07      	ldr	r2, [sp, #28]
 800347a:	46a8      	mov	r8, r5
 800347c:	2000      	movs	r0, #0
 800347e:	250a      	movs	r5, #10
 8003480:	4641      	mov	r1, r8
 8003482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003486:	3b30      	subs	r3, #48	; 0x30
 8003488:	2b09      	cmp	r3, #9
 800348a:	d969      	bls.n	8003560 <_vfiprintf_r+0x1a0>
 800348c:	b360      	cbz	r0, 80034e8 <_vfiprintf_r+0x128>
 800348e:	e024      	b.n	80034da <_vfiprintf_r+0x11a>
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <_vfiprintf_r+0x214>)
 8003492:	429c      	cmp	r4, r3
 8003494:	d101      	bne.n	800349a <_vfiprintf_r+0xda>
 8003496:	68b4      	ldr	r4, [r6, #8]
 8003498:	e7a2      	b.n	80033e0 <_vfiprintf_r+0x20>
 800349a:	4b4f      	ldr	r3, [pc, #316]	; (80035d8 <_vfiprintf_r+0x218>)
 800349c:	429c      	cmp	r4, r3
 800349e:	bf08      	it	eq
 80034a0:	68f4      	ldreq	r4, [r6, #12]
 80034a2:	e79d      	b.n	80033e0 <_vfiprintf_r+0x20>
 80034a4:	4621      	mov	r1, r4
 80034a6:	4630      	mov	r0, r6
 80034a8:	f7ff fc6c 	bl	8002d84 <__swsetup_r>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d09d      	beq.n	80033ec <_vfiprintf_r+0x2c>
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	b01d      	add	sp, #116	; 0x74
 80034b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ba:	46a8      	mov	r8, r5
 80034bc:	e7a2      	b.n	8003404 <_vfiprintf_r+0x44>
 80034be:	4a44      	ldr	r2, [pc, #272]	; (80035d0 <_vfiprintf_r+0x210>)
 80034c0:	1a80      	subs	r0, r0, r2
 80034c2:	fa0b f000 	lsl.w	r0, fp, r0
 80034c6:	4318      	orrs	r0, r3
 80034c8:	9004      	str	r0, [sp, #16]
 80034ca:	4645      	mov	r5, r8
 80034cc:	e7be      	b.n	800344c <_vfiprintf_r+0x8c>
 80034ce:	9a03      	ldr	r2, [sp, #12]
 80034d0:	1d11      	adds	r1, r2, #4
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	9103      	str	r1, [sp, #12]
 80034d6:	2a00      	cmp	r2, #0
 80034d8:	db01      	blt.n	80034de <_vfiprintf_r+0x11e>
 80034da:	9207      	str	r2, [sp, #28]
 80034dc:	e004      	b.n	80034e8 <_vfiprintf_r+0x128>
 80034de:	4252      	negs	r2, r2
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	9207      	str	r2, [sp, #28]
 80034e6:	9304      	str	r3, [sp, #16]
 80034e8:	f898 3000 	ldrb.w	r3, [r8]
 80034ec:	2b2e      	cmp	r3, #46	; 0x2e
 80034ee:	d10e      	bne.n	800350e <_vfiprintf_r+0x14e>
 80034f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80034f4:	2b2a      	cmp	r3, #42	; 0x2a
 80034f6:	d138      	bne.n	800356a <_vfiprintf_r+0x1aa>
 80034f8:	9b03      	ldr	r3, [sp, #12]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	9203      	str	r2, [sp, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	bfb8      	it	lt
 8003504:	f04f 33ff 	movlt.w	r3, #4294967295
 8003508:	f108 0802 	add.w	r8, r8, #2
 800350c:	9305      	str	r3, [sp, #20]
 800350e:	4d33      	ldr	r5, [pc, #204]	; (80035dc <_vfiprintf_r+0x21c>)
 8003510:	f898 1000 	ldrb.w	r1, [r8]
 8003514:	2203      	movs	r2, #3
 8003516:	4628      	mov	r0, r5
 8003518:	f7fc fe7a 	bl	8000210 <memchr>
 800351c:	b140      	cbz	r0, 8003530 <_vfiprintf_r+0x170>
 800351e:	2340      	movs	r3, #64	; 0x40
 8003520:	1b40      	subs	r0, r0, r5
 8003522:	fa03 f000 	lsl.w	r0, r3, r0
 8003526:	9b04      	ldr	r3, [sp, #16]
 8003528:	4303      	orrs	r3, r0
 800352a:	f108 0801 	add.w	r8, r8, #1
 800352e:	9304      	str	r3, [sp, #16]
 8003530:	f898 1000 	ldrb.w	r1, [r8]
 8003534:	482a      	ldr	r0, [pc, #168]	; (80035e0 <_vfiprintf_r+0x220>)
 8003536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800353a:	2206      	movs	r2, #6
 800353c:	f108 0701 	add.w	r7, r8, #1
 8003540:	f7fc fe66 	bl	8000210 <memchr>
 8003544:	2800      	cmp	r0, #0
 8003546:	d037      	beq.n	80035b8 <_vfiprintf_r+0x1f8>
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <_vfiprintf_r+0x224>)
 800354a:	bb1b      	cbnz	r3, 8003594 <_vfiprintf_r+0x1d4>
 800354c:	9b03      	ldr	r3, [sp, #12]
 800354e:	3307      	adds	r3, #7
 8003550:	f023 0307 	bic.w	r3, r3, #7
 8003554:	3308      	adds	r3, #8
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800355a:	444b      	add	r3, r9
 800355c:	9309      	str	r3, [sp, #36]	; 0x24
 800355e:	e750      	b.n	8003402 <_vfiprintf_r+0x42>
 8003560:	fb05 3202 	mla	r2, r5, r2, r3
 8003564:	2001      	movs	r0, #1
 8003566:	4688      	mov	r8, r1
 8003568:	e78a      	b.n	8003480 <_vfiprintf_r+0xc0>
 800356a:	2300      	movs	r3, #0
 800356c:	f108 0801 	add.w	r8, r8, #1
 8003570:	9305      	str	r3, [sp, #20]
 8003572:	4619      	mov	r1, r3
 8003574:	250a      	movs	r5, #10
 8003576:	4640      	mov	r0, r8
 8003578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800357c:	3a30      	subs	r2, #48	; 0x30
 800357e:	2a09      	cmp	r2, #9
 8003580:	d903      	bls.n	800358a <_vfiprintf_r+0x1ca>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0c3      	beq.n	800350e <_vfiprintf_r+0x14e>
 8003586:	9105      	str	r1, [sp, #20]
 8003588:	e7c1      	b.n	800350e <_vfiprintf_r+0x14e>
 800358a:	fb05 2101 	mla	r1, r5, r1, r2
 800358e:	2301      	movs	r3, #1
 8003590:	4680      	mov	r8, r0
 8003592:	e7f0      	b.n	8003576 <_vfiprintf_r+0x1b6>
 8003594:	ab03      	add	r3, sp, #12
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4622      	mov	r2, r4
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <_vfiprintf_r+0x228>)
 800359c:	a904      	add	r1, sp, #16
 800359e:	4630      	mov	r0, r6
 80035a0:	f3af 8000 	nop.w
 80035a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035a8:	4681      	mov	r9, r0
 80035aa:	d1d5      	bne.n	8003558 <_vfiprintf_r+0x198>
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	065b      	lsls	r3, r3, #25
 80035b0:	f53f af7e 	bmi.w	80034b0 <_vfiprintf_r+0xf0>
 80035b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035b6:	e77d      	b.n	80034b4 <_vfiprintf_r+0xf4>
 80035b8:	ab03      	add	r3, sp, #12
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4622      	mov	r2, r4
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <_vfiprintf_r+0x228>)
 80035c0:	a904      	add	r1, sp, #16
 80035c2:	4630      	mov	r0, r6
 80035c4:	f000 f888 	bl	80036d8 <_printf_i>
 80035c8:	e7ec      	b.n	80035a4 <_vfiprintf_r+0x1e4>
 80035ca:	bf00      	nop
 80035cc:	08004060 	.word	0x08004060
 80035d0:	080040a0 	.word	0x080040a0
 80035d4:	08004080 	.word	0x08004080
 80035d8:	08004040 	.word	0x08004040
 80035dc:	080040a6 	.word	0x080040a6
 80035e0:	080040aa 	.word	0x080040aa
 80035e4:	00000000 	.word	0x00000000
 80035e8:	0800339b 	.word	0x0800339b

080035ec <_printf_common>:
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f0:	4691      	mov	r9, r2
 80035f2:	461f      	mov	r7, r3
 80035f4:	688a      	ldr	r2, [r1, #8]
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bfb8      	it	lt
 8003600:	4613      	movlt	r3, r2
 8003602:	f8c9 3000 	str.w	r3, [r9]
 8003606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800360a:	4606      	mov	r6, r0
 800360c:	460c      	mov	r4, r1
 800360e:	b112      	cbz	r2, 8003616 <_printf_common+0x2a>
 8003610:	3301      	adds	r3, #1
 8003612:	f8c9 3000 	str.w	r3, [r9]
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	0699      	lsls	r1, r3, #26
 800361a:	bf42      	ittt	mi
 800361c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003620:	3302      	addmi	r3, #2
 8003622:	f8c9 3000 	strmi.w	r3, [r9]
 8003626:	6825      	ldr	r5, [r4, #0]
 8003628:	f015 0506 	ands.w	r5, r5, #6
 800362c:	d107      	bne.n	800363e <_printf_common+0x52>
 800362e:	f104 0a19 	add.w	sl, r4, #25
 8003632:	68e3      	ldr	r3, [r4, #12]
 8003634:	f8d9 2000 	ldr.w	r2, [r9]
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	42ab      	cmp	r3, r5
 800363c:	dc28      	bgt.n	8003690 <_printf_common+0xa4>
 800363e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	3300      	adds	r3, #0
 8003646:	bf18      	it	ne
 8003648:	2301      	movne	r3, #1
 800364a:	0692      	lsls	r2, r2, #26
 800364c:	d42d      	bmi.n	80036aa <_printf_common+0xbe>
 800364e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003652:	4639      	mov	r1, r7
 8003654:	4630      	mov	r0, r6
 8003656:	47c0      	blx	r8
 8003658:	3001      	adds	r0, #1
 800365a:	d020      	beq.n	800369e <_printf_common+0xb2>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	68e5      	ldr	r5, [r4, #12]
 8003660:	f8d9 2000 	ldr.w	r2, [r9]
 8003664:	f003 0306 	and.w	r3, r3, #6
 8003668:	2b04      	cmp	r3, #4
 800366a:	bf08      	it	eq
 800366c:	1aad      	subeq	r5, r5, r2
 800366e:	68a3      	ldr	r3, [r4, #8]
 8003670:	6922      	ldr	r2, [r4, #16]
 8003672:	bf0c      	ite	eq
 8003674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003678:	2500      	movne	r5, #0
 800367a:	4293      	cmp	r3, r2
 800367c:	bfc4      	itt	gt
 800367e:	1a9b      	subgt	r3, r3, r2
 8003680:	18ed      	addgt	r5, r5, r3
 8003682:	f04f 0900 	mov.w	r9, #0
 8003686:	341a      	adds	r4, #26
 8003688:	454d      	cmp	r5, r9
 800368a:	d11a      	bne.n	80036c2 <_printf_common+0xd6>
 800368c:	2000      	movs	r0, #0
 800368e:	e008      	b.n	80036a2 <_printf_common+0xb6>
 8003690:	2301      	movs	r3, #1
 8003692:	4652      	mov	r2, sl
 8003694:	4639      	mov	r1, r7
 8003696:	4630      	mov	r0, r6
 8003698:	47c0      	blx	r8
 800369a:	3001      	adds	r0, #1
 800369c:	d103      	bne.n	80036a6 <_printf_common+0xba>
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a6:	3501      	adds	r5, #1
 80036a8:	e7c3      	b.n	8003632 <_printf_common+0x46>
 80036aa:	18e1      	adds	r1, r4, r3
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	2030      	movs	r0, #48	; 0x30
 80036b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036b4:	4422      	add	r2, r4
 80036b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036be:	3302      	adds	r3, #2
 80036c0:	e7c5      	b.n	800364e <_printf_common+0x62>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4622      	mov	r2, r4
 80036c6:	4639      	mov	r1, r7
 80036c8:	4630      	mov	r0, r6
 80036ca:	47c0      	blx	r8
 80036cc:	3001      	adds	r0, #1
 80036ce:	d0e6      	beq.n	800369e <_printf_common+0xb2>
 80036d0:	f109 0901 	add.w	r9, r9, #1
 80036d4:	e7d8      	b.n	8003688 <_printf_common+0x9c>
	...

080036d8 <_printf_i>:
 80036d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80036e0:	460c      	mov	r4, r1
 80036e2:	7e09      	ldrb	r1, [r1, #24]
 80036e4:	b085      	sub	sp, #20
 80036e6:	296e      	cmp	r1, #110	; 0x6e
 80036e8:	4617      	mov	r7, r2
 80036ea:	4606      	mov	r6, r0
 80036ec:	4698      	mov	r8, r3
 80036ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036f0:	f000 80b3 	beq.w	800385a <_printf_i+0x182>
 80036f4:	d822      	bhi.n	800373c <_printf_i+0x64>
 80036f6:	2963      	cmp	r1, #99	; 0x63
 80036f8:	d036      	beq.n	8003768 <_printf_i+0x90>
 80036fa:	d80a      	bhi.n	8003712 <_printf_i+0x3a>
 80036fc:	2900      	cmp	r1, #0
 80036fe:	f000 80b9 	beq.w	8003874 <_printf_i+0x19c>
 8003702:	2958      	cmp	r1, #88	; 0x58
 8003704:	f000 8083 	beq.w	800380e <_printf_i+0x136>
 8003708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800370c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003710:	e032      	b.n	8003778 <_printf_i+0xa0>
 8003712:	2964      	cmp	r1, #100	; 0x64
 8003714:	d001      	beq.n	800371a <_printf_i+0x42>
 8003716:	2969      	cmp	r1, #105	; 0x69
 8003718:	d1f6      	bne.n	8003708 <_printf_i+0x30>
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	6813      	ldr	r3, [r2, #0]
 800371e:	0605      	lsls	r5, r0, #24
 8003720:	f103 0104 	add.w	r1, r3, #4
 8003724:	d52a      	bpl.n	800377c <_printf_i+0xa4>
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6011      	str	r1, [r2, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	da03      	bge.n	8003736 <_printf_i+0x5e>
 800372e:	222d      	movs	r2, #45	; 0x2d
 8003730:	425b      	negs	r3, r3
 8003732:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003736:	486f      	ldr	r0, [pc, #444]	; (80038f4 <_printf_i+0x21c>)
 8003738:	220a      	movs	r2, #10
 800373a:	e039      	b.n	80037b0 <_printf_i+0xd8>
 800373c:	2973      	cmp	r1, #115	; 0x73
 800373e:	f000 809d 	beq.w	800387c <_printf_i+0x1a4>
 8003742:	d808      	bhi.n	8003756 <_printf_i+0x7e>
 8003744:	296f      	cmp	r1, #111	; 0x6f
 8003746:	d020      	beq.n	800378a <_printf_i+0xb2>
 8003748:	2970      	cmp	r1, #112	; 0x70
 800374a:	d1dd      	bne.n	8003708 <_printf_i+0x30>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f043 0320 	orr.w	r3, r3, #32
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	e003      	b.n	800375e <_printf_i+0x86>
 8003756:	2975      	cmp	r1, #117	; 0x75
 8003758:	d017      	beq.n	800378a <_printf_i+0xb2>
 800375a:	2978      	cmp	r1, #120	; 0x78
 800375c:	d1d4      	bne.n	8003708 <_printf_i+0x30>
 800375e:	2378      	movs	r3, #120	; 0x78
 8003760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003764:	4864      	ldr	r0, [pc, #400]	; (80038f8 <_printf_i+0x220>)
 8003766:	e055      	b.n	8003814 <_printf_i+0x13c>
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	1d19      	adds	r1, r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6011      	str	r1, [r2, #0]
 8003770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003778:	2301      	movs	r3, #1
 800377a:	e08c      	b.n	8003896 <_printf_i+0x1be>
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6011      	str	r1, [r2, #0]
 8003780:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003784:	bf18      	it	ne
 8003786:	b21b      	sxthne	r3, r3
 8003788:	e7cf      	b.n	800372a <_printf_i+0x52>
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	6825      	ldr	r5, [r4, #0]
 800378e:	1d18      	adds	r0, r3, #4
 8003790:	6010      	str	r0, [r2, #0]
 8003792:	0628      	lsls	r0, r5, #24
 8003794:	d501      	bpl.n	800379a <_printf_i+0xc2>
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	e002      	b.n	80037a0 <_printf_i+0xc8>
 800379a:	0668      	lsls	r0, r5, #25
 800379c:	d5fb      	bpl.n	8003796 <_printf_i+0xbe>
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	4854      	ldr	r0, [pc, #336]	; (80038f4 <_printf_i+0x21c>)
 80037a2:	296f      	cmp	r1, #111	; 0x6f
 80037a4:	bf14      	ite	ne
 80037a6:	220a      	movne	r2, #10
 80037a8:	2208      	moveq	r2, #8
 80037aa:	2100      	movs	r1, #0
 80037ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037b0:	6865      	ldr	r5, [r4, #4]
 80037b2:	60a5      	str	r5, [r4, #8]
 80037b4:	2d00      	cmp	r5, #0
 80037b6:	f2c0 8095 	blt.w	80038e4 <_printf_i+0x20c>
 80037ba:	6821      	ldr	r1, [r4, #0]
 80037bc:	f021 0104 	bic.w	r1, r1, #4
 80037c0:	6021      	str	r1, [r4, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d13d      	bne.n	8003842 <_printf_i+0x16a>
 80037c6:	2d00      	cmp	r5, #0
 80037c8:	f040 808e 	bne.w	80038e8 <_printf_i+0x210>
 80037cc:	4665      	mov	r5, ip
 80037ce:	2a08      	cmp	r2, #8
 80037d0:	d10b      	bne.n	80037ea <_printf_i+0x112>
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	07db      	lsls	r3, r3, #31
 80037d6:	d508      	bpl.n	80037ea <_printf_i+0x112>
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	6862      	ldr	r2, [r4, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	bfde      	ittt	le
 80037e0:	2330      	movle	r3, #48	; 0x30
 80037e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037ea:	ebac 0305 	sub.w	r3, ip, r5
 80037ee:	6123      	str	r3, [r4, #16]
 80037f0:	f8cd 8000 	str.w	r8, [sp]
 80037f4:	463b      	mov	r3, r7
 80037f6:	aa03      	add	r2, sp, #12
 80037f8:	4621      	mov	r1, r4
 80037fa:	4630      	mov	r0, r6
 80037fc:	f7ff fef6 	bl	80035ec <_printf_common>
 8003800:	3001      	adds	r0, #1
 8003802:	d14d      	bne.n	80038a0 <_printf_i+0x1c8>
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	b005      	add	sp, #20
 800380a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800380e:	4839      	ldr	r0, [pc, #228]	; (80038f4 <_printf_i+0x21c>)
 8003810:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	6821      	ldr	r1, [r4, #0]
 8003818:	1d1d      	adds	r5, r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6015      	str	r5, [r2, #0]
 800381e:	060a      	lsls	r2, r1, #24
 8003820:	d50b      	bpl.n	800383a <_printf_i+0x162>
 8003822:	07ca      	lsls	r2, r1, #31
 8003824:	bf44      	itt	mi
 8003826:	f041 0120 	orrmi.w	r1, r1, #32
 800382a:	6021      	strmi	r1, [r4, #0]
 800382c:	b91b      	cbnz	r3, 8003836 <_printf_i+0x15e>
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	f022 0220 	bic.w	r2, r2, #32
 8003834:	6022      	str	r2, [r4, #0]
 8003836:	2210      	movs	r2, #16
 8003838:	e7b7      	b.n	80037aa <_printf_i+0xd2>
 800383a:	064d      	lsls	r5, r1, #25
 800383c:	bf48      	it	mi
 800383e:	b29b      	uxthmi	r3, r3
 8003840:	e7ef      	b.n	8003822 <_printf_i+0x14a>
 8003842:	4665      	mov	r5, ip
 8003844:	fbb3 f1f2 	udiv	r1, r3, r2
 8003848:	fb02 3311 	mls	r3, r2, r1, r3
 800384c:	5cc3      	ldrb	r3, [r0, r3]
 800384e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003852:	460b      	mov	r3, r1
 8003854:	2900      	cmp	r1, #0
 8003856:	d1f5      	bne.n	8003844 <_printf_i+0x16c>
 8003858:	e7b9      	b.n	80037ce <_printf_i+0xf6>
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	6825      	ldr	r5, [r4, #0]
 800385e:	6961      	ldr	r1, [r4, #20]
 8003860:	1d18      	adds	r0, r3, #4
 8003862:	6010      	str	r0, [r2, #0]
 8003864:	0628      	lsls	r0, r5, #24
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	d501      	bpl.n	800386e <_printf_i+0x196>
 800386a:	6019      	str	r1, [r3, #0]
 800386c:	e002      	b.n	8003874 <_printf_i+0x19c>
 800386e:	066a      	lsls	r2, r5, #25
 8003870:	d5fb      	bpl.n	800386a <_printf_i+0x192>
 8003872:	8019      	strh	r1, [r3, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	6123      	str	r3, [r4, #16]
 8003878:	4665      	mov	r5, ip
 800387a:	e7b9      	b.n	80037f0 <_printf_i+0x118>
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	1d19      	adds	r1, r3, #4
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	681d      	ldr	r5, [r3, #0]
 8003884:	6862      	ldr	r2, [r4, #4]
 8003886:	2100      	movs	r1, #0
 8003888:	4628      	mov	r0, r5
 800388a:	f7fc fcc1 	bl	8000210 <memchr>
 800388e:	b108      	cbz	r0, 8003894 <_printf_i+0x1bc>
 8003890:	1b40      	subs	r0, r0, r5
 8003892:	6060      	str	r0, [r4, #4]
 8003894:	6863      	ldr	r3, [r4, #4]
 8003896:	6123      	str	r3, [r4, #16]
 8003898:	2300      	movs	r3, #0
 800389a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800389e:	e7a7      	b.n	80037f0 <_printf_i+0x118>
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	462a      	mov	r2, r5
 80038a4:	4639      	mov	r1, r7
 80038a6:	4630      	mov	r0, r6
 80038a8:	47c0      	blx	r8
 80038aa:	3001      	adds	r0, #1
 80038ac:	d0aa      	beq.n	8003804 <_printf_i+0x12c>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	079b      	lsls	r3, r3, #30
 80038b2:	d413      	bmi.n	80038dc <_printf_i+0x204>
 80038b4:	68e0      	ldr	r0, [r4, #12]
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	4298      	cmp	r0, r3
 80038ba:	bfb8      	it	lt
 80038bc:	4618      	movlt	r0, r3
 80038be:	e7a3      	b.n	8003808 <_printf_i+0x130>
 80038c0:	2301      	movs	r3, #1
 80038c2:	464a      	mov	r2, r9
 80038c4:	4639      	mov	r1, r7
 80038c6:	4630      	mov	r0, r6
 80038c8:	47c0      	blx	r8
 80038ca:	3001      	adds	r0, #1
 80038cc:	d09a      	beq.n	8003804 <_printf_i+0x12c>
 80038ce:	3501      	adds	r5, #1
 80038d0:	68e3      	ldr	r3, [r4, #12]
 80038d2:	9a03      	ldr	r2, [sp, #12]
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	42ab      	cmp	r3, r5
 80038d8:	dcf2      	bgt.n	80038c0 <_printf_i+0x1e8>
 80038da:	e7eb      	b.n	80038b4 <_printf_i+0x1dc>
 80038dc:	2500      	movs	r5, #0
 80038de:	f104 0919 	add.w	r9, r4, #25
 80038e2:	e7f5      	b.n	80038d0 <_printf_i+0x1f8>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ac      	bne.n	8003842 <_printf_i+0x16a>
 80038e8:	7803      	ldrb	r3, [r0, #0]
 80038ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f2:	e76c      	b.n	80037ce <_printf_i+0xf6>
 80038f4:	080040b1 	.word	0x080040b1
 80038f8:	080040c2 	.word	0x080040c2

080038fc <_sbrk_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4c06      	ldr	r4, [pc, #24]	; (8003918 <_sbrk_r+0x1c>)
 8003900:	2300      	movs	r3, #0
 8003902:	4605      	mov	r5, r0
 8003904:	4608      	mov	r0, r1
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	f7fd f8f0 	bl	8000aec <_sbrk>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d102      	bne.n	8003916 <_sbrk_r+0x1a>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	b103      	cbz	r3, 8003916 <_sbrk_r+0x1a>
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	200001f0 	.word	0x200001f0

0800391c <__sread>:
 800391c:	b510      	push	{r4, lr}
 800391e:	460c      	mov	r4, r1
 8003920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003924:	f000 f896 	bl	8003a54 <_read_r>
 8003928:	2800      	cmp	r0, #0
 800392a:	bfab      	itete	ge
 800392c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800392e:	89a3      	ldrhlt	r3, [r4, #12]
 8003930:	181b      	addge	r3, r3, r0
 8003932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003936:	bfac      	ite	ge
 8003938:	6563      	strge	r3, [r4, #84]	; 0x54
 800393a:	81a3      	strhlt	r3, [r4, #12]
 800393c:	bd10      	pop	{r4, pc}

0800393e <__swrite>:
 800393e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	461f      	mov	r7, r3
 8003944:	898b      	ldrh	r3, [r1, #12]
 8003946:	05db      	lsls	r3, r3, #23
 8003948:	4605      	mov	r5, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4616      	mov	r6, r2
 800394e:	d505      	bpl.n	800395c <__swrite+0x1e>
 8003950:	2302      	movs	r3, #2
 8003952:	2200      	movs	r2, #0
 8003954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003958:	f000 f868 	bl	8003a2c <_lseek_r>
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003966:	81a3      	strh	r3, [r4, #12]
 8003968:	4632      	mov	r2, r6
 800396a:	463b      	mov	r3, r7
 800396c:	4628      	mov	r0, r5
 800396e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003972:	f000 b817 	b.w	80039a4 <_write_r>

08003976 <__sseek>:
 8003976:	b510      	push	{r4, lr}
 8003978:	460c      	mov	r4, r1
 800397a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397e:	f000 f855 	bl	8003a2c <_lseek_r>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	bf15      	itete	ne
 8003988:	6560      	strne	r0, [r4, #84]	; 0x54
 800398a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800398e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003992:	81a3      	strheq	r3, [r4, #12]
 8003994:	bf18      	it	ne
 8003996:	81a3      	strhne	r3, [r4, #12]
 8003998:	bd10      	pop	{r4, pc}

0800399a <__sclose>:
 800399a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800399e:	f000 b813 	b.w	80039c8 <_close_r>
	...

080039a4 <_write_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4c07      	ldr	r4, [pc, #28]	; (80039c4 <_write_r+0x20>)
 80039a8:	4605      	mov	r5, r0
 80039aa:	4608      	mov	r0, r1
 80039ac:	4611      	mov	r1, r2
 80039ae:	2200      	movs	r2, #0
 80039b0:	6022      	str	r2, [r4, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 f911 	bl	8003bda <_write>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_write_r+0x1e>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_write_r+0x1e>
 80039c0:	602b      	str	r3, [r5, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	200001f0 	.word	0x200001f0

080039c8 <_close_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	4c06      	ldr	r4, [pc, #24]	; (80039e4 <_close_r+0x1c>)
 80039cc:	2300      	movs	r3, #0
 80039ce:	4605      	mov	r5, r0
 80039d0:	4608      	mov	r0, r1
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	f000 f930 	bl	8003c38 <_close>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d102      	bne.n	80039e2 <_close_r+0x1a>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	b103      	cbz	r3, 80039e2 <_close_r+0x1a>
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	bd38      	pop	{r3, r4, r5, pc}
 80039e4:	200001f0 	.word	0x200001f0

080039e8 <_fstat_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4c07      	ldr	r4, [pc, #28]	; (8003a08 <_fstat_r+0x20>)
 80039ec:	2300      	movs	r3, #0
 80039ee:	4605      	mov	r5, r0
 80039f0:	4608      	mov	r0, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	f000 f966 	bl	8003cc6 <_fstat>
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	d102      	bne.n	8003a04 <_fstat_r+0x1c>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	b103      	cbz	r3, 8003a04 <_fstat_r+0x1c>
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	bd38      	pop	{r3, r4, r5, pc}
 8003a06:	bf00      	nop
 8003a08:	200001f0 	.word	0x200001f0

08003a0c <_isatty_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4c06      	ldr	r4, [pc, #24]	; (8003a28 <_isatty_r+0x1c>)
 8003a10:	2300      	movs	r3, #0
 8003a12:	4605      	mov	r5, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	f000 faba 	bl	8003f90 <_isatty>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_isatty_r+0x1a>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_isatty_r+0x1a>
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	200001f0 	.word	0x200001f0

08003a2c <_lseek_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4c07      	ldr	r4, [pc, #28]	; (8003a4c <_lseek_r+0x20>)
 8003a30:	4605      	mov	r5, r0
 8003a32:	4608      	mov	r0, r1
 8003a34:	4611      	mov	r1, r2
 8003a36:	2200      	movs	r2, #0
 8003a38:	6022      	str	r2, [r4, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f000 f8bb 	bl	8003bb6 <_lseek>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d102      	bne.n	8003a4a <_lseek_r+0x1e>
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	b103      	cbz	r3, 8003a4a <_lseek_r+0x1e>
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	200001f0 	.word	0x200001f0

08003a50 <__malloc_lock>:
 8003a50:	4770      	bx	lr

08003a52 <__malloc_unlock>:
 8003a52:	4770      	bx	lr

08003a54 <_read_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4c07      	ldr	r4, [pc, #28]	; (8003a74 <_read_r+0x20>)
 8003a58:	4605      	mov	r5, r0
 8003a5a:	4608      	mov	r0, r1
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	2200      	movs	r2, #0
 8003a60:	6022      	str	r2, [r4, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 f850 	bl	8003b08 <_read>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d102      	bne.n	8003a72 <_read_r+0x1e>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	b103      	cbz	r3, 8003a72 <_read_r+0x1e>
 8003a70:	602b      	str	r3, [r5, #0]
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
 8003a74:	200001f0 	.word	0x200001f0

08003a78 <findslot>:
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <findslot+0x2c>)
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	b118      	cbz	r0, 8003a8a <findslot+0x12>
 8003a82:	6983      	ldr	r3, [r0, #24]
 8003a84:	b90b      	cbnz	r3, 8003a8a <findslot+0x12>
 8003a86:	f7ff fadb 	bl	8003040 <__sinit>
 8003a8a:	2c13      	cmp	r4, #19
 8003a8c:	d807      	bhi.n	8003a9e <findslot+0x26>
 8003a8e:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <findslot+0x30>)
 8003a90:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8003a94:	3301      	adds	r3, #1
 8003a96:	d002      	beq.n	8003a9e <findslot+0x26>
 8003a98:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e7fc      	b.n	8003a9c <findslot+0x24>
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c
 8003aa8:	200000ac 	.word	0x200000ac

08003aac <checkerror>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	1c43      	adds	r3, r0, #1
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	d109      	bne.n	8003ac8 <checkerror+0x1c>
 8003ab4:	f7ff f866 	bl	8002b84 <__errno>
 8003ab8:	2413      	movs	r4, #19
 8003aba:	4606      	mov	r6, r0
 8003abc:	2700      	movs	r7, #0
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4639      	mov	r1, r7
 8003ac2:	beab      	bkpt	0x00ab
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	6034      	str	r4, [r6, #0]
 8003ac8:	4628      	mov	r0, r5
 8003aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003acc <error>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	4605      	mov	r5, r0
 8003ad0:	f7ff f858 	bl	8002b84 <__errno>
 8003ad4:	2413      	movs	r4, #19
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	2700      	movs	r7, #0
 8003ada:	4620      	mov	r0, r4
 8003adc:	4639      	mov	r1, r7
 8003ade:	beab      	bkpt	0x00ab
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	6034      	str	r4, [r6, #0]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ae8 <_swiread>:
 8003ae8:	b530      	push	{r4, r5, lr}
 8003aea:	b085      	sub	sp, #20
 8003aec:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003af0:	9203      	str	r2, [sp, #12]
 8003af2:	2406      	movs	r4, #6
 8003af4:	ad01      	add	r5, sp, #4
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	beab      	bkpt	0x00ab
 8003afc:	4604      	mov	r4, r0
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7ff ffd4 	bl	8003aac <checkerror>
 8003b04:	b005      	add	sp, #20
 8003b06:	bd30      	pop	{r4, r5, pc}

08003b08 <_read>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	460e      	mov	r6, r1
 8003b0c:	4615      	mov	r5, r2
 8003b0e:	f7ff ffb3 	bl	8003a78 <findslot>
 8003b12:	4604      	mov	r4, r0
 8003b14:	b930      	cbnz	r0, 8003b24 <_read+0x1c>
 8003b16:	f7ff f835 	bl	8002b84 <__errno>
 8003b1a:	2309      	movs	r3, #9
 8003b1c:	6003      	str	r3, [r0, #0]
 8003b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	462a      	mov	r2, r5
 8003b26:	4631      	mov	r1, r6
 8003b28:	6800      	ldr	r0, [r0, #0]
 8003b2a:	f7ff ffdd 	bl	8003ae8 <_swiread>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	bf1f      	itttt	ne
 8003b32:	6863      	ldrne	r3, [r4, #4]
 8003b34:	1a28      	subne	r0, r5, r0
 8003b36:	181b      	addne	r3, r3, r0
 8003b38:	6063      	strne	r3, [r4, #4]
 8003b3a:	e7f2      	b.n	8003b22 <_read+0x1a>

08003b3c <_swilseek>:
 8003b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b3e:	460c      	mov	r4, r1
 8003b40:	4616      	mov	r6, r2
 8003b42:	f7ff ff99 	bl	8003a78 <findslot>
 8003b46:	4605      	mov	r5, r0
 8003b48:	b940      	cbnz	r0, 8003b5c <_swilseek+0x20>
 8003b4a:	f7ff f81b 	bl	8002b84 <__errno>
 8003b4e:	2309      	movs	r3, #9
 8003b50:	6003      	str	r3, [r0, #0]
 8003b52:	f04f 34ff 	mov.w	r4, #4294967295
 8003b56:	4620      	mov	r0, r4
 8003b58:	b003      	add	sp, #12
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5c:	2e02      	cmp	r6, #2
 8003b5e:	d903      	bls.n	8003b68 <_swilseek+0x2c>
 8003b60:	f7ff f810 	bl	8002b84 <__errno>
 8003b64:	2316      	movs	r3, #22
 8003b66:	e7f3      	b.n	8003b50 <_swilseek+0x14>
 8003b68:	2e01      	cmp	r6, #1
 8003b6a:	d112      	bne.n	8003b92 <_swilseek+0x56>
 8003b6c:	6843      	ldr	r3, [r0, #4]
 8003b6e:	18e4      	adds	r4, r4, r3
 8003b70:	d4f6      	bmi.n	8003b60 <_swilseek+0x24>
 8003b72:	682b      	ldr	r3, [r5, #0]
 8003b74:	260a      	movs	r6, #10
 8003b76:	e9cd 3400 	strd	r3, r4, [sp]
 8003b7a:	466f      	mov	r7, sp
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	4639      	mov	r1, r7
 8003b80:	beab      	bkpt	0x00ab
 8003b82:	4606      	mov	r6, r0
 8003b84:	4630      	mov	r0, r6
 8003b86:	f7ff ff91 	bl	8003aac <checkerror>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	dbe1      	blt.n	8003b52 <_swilseek+0x16>
 8003b8e:	606c      	str	r4, [r5, #4]
 8003b90:	e7e1      	b.n	8003b56 <_swilseek+0x1a>
 8003b92:	2e02      	cmp	r6, #2
 8003b94:	d1ed      	bne.n	8003b72 <_swilseek+0x36>
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	6803      	ldr	r3, [r0, #0]
 8003b9a:	f847 3d08 	str.w	r3, [r7, #-8]!
 8003b9e:	260c      	movs	r6, #12
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	beab      	bkpt	0x00ab
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f7ff ff7f 	bl	8003aac <checkerror>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d0cf      	beq.n	8003b52 <_swilseek+0x16>
 8003bb2:	4404      	add	r4, r0
 8003bb4:	e7dd      	b.n	8003b72 <_swilseek+0x36>

08003bb6 <_lseek>:
 8003bb6:	f7ff bfc1 	b.w	8003b3c <_swilseek>

08003bba <_swiwrite>:
 8003bba:	b530      	push	{r4, r5, lr}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003bc2:	9203      	str	r2, [sp, #12]
 8003bc4:	2405      	movs	r4, #5
 8003bc6:	ad01      	add	r5, sp, #4
 8003bc8:	4620      	mov	r0, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	beab      	bkpt	0x00ab
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f7ff ff6b 	bl	8003aac <checkerror>
 8003bd6:	b005      	add	sp, #20
 8003bd8:	bd30      	pop	{r4, r5, pc}

08003bda <_write>:
 8003bda:	b570      	push	{r4, r5, r6, lr}
 8003bdc:	460e      	mov	r6, r1
 8003bde:	4615      	mov	r5, r2
 8003be0:	f7ff ff4a 	bl	8003a78 <findslot>
 8003be4:	4604      	mov	r4, r0
 8003be6:	b930      	cbnz	r0, 8003bf6 <_write+0x1c>
 8003be8:	f7fe ffcc 	bl	8002b84 <__errno>
 8003bec:	2309      	movs	r3, #9
 8003bee:	6003      	str	r3, [r0, #0]
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	6800      	ldr	r0, [r0, #0]
 8003bfc:	f7ff ffdd 	bl	8003bba <_swiwrite>
 8003c00:	1e02      	subs	r2, r0, #0
 8003c02:	dbf5      	blt.n	8003bf0 <_write+0x16>
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	1aa8      	subs	r0, r5, r2
 8003c08:	4403      	add	r3, r0
 8003c0a:	42aa      	cmp	r2, r5
 8003c0c:	6063      	str	r3, [r4, #4]
 8003c0e:	d1f1      	bne.n	8003bf4 <_write+0x1a>
 8003c10:	2000      	movs	r0, #0
 8003c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c16:	f7ff bf59 	b.w	8003acc <error>

08003c1a <_swiclose>:
 8003c1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c1c:	ad02      	add	r5, sp, #8
 8003c1e:	2402      	movs	r4, #2
 8003c20:	f845 0d04 	str.w	r0, [r5, #-4]!
 8003c24:	4620      	mov	r0, r4
 8003c26:	4629      	mov	r1, r5
 8003c28:	beab      	bkpt	0x00ab
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff ff3d 	bl	8003aac <checkerror>
 8003c32:	b003      	add	sp, #12
 8003c34:	bd30      	pop	{r4, r5, pc}
	...

08003c38 <_close>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	f7ff ff1c 	bl	8003a78 <findslot>
 8003c40:	4604      	mov	r4, r0
 8003c42:	b930      	cbnz	r0, 8003c52 <_close+0x1a>
 8003c44:	f7fe ff9e 	bl	8002b84 <__errno>
 8003c48:	2309      	movs	r3, #9
 8003c4a:	6003      	str	r3, [r0, #0]
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	3d01      	subs	r5, #1
 8003c54:	2d01      	cmp	r5, #1
 8003c56:	d809      	bhi.n	8003c6c <_close+0x34>
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <_close+0x48>)
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d104      	bne.n	8003c6c <_close+0x34>
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	6003      	str	r3, [r0, #0]
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e7f1      	b.n	8003c50 <_close+0x18>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	f7ff ffd4 	bl	8003c1a <_swiclose>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d1ec      	bne.n	8003c50 <_close+0x18>
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	e7e8      	b.n	8003c50 <_close+0x18>
 8003c7e:	bf00      	nop
 8003c80:	200000ac 	.word	0x200000ac

08003c84 <_swistat>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	460c      	mov	r4, r1
 8003c88:	f7ff fef6 	bl	8003a78 <findslot>
 8003c8c:	4606      	mov	r6, r0
 8003c8e:	b930      	cbnz	r0, 8003c9e <_swistat+0x1a>
 8003c90:	f7fe ff78 	bl	8002b84 <__errno>
 8003c94:	2309      	movs	r3, #9
 8003c96:	6003      	str	r3, [r0, #0]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ca4:	6063      	str	r3, [r4, #4]
 8003ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003caa:	6463      	str	r3, [r4, #68]	; 0x44
 8003cac:	250c      	movs	r5, #12
 8003cae:	4628      	mov	r0, r5
 8003cb0:	4631      	mov	r1, r6
 8003cb2:	beab      	bkpt	0x00ab
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f7ff fef8 	bl	8003aac <checkerror>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	bf1c      	itt	ne
 8003cc0:	6120      	strne	r0, [r4, #16]
 8003cc2:	2000      	movne	r0, #0
 8003cc4:	e7ea      	b.n	8003c9c <_swistat+0x18>

08003cc6 <_fstat>:
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4604      	mov	r4, r0
 8003cce:	2258      	movs	r2, #88	; 0x58
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe ff81 	bl	8002bd8 <memset>
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	4620      	mov	r0, r4
 8003cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cde:	f7ff bfd1 	b.w	8003c84 <_swistat>

08003ce2 <_stat>:
 8003ce2:	b538      	push	{r3, r4, r5, lr}
 8003ce4:	460d      	mov	r5, r1
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	2258      	movs	r2, #88	; 0x58
 8003cea:	2100      	movs	r1, #0
 8003cec:	4628      	mov	r0, r5
 8003cee:	f7fe ff73 	bl	8002bd8 <memset>
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	f000 f811 	bl	8003d1c <_swiopen>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	d00b      	beq.n	8003d18 <_stat+0x36>
 8003d00:	686b      	ldr	r3, [r5, #4]
 8003d02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d06:	606b      	str	r3, [r5, #4]
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f7ff ffbb 	bl	8003c84 <_swistat>
 8003d0e:	4605      	mov	r5, r0
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7ff ff91 	bl	8003c38 <_close>
 8003d16:	462c      	mov	r4, r5
 8003d18:	4620      	mov	r0, r4
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}

08003d1c <_swiopen>:
 8003d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <_swiopen+0xb4>)
 8003d22:	b096      	sub	sp, #88	; 0x58
 8003d24:	4682      	mov	sl, r0
 8003d26:	460e      	mov	r6, r1
 8003d28:	2500      	movs	r5, #0
 8003d2a:	4698      	mov	r8, r3
 8003d2c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8003d30:	1c61      	adds	r1, r4, #1
 8003d32:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8003d36:	d036      	beq.n	8003da6 <_swiopen+0x8a>
 8003d38:	3501      	adds	r5, #1
 8003d3a:	2d14      	cmp	r5, #20
 8003d3c:	d1f6      	bne.n	8003d2c <_swiopen+0x10>
 8003d3e:	f7fe ff21 	bl	8002b84 <__errno>
 8003d42:	2318      	movs	r3, #24
 8003d44:	6003      	str	r3, [r0, #0]
 8003d46:	f04f 34ff 	mov.w	r4, #4294967295
 8003d4a:	e03c      	b.n	8003dc6 <_swiopen+0xaa>
 8003d4c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003d50:	f240 6301 	movw	r3, #1537	; 0x601
 8003d54:	07b2      	lsls	r2, r6, #30
 8003d56:	bf48      	it	mi
 8003d58:	f044 0402 	orrmi.w	r4, r4, #2
 8003d5c:	421e      	tst	r6, r3
 8003d5e:	bf18      	it	ne
 8003d60:	f044 0404 	orrne.w	r4, r4, #4
 8003d64:	0733      	lsls	r3, r6, #28
 8003d66:	bf48      	it	mi
 8003d68:	f024 0404 	bicmi.w	r4, r4, #4
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	bf48      	it	mi
 8003d70:	f044 0408 	orrmi.w	r4, r4, #8
 8003d74:	f8cd a000 	str.w	sl, [sp]
 8003d78:	f7fc fa9a 	bl	80002b0 <strlen>
 8003d7c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003d80:	2401      	movs	r4, #1
 8003d82:	4620      	mov	r0, r4
 8003d84:	4649      	mov	r1, r9
 8003d86:	beab      	bkpt	0x00ab
 8003d88:	4604      	mov	r4, r0
 8003d8a:	2c00      	cmp	r4, #0
 8003d8c:	db06      	blt.n	8003d9c <_swiopen+0x80>
 8003d8e:	4447      	add	r7, r8
 8003d90:	2300      	movs	r3, #0
 8003d92:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003d96:	607b      	str	r3, [r7, #4]
 8003d98:	462c      	mov	r4, r5
 8003d9a:	e014      	b.n	8003dc6 <_swiopen+0xaa>
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7ff fe95 	bl	8003acc <error>
 8003da2:	4604      	mov	r4, r0
 8003da4:	e00f      	b.n	8003dc6 <_swiopen+0xaa>
 8003da6:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003daa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003dae:	46e9      	mov	r9, sp
 8003db0:	d1cc      	bne.n	8003d4c <_swiopen+0x30>
 8003db2:	4649      	mov	r1, r9
 8003db4:	4650      	mov	r0, sl
 8003db6:	f7ff ff94 	bl	8003ce2 <_stat>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d0c6      	beq.n	8003d4c <_swiopen+0x30>
 8003dbe:	f7fe fee1 	bl	8002b84 <__errno>
 8003dc2:	2311      	movs	r3, #17
 8003dc4:	6003      	str	r3, [r0, #0]
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	b016      	add	sp, #88	; 0x58
 8003dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dce:	bf00      	nop
 8003dd0:	200000ac 	.word	0x200000ac

08003dd4 <_get_semihosting_exts>:
 8003dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003dd8:	4607      	mov	r7, r0
 8003dda:	4688      	mov	r8, r1
 8003ddc:	4829      	ldr	r0, [pc, #164]	; (8003e84 <_get_semihosting_exts+0xb0>)
 8003dde:	2100      	movs	r1, #0
 8003de0:	4615      	mov	r5, r2
 8003de2:	f7ff ff9b 	bl	8003d1c <_swiopen>
 8003de6:	462a      	mov	r2, r5
 8003de8:	4604      	mov	r4, r0
 8003dea:	2100      	movs	r1, #0
 8003dec:	4638      	mov	r0, r7
 8003dee:	f7fe fef3 	bl	8002bd8 <memset>
 8003df2:	1c63      	adds	r3, r4, #1
 8003df4:	d015      	beq.n	8003e22 <_get_semihosting_exts+0x4e>
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7ff fe3e 	bl	8003a78 <findslot>
 8003dfc:	260c      	movs	r6, #12
 8003dfe:	4681      	mov	r9, r0
 8003e00:	4630      	mov	r0, r6
 8003e02:	4649      	mov	r1, r9
 8003e04:	beab      	bkpt	0x00ab
 8003e06:	4606      	mov	r6, r0
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f7ff fe4f 	bl	8003aac <checkerror>
 8003e0e:	2803      	cmp	r0, #3
 8003e10:	dd02      	ble.n	8003e18 <_get_semihosting_exts+0x44>
 8003e12:	3803      	subs	r0, #3
 8003e14:	42a8      	cmp	r0, r5
 8003e16:	dc08      	bgt.n	8003e2a <_get_semihosting_exts+0x56>
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f7ff ff0d 	bl	8003c38 <_close>
 8003e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e22:	4620      	mov	r0, r4
 8003e24:	b003      	add	sp, #12
 8003e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	eb0d 0102 	add.w	r1, sp, r2
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7ff fe69 	bl	8003b08 <_read>
 8003e36:	2803      	cmp	r0, #3
 8003e38:	ddee      	ble.n	8003e18 <_get_semihosting_exts+0x44>
 8003e3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e3e:	2b53      	cmp	r3, #83	; 0x53
 8003e40:	d1ea      	bne.n	8003e18 <_get_semihosting_exts+0x44>
 8003e42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e46:	2b48      	cmp	r3, #72	; 0x48
 8003e48:	d1e6      	bne.n	8003e18 <_get_semihosting_exts+0x44>
 8003e4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e4e:	2b46      	cmp	r3, #70	; 0x46
 8003e50:	d1e2      	bne.n	8003e18 <_get_semihosting_exts+0x44>
 8003e52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e56:	2b42      	cmp	r3, #66	; 0x42
 8003e58:	d1de      	bne.n	8003e18 <_get_semihosting_exts+0x44>
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f7ff fe6c 	bl	8003b3c <_swilseek>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	dbd7      	blt.n	8003e18 <_get_semihosting_exts+0x44>
 8003e68:	462a      	mov	r2, r5
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff fe4b 	bl	8003b08 <_read>
 8003e72:	4605      	mov	r5, r0
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff fedf 	bl	8003c38 <_close>
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff fe16 	bl	8003aac <checkerror>
 8003e80:	4604      	mov	r4, r0
 8003e82:	e7ce      	b.n	8003e22 <_get_semihosting_exts+0x4e>
 8003e84:	080040d3 	.word	0x080040d3

08003e88 <initialise_semihosting_exts>:
 8003e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e8a:	4d0a      	ldr	r5, [pc, #40]	; (8003eb4 <initialise_semihosting_exts+0x2c>)
 8003e8c:	4c0a      	ldr	r4, [pc, #40]	; (8003eb8 <initialise_semihosting_exts+0x30>)
 8003e8e:	2100      	movs	r1, #0
 8003e90:	2201      	movs	r2, #1
 8003e92:	a801      	add	r0, sp, #4
 8003e94:	6029      	str	r1, [r5, #0]
 8003e96:	6022      	str	r2, [r4, #0]
 8003e98:	f7ff ff9c 	bl	8003dd4 <_get_semihosting_exts>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	dd07      	ble.n	8003eb0 <initialise_semihosting_exts+0x28>
 8003ea0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ea4:	f003 0201 	and.w	r2, r3, #1
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	602a      	str	r2, [r5, #0]
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	b003      	add	sp, #12
 8003eb2:	bd30      	pop	{r4, r5, pc}
 8003eb4:	20000070 	.word	0x20000070
 8003eb8:	20000074 	.word	0x20000074

08003ebc <_has_ext_stdout_stderr>:
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4c04      	ldr	r4, [pc, #16]	; (8003ed0 <_has_ext_stdout_stderr+0x14>)
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	da01      	bge.n	8003eca <_has_ext_stdout_stderr+0xe>
 8003ec6:	f7ff ffdf 	bl	8003e88 <initialise_semihosting_exts>
 8003eca:	6820      	ldr	r0, [r4, #0]
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000074 	.word	0x20000074

08003ed4 <initialise_monitor_handles>:
 8003ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003f8c <initialise_monitor_handles+0xb8>
 8003ede:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	2400      	movs	r4, #0
 8003ee6:	9303      	str	r3, [sp, #12]
 8003ee8:	f10d 0804 	add.w	r8, sp, #4
 8003eec:	9402      	str	r4, [sp, #8]
 8003eee:	2501      	movs	r5, #1
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	beab      	bkpt	0x00ab
 8003ef6:	4605      	mov	r5, r0
 8003ef8:	4e20      	ldr	r6, [pc, #128]	; (8003f7c <initialise_monitor_handles+0xa8>)
 8003efa:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <initialise_monitor_handles+0xac>)
 8003efc:	6035      	str	r5, [r6, #0]
 8003efe:	4623      	mov	r3, r4
 8003f00:	f04f 31ff 	mov.w	r1, #4294967295
 8003f04:	4614      	mov	r4, r2
 8003f06:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	2b14      	cmp	r3, #20
 8003f0e:	d1fa      	bne.n	8003f06 <initialise_monitor_handles+0x32>
 8003f10:	f7ff ffd4 	bl	8003ebc <_has_ext_stdout_stderr>
 8003f14:	4d1b      	ldr	r5, [pc, #108]	; (8003f84 <initialise_monitor_handles+0xb0>)
 8003f16:	b1d0      	cbz	r0, 8003f4e <initialise_monitor_handles+0x7a>
 8003f18:	f04f 0a03 	mov.w	sl, #3
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f22:	2701      	movs	r7, #1
 8003f24:	f8cd a00c 	str.w	sl, [sp, #12]
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	beab      	bkpt	0x00ab
 8003f30:	4683      	mov	fp, r0
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <initialise_monitor_handles+0xb4>)
 8003f34:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f38:	f8c3 b000 	str.w	fp, [r3]
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	4638      	mov	r0, r7
 8003f46:	4641      	mov	r1, r8
 8003f48:	beab      	bkpt	0x00ab
 8003f4a:	4607      	mov	r7, r0
 8003f4c:	602f      	str	r7, [r5, #0]
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	bf02      	ittt	eq
 8003f54:	4b0c      	ldreq	r3, [pc, #48]	; (8003f88 <initialise_monitor_handles+0xb4>)
 8003f56:	681b      	ldreq	r3, [r3, #0]
 8003f58:	602b      	streq	r3, [r5, #0]
 8003f5a:	6833      	ldr	r3, [r6, #0]
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	2600      	movs	r6, #0
 8003f60:	6066      	str	r6, [r4, #4]
 8003f62:	f7ff ffab 	bl	8003ebc <_has_ext_stdout_stderr>
 8003f66:	b130      	cbz	r0, 8003f76 <initialise_monitor_handles+0xa2>
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <initialise_monitor_handles+0xb4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003f76:	b005      	add	sp, #20
 8003f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7c:	200000a4 	.word	0x200000a4
 8003f80:	200000ac 	.word	0x200000ac
 8003f84:	200000a0 	.word	0x200000a0
 8003f88:	200000a8 	.word	0x200000a8
 8003f8c:	080040e9 	.word	0x080040e9

08003f90 <_isatty>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	f7ff fd71 	bl	8003a78 <findslot>
 8003f96:	2509      	movs	r5, #9
 8003f98:	4604      	mov	r4, r0
 8003f9a:	b920      	cbnz	r0, 8003fa6 <_isatty+0x16>
 8003f9c:	f7fe fdf2 	bl	8002b84 <__errno>
 8003fa0:	6005      	str	r5, [r0, #0]
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	4621      	mov	r1, r4
 8003faa:	beab      	bkpt	0x00ab
 8003fac:	4604      	mov	r4, r0
 8003fae:	2c01      	cmp	r4, #1
 8003fb0:	d0f7      	beq.n	8003fa2 <_isatty+0x12>
 8003fb2:	f7fe fde7 	bl	8002b84 <__errno>
 8003fb6:	2400      	movs	r4, #0
 8003fb8:	4606      	mov	r6, r0
 8003fba:	2513      	movs	r5, #19
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	beab      	bkpt	0x00ab
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	6035      	str	r5, [r6, #0]
 8003fc6:	e7ec      	b.n	8003fa2 <_isatty+0x12>

08003fc8 <_init>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr

08003fd4 <_fini>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr
